frontend/lib/admin_screens/admin_academics_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../utils/network_config.dart';

class AdminAcademicsPage extends StatefulWidget {
  const AdminAcademicsPage({super.key});

  @override
  AdminAcademicsPageState createState() => AdminAcademicsPageState();
}

class AdminAcademicsPageState extends State<AdminAcademicsPage> {
  List<Map<String, dynamic>> _subjects = [];
  Map<String, List<Map<String, dynamic>>> _timetableEntries = {};
  Map<String, List<Map<String, dynamic>>> _notes = {};
  List<Map<String, dynamic>> _departments = [];
  String? _token;

  @override
  void initState() {
    super.initState();
    _loadAuthData();
  }

  Future<void> _loadAuthData() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _token = prefs.getString('jwt_token');
    });
    if (_token != null) {
      await _fetchDepartments();
      await _fetchSubjects();
      await _fetchTimetable();
      await _fetchNotes();
    } else {
      Navigator.pushReplacementNamed(context, '/login');
    }
  }

  Future<void> _fetchDepartments() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/departments'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      if (response.statusCode == 200) {
        setState(() {
          _departments =
              List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to load departments: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching departments: $e')),
      );
    }
  }

  Future<void> _fetchSubjects() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/subjects'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      if (response.statusCode == 200) {
        setState(() {
          _subjects =
              List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load subjects: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching subjects: $e')),
      );
    }
  }

  Future<void> _fetchTimetable() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/timetable'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      if (response.statusCode == 200) {
        setState(() {
          _timetableEntries = Map<String, List<Map<String, dynamic>>>.from(json
              .decode(response.body)
              .map((key, value) =>
                  MapEntry(key, List<Map<String, dynamic>>.from(value))));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load timetable: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching timetable: $e')),
      );
    }
  }

  Future<void> _fetchNotes() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/notes'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      if (response.statusCode == 200) {
        setState(() {
          _notes = Map<String, List<Map<String, dynamic>>>.from(json
              .decode(response.body)
              .map((key, value) =>
                  MapEntry(key, List<Map<String, dynamic>>.from(value))));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load notes: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching notes: $e')),
      );
    }
  }

  void _showAddSubjectDialog() {
    showDialog(
      context: context,
      builder: (context) => SubjectFormDialog(
        token: _token!,
        departments: _departments,
        onSubjectAdded: _fetchSubjects,
      ),
    );
  }

  Future<void> _editSubject(String subjectCode) async {
    final subject =
        _subjects.firstWhere((s) => s['subject_code'] == subjectCode);
    showDialog(
      context: context,
      builder: (context) => SubjectFormDialog(
        token: _token!,
        departments: _departments,
        onSubjectAdded: _fetchSubjects,
        initialSubject: subject,
      ),
    );
  }

  Future<void> _deleteSubject(String subjectCode) async {
    try {
      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/subjects/$subjectCode'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      if (response.statusCode == 200) {
        await _fetchSubjects();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Subject deleted successfully!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to delete subject: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting subject: $e')),
      );
    }
  }

  Future<void> _deleteTimetable(int timetableId) async {
    try {
      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/timetable/$timetableId'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      if (response.statusCode == 200) {
        await _fetchTimetable();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Timetable deleted successfully!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to delete timetable: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting timetable: $e')),
      );
    }
  }

  Future<void> _deleteNote(int noteId) async {
    try {
      final response = await http.delete(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/notes/$noteId'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      if (response.statusCode == 200) {
        await _fetchNotes();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Note deleted successfully!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to delete note: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting note: $e')),
      );
    }
  }

  Widget _buildDepartmentSubjects(String departmentCode) {
    final filteredSubjects = _subjects
        .where((subject) => subject['departmentcode'] == departmentCode)
        .toList();
    return filteredSubjects.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No subjects added yet',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredSubjects.length,
            itemBuilder: (context, index) {
              final subject = filteredSubjects[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    '${subject['subject_code']} - ${subject['subject_name']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(
                      'Semester: ${subject['semester']} | Credits: ${subject['credits']} | Instructor: ${subject['instructor_id'] ?? 'None'}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: const Icon(Icons.edit, color: Colors.blueAccent),
                        onPressed: () => _editSubject(subject['subject_code']),
                      ),
                      IconButton(
                        icon: const Icon(Icons.delete, color: Colors.red),
                        onPressed: () =>
                            _deleteSubject(subject['subject_code']),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
  }

  Widget _buildDepartmentTimetable(String departmentCode) {
    final filteredEntries = _timetableEntries[departmentCode] ?? [];
    return filteredEntries.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No timetable uploaded yet',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredEntries.length,
            itemBuilder: (context, index) {
              final entry = filteredEntries[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    'Timetable: ${entry['filename']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(
                      'Semester: ${entry['semester']} | Uploaded: ${entry['uploaded_at']}'),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: const Text('Delete Timetable'),
                        content: Text(
                            'Are you sure you want to delete ${entry['filename']}?'),
                        actions: [
                          TextButton(
                              onPressed: () => Navigator.of(context).pop(),
                              child: const Text('Cancel')),
                          ElevatedButton(
                            onPressed: () {
                              _deleteTimetable(entry['id']);
                              Navigator.of(context).pop();
                            },
                            style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.red),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          );
  }

  Widget _buildDepartmentNotes(String departmentCode) {
    final filteredNotes = _notes[departmentCode] ?? [];
    return filteredNotes.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No notes uploaded yet',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredNotes.length,
            itemBuilder: (context, index) {
              final note = filteredNotes[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    'Notes: ${note['filename']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(
                      'Semester: ${note['semester']} | Uploaded: ${note['uploaded_at']}'),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: const Text('Delete Note'),
                        content: Text(
                            'Are you sure you want to delete ${note['filename']}?'),
                        actions: [
                          TextButton(
                              onPressed: () => Navigator.of(context).pop(),
                              child: const Text('Cancel')),
                          ElevatedButton(
                            onPressed: () {
                              _deleteNote(note['id']);
                              Navigator.of(context).pop();
                            },
                            style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.red),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Academics',
              style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: Colors.blueAccent),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: ListView(
                children: [
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Syllabus',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading: const Icon(Icons.book, color: Colors.blueAccent),
                      children: [
                        ListTile(
                          title: const Text('Add Subjects'),
                          leading: const Icon(Icons.add_circle_outline,
                              color: Colors.green),
                          onTap: _showAddSubjectDialog,
                        ),
                        ..._departments.map((dept) => ExpansionTile(
                              title: Text(dept['departmentname']),
                              children: [
                                _buildDepartmentSubjects(dept['departmentcode'])
                              ],
                            )),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Timetable',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading:
                          const Icon(Icons.schedule, color: Colors.blueAccent),
                      children: [
                        ..._departments.map((dept) => ExpansionTile(
                              title: Text(dept['departmentname']),
                              children: [
                                _buildDepartmentTimetable(
                                    dept['departmentcode'])
                              ],
                            )),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Notes',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading: const Icon(Icons.note, color: Colors.blueAccent),
                      children: [
                        ..._departments.map((dept) => ExpansionTile(
                              title: Text(dept['departmentname']),
                              children: [
                                _buildDepartmentNotes(dept['departmentcode'])
                              ],
                            )),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// New SubjectFormDialog widget to handle add/edit logic
class SubjectFormDialog extends StatefulWidget {
  final String token;
  final List<Map<String, dynamic>> departments;
  final VoidCallback onSubjectAdded;
  final Map<String, dynamic>? initialSubject;

  const SubjectFormDialog({
    super.key,
    required this.token,
    required this.departments,
    required this.onSubjectAdded,
    this.initialSubject,
  });

  @override
  SubjectFormDialogState createState() => SubjectFormDialogState();
}

class SubjectFormDialogState extends State<SubjectFormDialog> {
  final _formKey = GlobalKey<FormState>();
  String? _semester;
  String? _subjectCode;
  String? _subjectName;
  int? _credits;
  String? _departmentCode;
  String? _instructorId;
  List<Map<String, dynamic>> _staff = [];
  bool _isLoadingStaff = false;
  final List<String> _semesters = [
    'S1',
    'S2',
    'S3',
    'S4',
    'S5',
    'S6',
    'S7',
    'S8'
  ];

  @override
  void initState() {
    super.initState();
    if (widget.initialSubject != null) {
      _semester = widget.initialSubject!['semester'];
      _subjectCode = widget.initialSubject!['subject_code'];
      _subjectName = widget.initialSubject!['subject_name'];
      _credits = widget.initialSubject!['credits'];
      _departmentCode = widget.initialSubject!['departmentcode'];
      _instructorId = widget.initialSubject!['instructor_id'];
      _fetchStaff(_departmentCode!); // Preload staff for edit mode
    }
  }

  Future<void> _fetchStaff(String departmentCode) async {
    print('Fetching staff for department: $departmentCode');
    setState(() {
      _isLoadingStaff = true;
      _staff = [];
      _instructorId = null; // Reset instructor unless editing
    });
    try {
      final response = await http.get(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/users_by_department'),
        headers: {'Authorization': 'Bearer ${widget.token}'},
      );
      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _staff = data.containsKey(departmentCode) &&
                  data[departmentCode]['staff'] != null
              ? List<Map<String, dynamic>>.from(data[departmentCode]['staff'])
              : [];
          _isLoadingStaff = false;
          if (widget.initialSubject != null &&
              widget.initialSubject!['instructor_id'] != null) {
            _instructorId = widget
                .initialSubject!['instructor_id']; // Retain instructor for edit
          }
          print('Staff loaded: $_staff');
          if (_staff.isEmpty) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('No staff available for $departmentCode')),
            );
          }
        });
      } else {
        setState(() {
          _isLoadingStaff = false;
        });
        print('Failed to load staff: ${response.body}');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load staff: ${response.body}')),
        );
      }
    } catch (e) {
      setState(() {
        _isLoadingStaff = false;
      });
      print('Error fetching staff: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching staff: $e')),
      );
    }
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      try {
        final url = widget.initialSubject == null
            ? Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/subjects')
            : Uri.parse(
                '${NetworkConfig.getBaseUrl()}/api/admin/subjects/$_subjectCode');
        final method = widget.initialSubject == null ? http.post : http.put;
        final response = await method(
          url,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ${widget.token}',
          },
          body: json.encode({
            'semester': _semester,
            'subject_code': _subjectCode,
            'subject_name': _subjectName,
            'credits': _credits,
            'departmentcode': _departmentCode,
            'instructor_id': _instructorId,
          }),
        );
        if (response.statusCode ==
            (widget.initialSubject == null ? 201 : 200)) {
          widget.onSubjectAdded();
          Navigator.of(context).pop();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text(
                    'Subject ${widget.initialSubject == null ? 'added' : 'updated'} successfully!')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text(
                    'Failed to ${widget.initialSubject == null ? 'add' : 'update'} subject: ${response.body}')),
          );
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text(
                  'Error ${widget.initialSubject == null ? 'adding' : 'updating'} subject: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(
          widget.initialSubject == null ? 'Add New Subject' : 'Edit Subject'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              DropdownButtonFormField<String>(
                decoration: InputDecoration(
                  labelText: 'Semester',
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                value: _semester,
                items: _semesters
                    .map(
                        (sem) => DropdownMenuItem(value: sem, child: Text(sem)))
                    .toList(),
                onChanged: (value) => setState(() => _semester = value),
                validator: (value) =>
                    value == null ? 'Please select a semester' : null,
              ),
              const SizedBox(height: 10),
              TextFormField(
                initialValue: _subjectCode,
                decoration: InputDecoration(
                  labelText: 'Subject Code',
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                validator: (value) =>
                    value!.isEmpty ? 'Please enter a subject code' : null,
                onSaved: (value) => _subjectCode = value,
                enabled: widget.initialSubject ==
                    null, // Disable editing subject code when updating
              ),
              const SizedBox(height: 10),
              TextFormField(
                initialValue: _subjectName,
                decoration: InputDecoration(
                  labelText: 'Subject Name',
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                validator: (value) =>
                    value!.isEmpty ? 'Please enter a subject name' : null,
                onSaved: (value) => _subjectName = value,
              ),
              const SizedBox(height: 10),
              TextFormField(
                initialValue: _credits?.toString(),
                decoration: InputDecoration(
                  labelText: 'Credits',
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                keyboardType: TextInputType.number,
                validator: (value) =>
                    value!.isEmpty || int.tryParse(value) == null
                        ? 'Please enter valid credits'
                        : null,
                onSaved: (value) => _credits = int.parse(value!),
              ),
              const SizedBox(height: 10),
              DropdownButtonFormField<String>(
                decoration: InputDecoration(
                  labelText: 'Department',
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                value: _departmentCode,
                items: widget.departments
                    .map((dept) => DropdownMenuItem<String>(
                          value: dept['departmentcode'].toString(),
                          child: Text(dept['departmentname']),
                        ))
                    .toList(),
                onChanged: (value) async {
                  print('Department changed to: $value');
                  setState(() {
                    _departmentCode = value;
                    _instructorId = null; // Reset instructor
                  });
                  await _fetchStaff(value!); // Fetch new staff
                },
                validator: (value) =>
                    value == null ? 'Please select a department' : null,
              ),
              const SizedBox(height: 10),
              _isLoadingStaff
                  ? const CircularProgressIndicator()
                  : DropdownButtonFormField<String>(
                      decoration: InputDecoration(
                        labelText: 'Instructor',
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10)),
                      ),
                      value: _instructorId,
                      items: _staff.isEmpty
                          ? [
                              const DropdownMenuItem<String>(
                                  value: null,
                                  child: Text('No staff available'))
                            ]
                          : _staff
                              .map((staff) => DropdownMenuItem<String>(
                                    value: staff['admission_number'],
                                    child: Text(staff['username']),
                                  ))
                              .toList(),
                      onChanged: (value) {
                        print('Instructor selected: $value');
                        setState(() => _instructorId = value);
                      },
                      validator: (value) => _staff.isNotEmpty && value == null
                          ? 'Please select an instructor'
                          : null,
                    ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: _submitForm,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blueAccent,
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          ),
          child: Text(widget.initialSubject == null ? 'Add' : 'Update'),
        ),
      ],
    );
  }
}

============================

frontend/lib/admin_screens/admin_announcements_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/network_config.dart';

class AdminAnnouncementsPage extends StatefulWidget {
  const AdminAnnouncementsPage({super.key});

  @override
  _AdminAnnouncementsPageState createState() => _AdminAnnouncementsPageState();
}

class _AdminAnnouncementsPageState extends State<AdminAnnouncementsPage> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _messageController = TextEditingController();
  String _category = 'general';
  String? _selectedDepartment; // For department announcements
  List<String> departments = []; // List of department codes
  List generalAnnouncements = [];
  List deptAnnouncements = [];
  bool isLoading = true;
  String? jwtToken;
  bool sendEmail = false;
  bool sendToStudents = false;
  bool sendToStaff = false;
  bool sendToHod = false;
  bool isDeptAnnouncement =
      false; // Toggle between general and dept announcements

  @override
  void initState() {
    super.initState();
    _loadTokenAndFetch();
  }

  Future<void> _loadTokenAndFetch() async {
    setState(() => isLoading = true);
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      setState(() {
        jwtToken = prefs.getString('jwt_token');
      });
      if (jwtToken != null) {
        await _fetchDepartments();
        await _fetchGeneralAnnouncements();
        await _fetchDeptAnnouncements();
      }
    } catch (e) {
      debugPrint('Error loading token or data: $e');
    } finally {
      setState(() => isLoading = false);
    }
  }

  Future<void> _fetchDepartments() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/departments'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          departments = List<String>.from(
              json.decode(response.body).map((d) => d['departmentcode']));
        });
      }
    } catch (e) {
      debugPrint('Error fetching departments: $e');
    }
  }

  Future<void> _fetchGeneralAnnouncements() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/announcements'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          generalAnnouncements = json.decode(response.body);
        });
      }
    } catch (e) {
      debugPrint('Error fetching general announcements: $e');
    }
  }

  Future<void> _fetchDeptAnnouncements() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/department_announcements'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          deptAnnouncements = json.decode(response.body);
        });
      }
    } catch (e) {
      debugPrint('Error fetching department announcements: $e');
    }
  }

  Future<void> _createAnnouncement() async {
    try {
      final url = isDeptAnnouncement
          ? '${NetworkConfig.getBaseUrl()}/api/department_announcements'
          : '${NetworkConfig.getBaseUrl()}/api/announcements';
      final body = isDeptAnnouncement
          ? {
              'title': _titleController.text,
              'message': _messageController.text,
              'category': _category,
              'departmentcode': _selectedDepartment,
              'send_email': sendEmail,
              'email_recipients': {
                'students': sendToStudents,
                'staff': sendToStaff,
              },
            }
          : {
              'title': _titleController.text,
              'message': _messageController.text,
              'category': _category,
              'send_email': sendEmail,
              'email_recipients': {
                'students': sendToStudents,
                'staff': sendToStaff,
                'hod': sendToHod,
              },
            };
      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer $jwtToken',
          'Content-Type': 'application/json',
        },
        body: json.encode(body),
      );
      if (response.statusCode == 201) {
        _titleController.clear();
        _messageController.clear();
        setState(() {
          sendEmail = false;
          sendToStudents = false;
          sendToStaff = false;
          sendToHod = false;
          _selectedDepartment = null;
          isDeptAnnouncement = false;
        });
        await _fetchGeneralAnnouncements();
        await _fetchDeptAnnouncements();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Announcement created successfully')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to create: ${response.body}')),
        );
      }
    } catch (e) {
      debugPrint('Error creating announcement: $e');
    }
  }

  Future<void> _updateAnnouncement(int announcementId) async {
    try {
      final url = isDeptAnnouncement
          ? '${NetworkConfig.getBaseUrl()}/api/department_announcements/$announcementId'
          : '${NetworkConfig.getBaseUrl()}/api/announcements/$announcementId';
      final body = isDeptAnnouncement
          ? {
              'title': _titleController.text,
              'message': _messageController.text,
              'category': _category,
              'departmentcode': _selectedDepartment,
            }
          : {
              'title': _titleController.text,
              'message': _messageController.text,
              'category': _category,
            };
      final response = await http.put(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer $jwtToken',
          'Content-Type': 'application/json',
        },
        body: json.encode(body),
      );
      if (response.statusCode == 200) {
        _titleController.clear();
        _messageController.clear();
        setState(() {
          sendEmail = false;
          sendToStudents = false;
          sendToStaff = false;
          sendToHod = false;
          _selectedDepartment = null;
          isDeptAnnouncement = false;
        });
        await _fetchGeneralAnnouncements();
        await _fetchDeptAnnouncements();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Announcement updated successfully')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to update: ${response.body}')),
        );
      }
    } catch (e) {
      debugPrint('Error updating announcement: $e');
    }
  }

  Future<void> _deleteAnnouncement(int announcementId, bool isDept) async {
    try {
      final url = isDept
          ? '${NetworkConfig.getBaseUrl()}/api/department_announcements/$announcementId'
          : '${NetworkConfig.getBaseUrl()}/api/announcements/$announcementId';
      final response = await http.delete(
        Uri.parse(url),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        await _fetchGeneralAnnouncements();
        await _fetchDeptAnnouncements();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Announcement deleted successfully')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to delete: ${response.body}')),
        );
      }
    } catch (e) {
      debugPrint('Error deleting announcement: $e');
    }
  }

  void _showAnnouncementDialog({Map<String, dynamic>? announcement}) {
    if (announcement != null) {
      _titleController.text = announcement['title'];
      _messageController.text = announcement['message'];
      _category = announcement['category'];
      isDeptAnnouncement = announcement.containsKey('departmentcode');
      _selectedDepartment = announcement['departmentcode'];
    } else {
      _titleController.clear();
      _messageController.clear();
      _category = 'general';
      _selectedDepartment = null;
      isDeptAnnouncement = false;
    }
    setState(() {
      sendEmail = false;
      sendToStudents = false;
      sendToStaff = false;
      sendToHod = false;
    });

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: Text(
              announcement == null ? 'New Announcement' : 'Edit Announcement'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                SwitchListTile(
                  title: const Text('Department Announcement'),
                  value: isDeptAnnouncement,
                  onChanged: announcement == null
                      ? (value) =>
                          setDialogState(() => isDeptAnnouncement = value)
                      : null,
                ),
                if (isDeptAnnouncement && departments.isNotEmpty)
                  DropdownButton<String>(
                    value: _selectedDepartment ?? departments.first,
                    hint: const Text('Select Department'),
                    onChanged: (value) =>
                        setDialogState(() => _selectedDepartment = value),
                    items: departments
                        .map((d) => DropdownMenuItem(value: d, child: Text(d)))
                        .toList(),
                  ),
                TextField(
                  controller: _titleController,
                  decoration: const InputDecoration(labelText: 'Title'),
                ),
                TextField(
                  controller: _messageController,
                  decoration: const InputDecoration(labelText: 'Message'),
                  maxLines: 3,
                ),
                DropdownButton<String>(
                  value: _category,
                  onChanged: (value) =>
                      setDialogState(() => _category = value!),
                  items: [
                    'bus',
                    'placement',
                    'class_suspension',
                    'event',
                    'general'
                  ]
                      .map((e) => DropdownMenuItem(value: e, child: Text(e)))
                      .toList(),
                ),
                if (announcement == null) ...[
                  SwitchListTile(
                    title: const Text('Send Email'),
                    value: sendEmail,
                    onChanged: (value) =>
                        setDialogState(() => sendEmail = value),
                  ),
                  if (sendEmail) ...[
                    SwitchListTile(
                      title: const Text('To Students'),
                      value: sendToStudents,
                      onChanged: (value) =>
                          setDialogState(() => sendToStudents = value),
                    ),
                    SwitchListTile(
                      title: const Text('To Staff'),
                      value: sendToStaff,
                      onChanged: (value) =>
                          setDialogState(() => sendToStaff = value),
                    ),
                    if (!isDeptAnnouncement)
                      SwitchListTile(
                        title: const Text('To HOD'),
                        value: sendToHod,
                        onChanged: (value) =>
                            setDialogState(() => sendToHod = value),
                      ),
                  ],
                ],
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                if (isDeptAnnouncement && _selectedDepartment == null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Please select a department')),
                  );
                  return;
                }
                if (announcement == null) {
                  _createAnnouncement();
                } else {
                  _updateAnnouncement(announcement['id']);
                }
                Navigator.pop(context);
              },
              child: const Text('Save'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    if (jwtToken == null) {
      return Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text('Please log in to view and manage announcements'),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () =>
                    Navigator.pushReplacementNamed(context, '/login'),
                child: const Text('Go to Login'),
              ),
            ],
          ),
        ),
      );
    }

    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ElevatedButton(
              onPressed: () => _showAnnouncementDialog(),
              child: const Text('Create Announcement'),
            ),
            const SizedBox(height: 16),
            const Text('General Announcements',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            Expanded(
              child: generalAnnouncements.isEmpty && deptAnnouncements.isEmpty
                  ? const Center(child: Text('No announcements available'))
                  : ListView(
                      children: [
                        ...generalAnnouncements
                            .map((a) => _buildAnnouncementTile(a, false))
                            .toList(),
                        if (deptAnnouncements.isNotEmpty) ...[
                          const SizedBox(height: 16),
                          const Text('Department Announcements',
                              style: TextStyle(
                                  fontSize: 18, fontWeight: FontWeight.bold)),
                          ...deptAnnouncements
                              .map((a) => _buildAnnouncementTile(a, true))
                              .toList(),
                        ],
                      ],
                    ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnnouncementTile(
      Map<String, dynamic> announcement, bool isDept) {
    return Card(
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: _getColor(announcement['category']),
          child: Icon(_getIcon(announcement['category']), color: Colors.white),
        ),
        title: Text(announcement['title']),
        subtitle: Text(
          '${announcement['message']}${isDept ? '\nDepartment: ${announcement['departmentcode']}' : ''}',
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: const Icon(Icons.edit),
              onPressed: () =>
                  _showAnnouncementDialog(announcement: announcement),
            ),
            IconButton(
              icon: const Icon(Icons.delete),
              onPressed: () => _deleteAnnouncement(announcement['id'], isDept),
            ),
          ],
        ),
        onTap: () {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: Text(announcement['title']),
              content: Text(
                '${announcement['message']}\n\nCategory: ${announcement['category']}\nCreated: ${announcement['created_at']}${isDept ? '\nDepartment: ${announcement['departmentcode']}' : ''}',
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Close'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Color _getColor(String category) {
    switch (category) {
      case 'bus':
        return Colors.orange;
      case 'placement':
        return Colors.purple;
      case 'class_suspension':
        return Colors.red;
      case 'event':
        return Colors.green;
      case 'general':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  IconData _getIcon(String category) {
    switch (category) {
      case 'bus':
        return Icons.directions_bus;
      case 'placement':
        return Icons.work;
      case 'class_suspension':
        return Icons.warning;
      case 'event':
        return Icons.event;
      case 'general':
        return Icons.info;
      default:
        return Icons.help;
    }
  }
}

============================

frontend/lib/admin_screens/admin_dashboard.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'admin_home_page.dart';
import 'admin_academics_page.dart';
import 'admin_announcements_page.dart';
import 'admin_students_page.dart';
import 'departments_page.dart';
import 'users_page.dart';

class AdminDashboard extends StatefulWidget {
  const AdminDashboard({super.key});

  @override
  AdminDashboardState createState() => AdminDashboardState();
}

class AdminDashboardState extends State<AdminDashboard> {
  int _selectedIndex = 0;

  static const List<Widget> _bottomNavPages = <Widget>[
    AdminHomePage(),
    AdminAcademicsPage(),
    AdminAnnouncementsPage(),
    AdminStudentsPage(),
  ];

  void _onBottomNavItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  Future<void> _logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Admin Dashboard"),
        backgroundColor: Theme.of(context).primaryColor,
      ),
      drawer: _buildDrawer(),
      body: _bottomNavPages[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.school), label: 'Academics'),
          BottomNavigationBarItem(
              icon: Icon(Icons.announcement), label: 'Announcements'),
          BottomNavigationBarItem(icon: Icon(Icons.people), label: 'Students'),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Theme.of(context).primaryColor,
        unselectedItemColor: Colors.grey,
        onTap: _onBottomNavItemTapped,
      ),
    );
  }

  Widget _buildDrawer() {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          DrawerHeader(
            decoration: BoxDecoration(
              color: Theme.of(context).primaryColor,
            ),
            child: const Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                CircleAvatar(
                  radius: 40,
                  backgroundColor: Colors.white,
                  child: Icon(Icons.admin_panel_settings,
                      size: 50, color: Color(0xFF0C6170)),
                ),
                SizedBox(height: 10),
                Text(
                  'Admin Panel',
                  style: TextStyle(
                      color: Colors.white,
                      fontSize: 24,
                      fontWeight: FontWeight.bold),
                ),
              ],
            ),
          ),
          ListTile(
            leading: const Icon(Icons.person_add),
            title: const Text('Manage Users'),
            onTap: () {
              Navigator.pop(context);
              Navigator.push(context,
                  MaterialPageRoute(builder: (context) => const UsersPage()));
            },
          ),
          ListTile(
            leading: const Icon(Icons.domain),
            title: const Text('Manage Departments'),
            onTap: () {
              Navigator.pop(context);
              Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => const DepartmentPage()));
            },
          ),
          const Divider(),
          ListTile(
            leading: const Icon(Icons.logout),
            title: const Text('Logout'),
            onTap: _logout,
          ),
        ],
      ),
    );
  }
}

============================

frontend/lib/admin_screens/admin_home_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../utils/network_config.dart';

class AdminHomePage extends StatefulWidget {
  const AdminHomePage({super.key});

  @override
  _AdminHomePageState createState() => _AdminHomePageState();
}

class _AdminHomePageState extends State<AdminHomePage> {
  int _userCount = 0;
  int _departmentCount = 0;
  bool _isLoading = true;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    fetchCounts();
  }

  Future<void> fetchCounts() async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      // Fetch users count
      final usersResponse = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/users'),
        headers: {'Authorization': 'Bearer $token'},
      );

      // Fetch departments count
      final departmentsResponse = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/departments'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (usersResponse.statusCode == 200 &&
          departmentsResponse.statusCode == 200) {
        final usersData = jsonDecode(usersResponse.body) as List<dynamic>;
        final departmentsData =
            jsonDecode(departmentsResponse.body) as List<dynamic>;
        setState(() {
          _userCount = usersData.length;
          _departmentCount = departmentsData.length;
          _errorMessage = null;
        });
      } else {
        setState(() {
          _errorMessage =
              'Failed to load data: Users(${usersResponse.statusCode}), Departments(${departmentsResponse.statusCode})';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching data: $e';
      });
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Welcome, Admin!",
            style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Color(0xFF0C6170)),
          ),
          const SizedBox(height: 20),
          const Text(
            "Manage your campus efficiently from here.",
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 30),
          Card(
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  const Icon(Icons.info, size: 40, color: Color(0xFF0C6170)),
                  const SizedBox(height: 10),
                  const Text(
                    "Quick Stats",
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  _isLoading
                      ? const Center(child: CircularProgressIndicator())
                      : _errorMessage != null
                          ? Text(
                              _errorMessage!,
                              style: const TextStyle(color: Colors.red),
                            )
                          : Row(
                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                _buildStatItem("Users", _userCount.toString()),
                                _buildStatItem(
                                    "Departments", _departmentCount.toString()),
                              ],
                            ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatItem(String title, String value) {
    return Column(
      children: [
        Text(
          value,
          style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
        Text(
          title,
          style: const TextStyle(fontSize: 16, color: Colors.grey),
        ),
      ],
    );
  }
}

============================

frontend/lib/admin_screens/admin_students_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../utils/network_config.dart';

class AdminStudentsPage extends StatefulWidget {
  const AdminStudentsPage({super.key});

  @override
  AdminStudentsPageState createState() => AdminStudentsPageState();
}

class AdminStudentsPageState extends State<AdminStudentsPage> {
  List<dynamic> _students = [];
  dynamic _searchedStudent;
  String _searchQuery = '';
  String? _selectedBatch;
  bool _isLoading = true;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _fetchStudents();
  }

  Future<void> _fetchStudents() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/users'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final allUsers = json.decode(response.body);
        setState(() {
          _students =
              allUsers.where((user) => user['role'] == 'student').toList();
          _isLoading = false;
          _errorMessage = null;
        });
      } else {
        setState(() {
          _isLoading = false;
          _errorMessage = 'Failed to load students: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
        _errorMessage = 'Error fetching students: $e';
      });
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  void _searchStudent() {
    setState(() {
      _searchedStudent = null;
      if (_searchQuery.isNotEmpty) {
        _searchedStudent = _students.firstWhere(
          (student) =>
              (student['username']
                      .toLowerCase()
                      .contains(_searchQuery.toLowerCase()) ||
                  student['admission_number']
                      .toLowerCase()
                      .contains(_searchQuery.toLowerCase())) &&
              (_selectedBatch == null || student['batch'] == _selectedBatch),
          orElse: () => null,
        );
      }
    });
  }

  List<String> _getBatchOptions() {
    return _students
        .map((student) => student['batch'] as String?)
        .whereType<String>()
        .toSet()
        .toList();
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          TextField(
            decoration: const InputDecoration(
              labelText: 'Search by Name or Admission Number',
              prefixIcon: Icon(Icons.search),
              border: OutlineInputBorder(),
            ),
            onChanged: (value) {
              _searchQuery = value;
              _searchStudent();
            },
          ),
          const SizedBox(height: 10),
          DropdownButtonFormField<String>(
            value: _selectedBatch,
            hint: const Text('Filter by Batch'),
            items: _getBatchOptions().map((batch) {
              return DropdownMenuItem<String>(value: batch, child: Text(batch));
            }).toList()
              ..add(const DropdownMenuItem<String>(
                  value: null, child: Text('All Batches'))),
            onChanged: (value) {
              _selectedBatch = value;
              _searchStudent();
            },
            decoration: const InputDecoration(border: OutlineInputBorder()),
          ),
          const SizedBox(height: 20),
          Expanded(
            child: _isLoading
                ? const Center(child: CircularProgressIndicator())
                : _errorMessage != null
                    ? Center(child: Text(_errorMessage!))
                    : _searchQuery.isEmpty
                        ? const Center(
                            child:
                                Text('Enter a search query to find a student'))
                        : _searchedStudent == null
                            ? const Center(child: Text('No student found'))
                            : Card(
                                elevation: 4,
                                child: Padding(
                                  padding: const EdgeInsets.all(16.0),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Row(
                                        children: [
                                          const Icon(Icons.school,
                                              size: 30,
                                              color: Color(0xFF0C6170)),
                                          const SizedBox(width: 10),
                                          Text(
                                            _searchedStudent['username'] ??
                                                'Unknown',
                                            style: const TextStyle(
                                                fontSize: 20,
                                                fontWeight: FontWeight.bold),
                                          ),
                                        ],
                                      ),
                                      const Divider(),
                                      _buildDetailRow('Admission No:',
                                          _searchedStudent['admission_number']),
                                      _buildDetailRow('Email:',
                                          _searchedStudent['email'] ?? 'N/A'),
                                      _buildDetailRow('Batch:',
                                          _searchedStudent['batch'] ?? 'N/A'),
                                      _buildDetailRow(
                                          'Department:',
                                          _searchedStudent['departmentcode'] ??
                                              'N/A'),
                                      _buildDetailRow(
                                          'Phone:',
                                          _searchedStudent['phone_number'] ??
                                              'N/A'),
                                    ],
                                  ),
                                ),
                              ),
          ),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label,
              style:
                  const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
          Text(value, style: const TextStyle(fontSize: 16)),
        ],
      ),
    );
  }
}

============================

frontend/lib/admin_screens/departments_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../utils/network_config.dart';

class DepartmentPage extends StatefulWidget {
  const DepartmentPage({super.key});

  @override
  State<DepartmentPage> createState() => _DepartmentPageState();
}

class _DepartmentPageState extends State<DepartmentPage> {
  bool _isLoading = false;
  String? _errorMessage;
  List<Map<String, dynamic>> _departments = [];

  @override
  void initState() {
    super.initState();
    fetchDepartments();
  }

  Future<void> fetchDepartments() async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/departments'), // Updated endpoint
        headers: {'Authorization': 'Bearer $token'},
      );

      debugPrint(
          'Fetch Departments Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> fetchedData = jsonDecode(response.body);
        print('Fetched Departments: $fetchedData');
        setState(() {
          _departments = fetchedData.cast<Map<String, dynamic>>();
          _errorMessage = null;
        });
      } else if (response.statusCode == 403) {
        setState(() {
          _errorMessage = 'Admin access required to view departments.';
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to fetch departments: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching departments: $e';
      });
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> addDepartment(String code, String name) async {
    if (code.isEmpty || name.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Department code and name are required')),
      );
      return;
    }

    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        print('No JWT token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/admin/departments'); // Updated endpoint
      print('Adding department at: $url with code: $code, name: $name');
      final response = await http.post(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'departmentcode': code,
          'departmentname': name,
        }),
      );

      print(
          'Add Department Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 201) {
        setState(() {
          _departments.add({'departmentcode': code, 'departmentname': name});
          _errorMessage = null;
        });
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Department added successfully')),
          );
        }
      } else {
        String errorMsg;
        if (response.statusCode == 400) {
          errorMsg = 'Missing department code or name.';
        } else if (response.statusCode == 403) {
          errorMsg = 'Admin access required to add departments.';
        } else if (response.statusCode == 409) {
          errorMsg = 'Department code $code already exists.';
        } else {
          errorMsg =
              'Failed to add department: ${response.statusCode} - ${response.body}';
        }
        setState(() {
          _errorMessage = errorMsg;
        });
        print('Add error: $errorMsg');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(errorMsg)),
          );
        }
      }
    } catch (e) {
      String errorMsg = 'Error adding department: $e';
      setState(() {
        _errorMessage = errorMsg;
      });
      debugPrint('Add exception: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMsg)),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> updateDepartment(
      String departmentcode, String code, String name) async {
    if (code.isEmpty || name.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Department code and name are required')),
      );
      return;
    }

    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        print('No JWT token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/admin/departments/$departmentcode'); // Updated endpoint
      print(
          'Updating department at: $url with original code: $departmentcode, new code: $code, name: $name');
      final response = await http.put(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'departmentcode': code,
          'departmentname': name,
        }),
      );

      print(
          'Update Department Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        setState(() {
          final index = _departments
              .indexWhere((dept) => dept['departmentcode'] == departmentcode);
          if (index != -1) {
            _departments[index] = {
              'departmentcode': code,
              'departmentname': name
            };
          }
          _errorMessage = null;
        });
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Department updated successfully')),
          );
        }
      } else {
        String errorMsg;
        if (response.statusCode == 400) {
          errorMsg = 'Missing department code or name.';
        } else if (response.statusCode == 403) {
          errorMsg = 'Admin access required to update departments.';
        } else if (response.statusCode == 404) {
          errorMsg = 'Department $departmentcode not found on server.';
          await fetchDepartments();
        } else if (response.statusCode == 409) {
          errorMsg = 'New department code $code already exists.';
        } else {
          errorMsg =
              'Failed to update department: ${response.statusCode} - ${response.body}';
        }
        setState(() {
          _errorMessage = errorMsg;
        });
        print('Update error: $errorMsg');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(errorMsg)),
          );
        }
      }
    } catch (e) {
      String errorMsg = 'Error updating department: $e';
      setState(() {
        _errorMessage = errorMsg;
      });
      print('Update exception: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMsg)),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> deleteDepartment(String departmentcode) async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        print('No JWT token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/admin/departments/$departmentcode'); // Updated endpoint
      print('Deleting department at: $url with code: $departmentcode');
      final response = await http.delete(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      print(
          'Delete Department Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        setState(() {
          _departments
              .removeWhere((dept) => dept['departmentcode'] == departmentcode);
          _errorMessage = null;
        });
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Department deleted successfully')),
          );
        }
      } else {
        String errorMsg;
        if (response.statusCode == 403) {
          errorMsg = 'Admin access required to delete departments.';
        } else if (response.statusCode == 404) {
          errorMsg = 'Department $departmentcode not found on server.';
          await fetchDepartments();
        } else {
          errorMsg =
              'Failed to delete department: ${response.statusCode} - ${response.body}';
        }
        setState(() {
          _errorMessage = errorMsg;
        });
        print('Delete error: $errorMsg');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(errorMsg)),
          );
        }
      }
    } catch (e) {
      String errorMsg = 'Error deleting department: $e';
      setState(() {
        _errorMessage = errorMsg;
      });
      print('Delete exception: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMsg)),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Departments'),
        backgroundColor: Theme.of(context).primaryColor,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => _showAddDialog(),
            tooltip: 'Add Department',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _departments.isEmpty
              ? const Center(child: Text('No departments available'))
              : Column(
                  children: [
                    if (_errorMessage != null)
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          _errorMessage!,
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    Expanded(
                      child: ListView.builder(
                        itemCount: _departments.length,
                        itemBuilder: (context, index) {
                          final dept = _departments[index];
                          return Card(
                            margin: const EdgeInsets.symmetric(
                                horizontal: 16.0, vertical: 8.0),
                            elevation: 2,
                            child: ListTile(
                              title: Text(
                                dept['departmentname'],
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                              subtitle: Text('Code: ${dept['departmentcode']}'),
                              trailing: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  IconButton(
                                    icon: const Icon(Icons.edit,
                                        color: Colors.blue),
                                    onPressed: () => _showUpdateDialog(
                                        dept['departmentcode'],
                                        dept['departmentname']),
                                  ),
                                  IconButton(
                                    icon: const Icon(Icons.delete,
                                        color: Colors.red),
                                    onPressed: () => _showDeleteConfirmation(
                                        dept['departmentcode']),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
    );
  }

  void _showAddDialog() {
    final codeController = TextEditingController();
    final nameController = TextEditingController();
    String? codeError;
    String? nameError;

    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setDialogState) {
            return AlertDialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16.0),
              ),
              elevation: 8,
              backgroundColor: Colors.white,
              title: Row(
                children: [
                  const Icon(Icons.add_circle, color: Color(0xFF0C6170)),
                  const SizedBox(width: 8),
                  Text(
                    'Add Department',
                    style: TextStyle(
                      color: Theme.of(context).primaryColor,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              content: SizedBox(
                width: 300,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: codeController,
                      decoration: InputDecoration(
                        labelText: 'Department Code',
                        hintText: 'e.g., CS',
                        labelStyle: const TextStyle(color: Color(0xFF0C6170)),
                        hintStyle: const TextStyle(color: Colors.grey),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12.0),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12.0),
                          borderSide: const BorderSide(
                              color: Color(0xFF0C6170), width: 2),
                        ),
                        errorText: codeError,
                      ),
                      onChanged: (value) {
                        setDialogState(() {
                          codeError = value.isEmpty ? 'Code is required' : null;
                        });
                      },
                    ),
                    const SizedBox(height: 16),
                    TextField(
                      controller: nameController,
                      decoration: InputDecoration(
                        labelText: 'Department Name',
                        hintText: 'e.g., Computer Science',
                        labelStyle: const TextStyle(color: Color(0xFF0C6170)),
                        hintStyle: const TextStyle(color: Colors.grey),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12.0),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12.0),
                          borderSide: const BorderSide(
                              color: Color(0xFF0C6170), width: 2),
                        ),
                        errorText: nameError,
                      ),
                      onChanged: (value) {
                        setDialogState(() {
                          nameError = value.isEmpty ? 'Name is required' : null;
                        });
                      },
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel',
                      style: TextStyle(color: Colors.grey)),
                ),
                ElevatedButton(
                  onPressed: (codeError == null &&
                          nameError == null &&
                          codeController.text.isNotEmpty &&
                          nameController.text.isNotEmpty)
                      ? () {
                          Navigator.pop(context);
                          addDepartment(codeController.text.trim(),
                              nameController.text.trim());
                        }
                      : null,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF0C6170),
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12.0),
                    ),
                    padding: const EdgeInsets.symmetric(
                        horizontal: 20, vertical: 10),
                  ),
                  child: const Text('Add'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _showUpdateDialog(String currentCode, String currentName) {
    final codeController = TextEditingController(text: currentCode);
    final nameController = TextEditingController(text: currentName);

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Update Department'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: codeController,
                decoration: const InputDecoration(
                  labelText: 'Department Code',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 12),
              TextField(
                controller: nameController,
                decoration: const InputDecoration(
                  labelText: 'Department Name',
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                updateDepartment(currentCode, codeController.text.trim(),
                    nameController.text.trim());
              },
              child: const Text('Update'),
            ),
          ],
        );
      },
    );
  }

  void _showDeleteConfirmation(String departmentcode) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Delete Department'),
          content: Text('Are you sure you want to delete $departmentcode?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                deleteDepartment(departmentcode);
              },
              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
              child: const Text('Delete'),
            ),
          ],
        );
      },
    );
  }
}

============================

frontend/lib/admin_screens/users_page.dart:

contents:
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/network_config.dart';

class UsersPage extends StatefulWidget {
  const UsersPage({super.key});

  @override
  _UsersPageState createState() => _UsersPageState();
}

class _UsersPageState extends State<UsersPage> {
  Map<String, Map<String, List<Map<String, dynamic>>>> _departmentUsers = {};
  List<Map<String, dynamic>> _departments = [];
  String? _errorMessage;
  bool _isLoading = true;
  bool _isLoadingAction = false;

  @override
  void initState() {
    super.initState();
    _fetchData();
  }

  Future<void> _fetchData() async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      // Fetch departments
      final deptResponse = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/departments'),
        headers: {'Authorization': 'Bearer $token'},
      );
      if (deptResponse.statusCode == 200) {
        _departments =
            List<Map<String, dynamic>>.from(jsonDecode(deptResponse.body));
      } else if (deptResponse.statusCode == 401) {
        _handleTokenExpiration();
        return;
      } else {
        setState(() {
          _errorMessage =
              'Failed to load departments: ${deptResponse.statusCode} - ${deptResponse.body}';
        });
      }

      // Fetch users grouped by department
      final usersResponse = await http.get(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/users_by_department'),
        headers: {'Authorization': 'Bearer $token'},
      );
      if (usersResponse.statusCode == 200) {
        setState(() {
          _departmentUsers =
              Map<String, Map<String, List<Map<String, dynamic>>>>.from(
            jsonDecode(usersResponse.body).map(
              (key, value) => MapEntry(
                key,
                {
                  'staff': List<Map<String, dynamic>>.from(value['staff']),
                  'students':
                      List<Map<String, dynamic>>.from(value['students']),
                },
              ),
            ),
          );
          _errorMessage = null;
        });
      } else if (usersResponse.statusCode == 401) {
        _handleTokenExpiration();
        return;
      } else {
        setState(() {
          _errorMessage =
              'Failed to load users: ${usersResponse.statusCode} - ${usersResponse.body}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching data: $e';
      });
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _addUser(Map<String, dynamic> userData) async {
    setState(() => _isLoadingAction = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }
      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/add_user'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(userData),
      );
      if (response.statusCode == 201) {
        await _fetchData();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('User added successfully')),
        );
      } else if (response.statusCode == 401) {
        _handleTokenExpiration();
      } else {
        final error = jsonDecode(response.body);
        setState(() {
          _errorMessage =
              'Failed to add user: ${error['error'] ?? response.statusCode}';
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(_errorMessage!)),
        );
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error adding user: $e';
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(_errorMessage!)),
      );
    } finally {
      setState(() => _isLoadingAction = false);
    }
  }

  Future<void> _updateUser(
      String admissionNumber, Map<String, dynamic> userData) async {
    setState(() => _isLoadingAction = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }
      final response = await http.put(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/update_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(userData),
      );
      if (response.statusCode == 200) {
        await _fetchData();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('User updated successfully')),
        );
      } else if (response.statusCode == 401) {
        _handleTokenExpiration();
      } else {
        setState(() {
          _errorMessage =
              'Failed to update user: ${response.statusCode} - ${response.body}';
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(_errorMessage!)),
        );
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error updating user: $e';
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(_errorMessage!)),
      );
    } finally {
      setState(() => _isLoadingAction = false);
    }
  }

  Future<void> _deleteUser(String admissionNumber) async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Delete'),
        content: const Text(
            'Are you sure you want to delete this user? This action cannot be undone.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('Delete', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
    if (confirm != true) return;

    setState(() => _isLoadingAction = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }
      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/delete_user/$admissionNumber'),
        headers: {'Authorization': 'Bearer $token'},
      );
      print('Delete Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        await _fetchData();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('User deleted successfully')),
        );
      } else if (response.statusCode == 401) {
        _handleTokenExpiration();
      } else {
        final error = jsonDecode(response.body);
        setState(() {
          _errorMessage =
              'Failed to delete user: ${error['error'] ?? response.statusCode} - ${response.body}';
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(_errorMessage!)),
        );
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error deleting user: $e';
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(_errorMessage!)),
      );
    } finally {
      setState(() => _isLoadingAction = false);
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  void _handleTokenExpiration() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Session expired. Please log in again.')),
    );
    SharedPreferences.getInstance().then((prefs) => prefs.remove('jwt_token'));
    Navigator.pushReplacementNamed(context, '/login');
  }

  void _showUserDialog({Map<String, dynamic>? user}) {
    final admissionNumberController =
        TextEditingController(text: user?['admission_number'] ?? '');
    final usernameController =
        TextEditingController(text: user?['username'] ?? '');
    final emailController = TextEditingController(text: user?['email'] ?? '');
    final passwordController = TextEditingController();
    final phoneController =
        TextEditingController(text: user?['phone_number'] ?? '');
    final batchController = TextEditingController(text: user?['batch'] ?? '');
    String? role = user?['role'] ?? 'student';
    String? departmentcode = user?['departmentcode'];
    String? semester = user?['semester'];

    showDialog(
      context: context,
      builder: (dialogContext) => StatefulBuilder(
        builder: (dialogContext, setDialogState) => Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: SizedBox(
            height: MediaQuery.of(context).size.height * 0.7,
            width: MediaQuery.of(context).size.width * 0.95,
            child: SingleChildScrollView(
              child: Container(
                padding: const EdgeInsets.all(12),
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          user == null ? 'Add New User' : 'Edit User',
                          style: const TextStyle(
                              fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                        IconButton(
                          icon: const Icon(Icons.close, color: Colors.grey),
                          onPressed: () => Navigator.pop(dialogContext),
                        ),
                      ],
                    ),
                    TextField(
                      controller: admissionNumberController,
                      decoration:
                          _inputDecoration('Admission Number', Icons.badge),
                      enabled: user == null,
                    ),
                    const SizedBox(height: 6),
                    TextField(
                      controller: usernameController,
                      decoration:
                          _inputDecoration('Username', Icons.person_outline),
                    ),
                    const SizedBox(height: 6),
                    TextField(
                      controller: emailController,
                      decoration:
                          _inputDecoration('Email', Icons.email_outlined),
                    ),
                    const SizedBox(height: 6),
                    if (user == null)
                      TextField(
                        controller: passwordController,
                        decoration: _inputDecoration('Password', Icons.lock),
                        obscureText: true,
                      ),
                    if (user == null) const SizedBox(height: 6),
                    TextField(
                      controller: phoneController,
                      decoration: _inputDecoration(
                          'Phone Number (Optional)', Icons.phone_outlined),
                      keyboardType: TextInputType.phone,
                    ),
                    const SizedBox(height: 6),
                    DropdownButtonFormField<String>(
                      value: role,
                      items: ['student', 'staff', 'hod']
                          .map((r) => DropdownMenuItem(
                              value: r, child: Text(r.toUpperCase())))
                          .toList(),
                      onChanged: (value) => setDialogState(() {
                        role = value;
                        if (role != 'student') {
                          semester = null;
                          batchController.clear();
                        }
                      }),
                      decoration: _inputDecoration('Role', Icons.person),
                    ),
                    if (role == 'student') ...[
                      const SizedBox(height: 6),
                      TextField(
                        controller: batchController,
                        decoration: _inputDecoration(
                            'Batch (e.g., 2021-2025)', Icons.calendar_today),
                      ),
                      const SizedBox(height: 6),
                      DropdownButtonFormField<String>(
                        value: semester,
                        items: ['S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8']
                            .map((s) =>
                                DropdownMenuItem(value: s, child: Text(s)))
                            .toList(),
                        onChanged: (value) =>
                            setDialogState(() => semester = value),
                        decoration: _inputDecoration('Semester', Icons.numbers),
                      ),
                    ],
                    const SizedBox(height: 6),
                    DropdownButtonFormField<String>(
                      value: departmentcode,
                      items: _departments
                          .map((dept) => DropdownMenuItem<String>(
                                value: dept['departmentcode'].toString(),
                                child: Text(dept['departmentname']),
                              ))
                          .toList(),
                      onChanged: (value) =>
                          setDialogState(() => departmentcode = value),
                      decoration: _inputDecoration('Department', Icons.domain),
                    ),
                    const SizedBox(height: 12),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: () => Navigator.pop(dialogContext),
                          child: const Text('Cancel',
                              style: TextStyle(color: Colors.grey)),
                        ),
                        const SizedBox(width: 6),
                        ElevatedButton(
                          onPressed: () async {
                            if (admissionNumberController.text.isEmpty ||
                                usernameController.text.isEmpty ||
                                emailController.text.isEmpty ||
                                (user == null &&
                                    passwordController.text.isEmpty) ||
                                role == null ||
                                departmentcode == null ||
                                (role == 'student' &&
                                    (batchController.text.isEmpty ||
                                        semester == null))) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                    content: Text(
                                        'Please fill all required fields')),
                              );
                              return;
                            }
                            if (!RegExp(r'^[^@]+@[^@]+\.[^@]+')
                                .hasMatch(emailController.text)) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                    content:
                                        Text('Please enter a valid email')),
                              );
                              return;
                            }
                            if (phoneController.text.isNotEmpty &&
                                phoneController.text.length < 10) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                    content: Text(
                                        'Phone number must be at least 10 digits')),
                              );
                              return;
                            }
                            final userData = {
                              'admission_number':
                                  admissionNumberController.text,
                              'username': usernameController.text,
                              'email': emailController.text,
                              if (user == null)
                                'password': passwordController.text,
                              'role': role,
                              'departmentcode': departmentcode,
                              'phone_number': phoneController.text.isEmpty
                                  ? null
                                  : phoneController.text,
                              if (role == 'student')
                                'batch': batchController.text,
                              if (role == 'student') 'semester': semester,
                            };
                            if (user == null) {
                              await _addUser(userData);
                            } else {
                              await _updateUser(
                                  user['admission_number'], userData);
                            }
                            Navigator.pop(dialogContext);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Theme.of(context).primaryColor,
                            foregroundColor: Colors.white,
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12)),
                          ),
                          child: Text(user == null ? 'Add' : 'Save'),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  InputDecoration _inputDecoration(String label, IconData icon) {
    return InputDecoration(
      labelText: label,
      prefixIcon: Icon(icon),
      border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
      filled: true,
      fillColor: Colors.grey[100],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Scaffold(
          appBar: AppBar(
            title: const Text('Manage Users'),
            backgroundColor: Theme.of(context).primaryColor,
            actions: [
              IconButton(
                icon: const Icon(Icons.add),
                onPressed: _isLoadingAction ? null : () => _showUserDialog(),
                tooltip: 'Add User',
              ),
            ],
          ),
          body: _isLoading
              ? const Center(child: CircularProgressIndicator())
              : _departmentUsers.isEmpty
                  ? const Center(child: Text('No users available'))
                  : Column(
                      children: [
                        if (_errorMessage != null)
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(_errorMessage!,
                                style: const TextStyle(color: Colors.red)),
                          ),
                        Expanded(
                          child: ListView.builder(
                            itemCount: _departmentUsers.keys.length,
                            itemBuilder: (context, index) {
                              final deptCode =
                                  _departmentUsers.keys.elementAt(index);
                              final deptName = _departments.firstWhere((d) =>
                                  d['departmentcode'] ==
                                  deptCode)['departmentname'];
                              return ExpansionTile(
                                title: Text(deptName,
                                    style: const TextStyle(
                                        fontWeight: FontWeight.bold)),
                                children: [
                                  ListTile(
                                    title: const Text('Staff (including HODs)',
                                        style: TextStyle(
                                            fontWeight: FontWeight.bold)),
                                    subtitle:
                                        _departmentUsers[deptCode]!['staff']!
                                                .isEmpty
                                            ? const Text('No staff available')
                                            : Column(
                                                children: _departmentUsers[
                                                        deptCode]!['staff']!
                                                    .map((user) =>
                                                        _buildUserTile(user))
                                                    .toList(),
                                              ),
                                  ),
                                  ListTile(
                                    title: const Text('Students',
                                        style: TextStyle(
                                            fontWeight: FontWeight.bold)),
                                    subtitle: _departmentUsers[deptCode]![
                                                'students']!
                                            .isEmpty
                                        ? const Text('No students available')
                                        : Column(
                                            children: _departmentUsers[
                                                    deptCode]!['students']!
                                                .map((user) =>
                                                    _buildUserTile(user))
                                                .toList(),
                                          ),
                                  ),
                                ],
                              );
                            },
                          ),
                        ),
                      ],
                    ),
        ),
        if (_isLoadingAction) const Center(child: CircularProgressIndicator()),
      ],
    );
  }

  Widget _buildUserTile(Map<String, dynamic> user) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4.0),
      elevation: 2,
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: Colors.blueAccent,
          child: Text(
            user['username']?[0].toUpperCase() ?? 'U',
            style: const TextStyle(color: Colors.white),
          ),
        ),
        title: Text(user['username'] ?? 'Unknown',
            style: const TextStyle(fontWeight: FontWeight.bold)),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Email: ${user['email'] ?? 'N/A'}'),
            Text('Role: ${user['role'].toUpperCase()}'),
            if (user['batch'] != null) Text('Batch: ${user['batch']}'),
          ],
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: const Icon(Icons.edit, color: Colors.blue),
              onPressed:
                  _isLoadingAction ? null : () => _showUserDialog(user: user),
            ),
            IconButton(
              icon: const Icon(Icons.delete, color: Colors.red),
              onPressed: _isLoadingAction
                  ? null
                  : () => _deleteUser(user['admission_number']),
            ),
          ],
        ),
      ),
    );
  }
}

============================

frontend/lib/hod_screens/academics_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:file_picker/file_picker.dart';
import 'package:http/http.dart' show MultipartRequest;
import '../utils/network_config.dart';

class AcademicsPage extends StatefulWidget {
  const AcademicsPage({super.key});

  @override
  _AcademicsPageState createState() => _AcademicsPageState();
}

class _AcademicsPageState extends State<AcademicsPage> {
  final _subjectFormKey = GlobalKey<FormState>();
  final _timetableFormKey = GlobalKey<FormState>();
  final _notesFormKey = GlobalKey<FormState>();

  String? _semester;
  String? _subjectCode;
  String? _subjectName;
  int? _credits;
  String? _instructorId; // New field for selected instructor
  List<Map<String, dynamic>> _subjects = [];
  List<Map<String, dynamic>> _staff =
      []; // List to hold staff members including HOD

  String? _timetableSemester;
  PlatformFile? _timetableFile;
  List<Map<String, dynamic>> _timetableEntries = [];

  String? _notesSemester;
  String? _notesSubjectName;
  String? _notesModuleNumber;
  PlatformFile? _notesFile;
  List<Map<String, dynamic>> _notes = [];

  final List<String> _semesters = [
    'S1',
    'S2',
    'S3',
    'S4',
    'S5',
    'S6',
    'S7',
    'S8'
  ];
  String? _token;

  @override
  void initState() {
    super.initState();
    _loadAuthData();
  }

  Future<void> _loadAuthData() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('jwt_token');
    if (token == null) {
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }
    setState(() {
      _token = token;
    });
    _fetchSubjects();
    _fetchTimetable();
    _fetchNotes();
    _fetchStaff(); // Fetch staff members including HOD
  }

  Future<void> _fetchStaff() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/staff/list'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Staff Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        setState(() {
          _staff = List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load staff: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching staff: $e')),
      );
    }
  }

  Future<void> _fetchSubjects() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/subjects'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Subjects Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        setState(() {
          _subjects =
              List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load subjects: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching subjects: $e')),
      );
    }
  }

  Future<void> _fetchTimetable() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/timetable'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Timetable Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        setState(() {
          _timetableEntries =
              List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load timetable: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching timetable: $e')),
      );
    }
  }

  Future<void> _fetchNotes() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/notes'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Notes Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        setState(() {
          _notes = List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load notes: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching notes: $e')),
      );
    }
  }

  Future<void> _addSubject() async {
    if (_subjectFormKey.currentState!.validate()) {
      _subjectFormKey.currentState!.save();
      try {
        final response = await http.post(
          Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/subjects'),
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $_token',
          },
          body: json.encode({
            'semester': _semester,
            'subject_code': _subjectCode,
            'subject_name': _subjectName,
            'credits': _credits,
            'instructor_id': _instructorId, // Include instructor_id
          }),
        );
        print(
            'Add Subject Response: ${response.statusCode} - ${response.body}');
        if (response.statusCode == 201) {
          _fetchSubjects();
          _subjectFormKey.currentState!.reset();
          setState(() {
            _instructorId = null; // Reset instructor selection
          });
          Navigator.of(context).pop();
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Subject added successfully!')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to add subject: ${response.body}')),
          );
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error adding subject: $e')),
        );
      }
    }
  }

  Future<void> _deleteSubject(String subjectCode) async {
    try {
      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/hod/subjects/$subjectCode'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print(
          'Delete Subject Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        _fetchSubjects();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Subject deleted successfully!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to delete subject: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting subject: $e')),
      );
    }
  }

  Future<void> _addTimetableFile() async {
    if (_timetableFormKey.currentState!.validate() && _timetableFile != null) {
      _timetableFormKey.currentState!.save();
      try {
        var request = MultipartRequest(
          'POST',
          Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/timetable/upload'),
        );
        request.headers['Authorization'] = 'Bearer $_token';
        request.fields['semester'] = _timetableSemester!;
        request.files.add(
          await http.MultipartFile.fromPath('file', _timetableFile!.path!),
        );
        final response = await request.send();
        final responseBody = await response.stream.bytesToString();
        print(
            'Upload Timetable Response: ${response.statusCode} - $responseBody');
        if (response.statusCode == 201) {
          _fetchTimetable();
          Navigator.of(context).pop();
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Timetable uploaded successfully!')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text('Failed to upload timetable: $responseBody')),
          );
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error uploading timetable: $e')),
        );
      }
    } else if (_timetableFile == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select an Excel file')),
      );
    }
  }

  Future<void> _deleteTimetable(int timetableId) async {
    try {
      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/hod/timetable/$timetableId'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print(
          'Delete Timetable Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        _fetchTimetable();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Timetable deleted successfully!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to delete timetable: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting timetable: $e')),
      );
    }
  }

  Future<void> _addNotesFile() async {
    if (_notesFormKey.currentState!.validate() && _notesFile != null) {
      _notesFormKey.currentState!.save();
      try {
        var request = MultipartRequest(
          'POST',
          Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/notes/upload'),
        );
        request.headers['Authorization'] = 'Bearer $_token';
        request.fields['semester'] = _notesSemester!;
        request.fields['subject_name'] = _notesSubjectName!;
        request.fields['module_number'] = _notesModuleNumber!;
        request.files.add(
          await http.MultipartFile.fromPath('file', _notesFile!.path!),
        );
        final response = await request.send();
        final responseBody = await response.stream.bytesToString();
        print('Upload Notes Response: ${response.statusCode} - $responseBody');
        if (response.statusCode == 201) {
          _fetchNotes();
          Navigator.of(context).pop();
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Notes uploaded successfully!')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to upload notes: $responseBody')),
          );
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error uploading notes: $e')),
        );
      }
    } else if (_notesFile == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a PDF file')),
      );
    }
  }

  Future<void> _deleteNote(int noteId) async {
    try {
      final response = await http.delete(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/notes/$noteId'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Delete Note Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        _fetchNotes();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Note deleted successfully!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to delete note: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting note: $e')),
      );
    }
  }

  void _showAddSubjectDialog() {
    _semester = null; // Reset fields
    _subjectCode = null;
    _subjectName = null;
    _credits = null;
    _instructorId = null;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: const Text('Add New Subject'),
          content: Form(
            key: _subjectFormKey,
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  DropdownButtonFormField<String>(
                    decoration: InputDecoration(
                      labelText: 'Semester',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    value: _semester,
                    items: _semesters
                        .map((sem) =>
                            DropdownMenuItem(value: sem, child: Text(sem)))
                        .toList(),
                    onChanged: (value) =>
                        setDialogState(() => _semester = value),
                    validator: (value) =>
                        value == null ? 'Please select a semester' : null,
                  ),
                  const SizedBox(height: 10),
                  TextFormField(
                    decoration: InputDecoration(
                      labelText: 'Subject Code',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    validator: (value) =>
                        value!.isEmpty ? 'Please enter a subject code' : null,
                    onSaved: (value) => _subjectCode = value,
                  ),
                  const SizedBox(height: 10),
                  TextFormField(
                    decoration: InputDecoration(
                      labelText: 'Subject Name',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    validator: (value) =>
                        value!.isEmpty ? 'Please enter a subject name' : null,
                    onSaved: (value) => _subjectName = value,
                  ),
                  const SizedBox(height: 10),
                  TextFormField(
                    decoration: InputDecoration(
                      labelText: 'Credits',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    keyboardType: TextInputType.number,
                    validator: (value) =>
                        value!.isEmpty || int.tryParse(value) == null
                            ? 'Please enter valid credits'
                            : null,
                    onSaved: (value) => _credits = int.parse(value!),
                  ),
                  const SizedBox(height: 10),
                  DropdownButtonFormField<String>(
                    decoration: InputDecoration(
                      labelText: 'Instructor',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    value: _instructorId,
                    items: _staff.map((staff) {
                      return DropdownMenuItem<String>(
                        value: staff['admission_number'] as String,
                        child: Text(staff['username'] as String),
                      );
                    }).toList(),
                    onChanged: (value) =>
                        setDialogState(() => _instructorId = value),
                    validator: (value) =>
                        value == null ? 'Please select an instructor' : null,
                  ),
                ],
              ),
            ),
          ),
          actions: [
            TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Cancel')),
            ElevatedButton(
              onPressed: _addSubject,
              style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10))),
              child: const Text('Add'),
            ),
          ],
        ),
      ),
    );
  }

  void _showAddTimetableDialog() {
    _timetableSemester = null;
    _timetableFile = null;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: const Text('Upload Timetable'),
          content: Form(
            key: _timetableFormKey,
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  DropdownButtonFormField<String>(
                    decoration: InputDecoration(
                      labelText: 'Semester',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    value: _timetableSemester,
                    items: _semesters
                        .map((sem) =>
                            DropdownMenuItem(value: sem, child: Text(sem)))
                        .toList(),
                    onChanged: (value) =>
                        setDialogState(() => _timetableSemester = value),
                    validator: (value) =>
                        value == null ? 'Please select a semester' : null,
                  ),
                  const SizedBox(height: 10),
                  ElevatedButton(
                    onPressed: () async {
                      FilePickerResult? result = await FilePicker.platform
                          .pickFiles(
                              type: FileType.custom,
                              allowedExtensions: ['xlsx']);
                      if (result != null) {
                        setDialogState(
                            () => _timetableFile = result.files.first);
                      }
                    },
                    style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.grey[300]),
                    child: Text(_timetableFile == null
                        ? 'Select Excel File'
                        : 'File: ${_timetableFile!.name}'),
                  ),
                ],
              ),
            ),
          ),
          actions: [
            TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Cancel')),
            ElevatedButton(
              onPressed: _addTimetableFile,
              style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10))),
              child: const Text('Upload'),
            ),
          ],
        ),
      ),
    );
  }

  void _showAddNotesDialog() {
    _notesSemester = null;
    _notesSubjectName = null;
    _notesModuleNumber = null;
    _notesFile = null;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: const Text('Upload Notes'),
          content: Form(
            key: _notesFormKey,
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  DropdownButtonFormField<String>(
                    decoration: InputDecoration(
                      labelText: 'Semester',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    value: _notesSemester,
                    items: _semesters
                        .map((sem) =>
                            DropdownMenuItem(value: sem, child: Text(sem)))
                        .toList(),
                    onChanged: (value) => setDialogState(() {
                      _notesSemester = value;
                      _notesSubjectName = null;
                    }),
                    validator: (value) =>
                        value == null ? 'Please select a semester' : null,
                  ),
                  const SizedBox(height: 10),
                  DropdownButtonFormField<String>(
                    decoration: InputDecoration(
                      labelText: 'Subject',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    value: _notesSubjectName,
                    items: _notesSemester == null
                        ? []
                        : _subjects
                            .where((subject) =>
                                subject['semester'] == _notesSemester)
                            .map<DropdownMenuItem<String>>((subject) =>
                                DropdownMenuItem<String>(
                                  value: subject['subject_name'] as String,
                                  child:
                                      Text(subject['subject_name'] as String),
                                ))
                            .toList(),
                    onChanged: (value) =>
                        setDialogState(() => _notesSubjectName = value),
                    validator: (value) =>
                        value == null ? 'Please select a subject' : null,
                  ),
                  const SizedBox(height: 10),
                  TextFormField(
                    decoration: InputDecoration(
                      labelText: 'Module Number',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    keyboardType: TextInputType.number,
                    validator: (value) => value!.isEmpty ||
                            int.tryParse(value) == null ||
                            int.parse(value) <= 0
                        ? 'Please enter a valid module number'
                        : null,
                    onSaved: (value) => _notesModuleNumber = value,
                  ),
                  const SizedBox(height: 10),
                  ElevatedButton(
                    onPressed: () async {
                      FilePickerResult? result = await FilePicker.platform
                          .pickFiles(
                              type: FileType.custom,
                              allowedExtensions: ['pdf']);
                      if (result != null) {
                        setDialogState(() => _notesFile = result.files.first);
                      }
                    },
                    style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.grey[300]),
                    child: Text(_notesFile == null
                        ? 'Select PDF File'
                        : 'File: ${_notesFile!.name}'),
                  ),
                ],
              ),
            ),
          ),
          actions: [
            TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Cancel')),
            ElevatedButton(
              onPressed: _addNotesFile,
              style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10))),
              child: const Text('Upload'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSemesterSubjects(String semester) {
    final filteredSubjects =
        _subjects.where((subject) => subject['semester'] == semester).toList();
    return filteredSubjects.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No subjects added yet',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredSubjects.length,
            itemBuilder: (context, index) {
              final subject = filteredSubjects[index];
              final instructor = _staff.firstWhere(
                (staff) =>
                    staff['admission_number'] == subject['instructor_id'],
                orElse: () => {'username': 'Not Assigned'},
              );
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    '${subject['subject_code']} - ${subject['subject_name']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(
                      'Credits: ${subject['credits']} | Instructor: ${instructor['username']}'),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: const Text('Delete Subject'),
                        content: Text(
                            'Are you sure you want to delete ${subject['subject_name']} (${subject['subject_code']})?'),
                        actions: [
                          TextButton(
                              onPressed: () => Navigator.of(context).pop(),
                              child: const Text('Cancel')),
                          ElevatedButton(
                            onPressed: () {
                              _deleteSubject(subject['subject_code']);
                              Navigator.of(context).pop();
                            },
                            style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.red),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          );
  }

  Widget _buildSemesterTimetable(String semester) {
    final filteredEntries = _timetableEntries
        .where((entry) => entry['semester'] == semester)
        .toList();
    return filteredEntries.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No timetable uploaded yet',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredEntries.length,
            itemBuilder: (context, index) {
              final entry = filteredEntries[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    'Timetable: ${entry['filename']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(
                      'Uploaded: ${entry['uploaded_at'].substring(0, 10)}'),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: const Text('Delete Timetable'),
                        content: Text(
                            'Are you sure you want to delete ${entry['filename']}?'),
                        actions: [
                          TextButton(
                              onPressed: () => Navigator.of(context).pop(),
                              child: const Text('Cancel')),
                          ElevatedButton(
                            onPressed: () {
                              _deleteTimetable(entry['id']);
                              Navigator.of(context).pop();
                            },
                            style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.red),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          );
  }

  Widget _buildSemesterNotes(String semester) {
    final filteredNotes =
        _notes.where((note) => note['semester'] == semester).toList();
    return filteredNotes.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No notes uploaded yet',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredNotes.length,
            itemBuilder: (context, index) {
              final note = filteredNotes[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    'Notes: ${note['filename']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle:
                      Text('Uploaded: ${note['uploaded_at'].substring(0, 10)}'),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: const Text('Delete Note'),
                        content: Text(
                            'Are you sure you want to delete ${note['filename']}?'),
                        actions: [
                          TextButton(
                              onPressed: () => Navigator.of(context).pop(),
                              child: const Text('Cancel')),
                          ElevatedButton(
                            onPressed: () {
                              _deleteNote(note['id']);
                              Navigator.of(context).pop();
                            },
                            style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.red),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Academics',
              style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: Colors.blueAccent),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: ListView(
                children: [
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Syllabus',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading: const Icon(Icons.book, color: Colors.blueAccent),
                      children: [
                        ListTile(
                          title: const Text('Add Subjects'),
                          leading: const Icon(Icons.add_circle_outline,
                              color: Colors.green),
                          onTap: _showAddSubjectDialog,
                        ),
                        ExpansionTile(
                          title: const Text('1st Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 1 (S1)'),
                                children: [_buildSemesterSubjects('S1')]),
                            ExpansionTile(
                                title: const Text('Semester 2 (S2)'),
                                children: [_buildSemesterSubjects('S2')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('2nd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 3 (S3)'),
                                children: [_buildSemesterSubjects('S3')]),
                            ExpansionTile(
                                title: const Text('Semester 4 (S4)'),
                                children: [_buildSemesterSubjects('S4')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('3rd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 5 (S5)'),
                                children: [_buildSemesterSubjects('S5')]),
                            ExpansionTile(
                                title: const Text('Semester 6 (S6)'),
                                children: [_buildSemesterSubjects('S6')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('4th Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 7 (S7)'),
                                children: [_buildSemesterSubjects('S7')]),
                            ExpansionTile(
                                title: const Text('Semester 8 (S8)'),
                                children: [_buildSemesterSubjects('S8')]),
                          ],
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Timetable',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading:
                          const Icon(Icons.schedule, color: Colors.blueAccent),
                      children: [
                        ListTile(
                          title: const Text('Upload Timetable'),
                          leading: const Icon(Icons.upload_file,
                              color: Colors.green),
                          onTap: _showAddTimetableDialog,
                        ),
                        ExpansionTile(
                          title: const Text('1st Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 1 (S1)'),
                                children: [_buildSemesterTimetable('S1')]),
                            ExpansionTile(
                                title: const Text('Semester 2 (S2)'),
                                children: [_buildSemesterTimetable('S2')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('2nd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 3 (S3)'),
                                children: [_buildSemesterTimetable('S3')]),
                            ExpansionTile(
                                title: const Text('Semester 4 (S4)'),
                                children: [_buildSemesterTimetable('S4')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('3rd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 5 (S5)'),
                                children: [_buildSemesterTimetable('S5')]),
                            ExpansionTile(
                                title: const Text('Semester 6 (S6)'),
                                children: [_buildSemesterTimetable('S6')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('4th Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 7 (S7)'),
                                children: [_buildSemesterTimetable('S7')]),
                            ExpansionTile(
                                title: const Text('Semester 8 (S8)'),
                                children: [_buildSemesterTimetable('S8')]),
                          ],
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Notes',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading: const Icon(Icons.note, color: Colors.blueAccent),
                      children: [
                        ListTile(
                          title: const Text('Upload Notes'),
                          leading: const Icon(Icons.upload_file,
                              color: Colors.green),
                          onTap: _showAddNotesDialog,
                        ),
                        ExpansionTile(
                          title: const Text('1st Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 1 (S1)'),
                                children: [_buildSemesterNotes('S1')]),
                            ExpansionTile(
                                title: const Text('Semester 2 (S2)'),
                                children: [_buildSemesterNotes('S2')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('2nd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 3 (S3)'),
                                children: [_buildSemesterNotes('S3')]),
                            ExpansionTile(
                                title: const Text('Semester 4 (S4)'),
                                children: [_buildSemesterNotes('S4')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('3rd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 5 (S5)'),
                                children: [_buildSemesterNotes('S5')]),
                            ExpansionTile(
                                title: const Text('Semester 6 (S6)'),
                                children: [_buildSemesterNotes('S6')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('4th Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 7 (S7)'),
                                children: [_buildSemesterNotes('S7')]),
                            ExpansionTile(
                                title: const Text('Semester 8 (S8)'),
                                children: [_buildSemesterNotes('S8')]),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

============================

frontend/lib/hod_screens/announcements_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../../utils/network_config.dart';

class HodAnnouncementsPage extends StatefulWidget {
  const HodAnnouncementsPage({super.key});

  @override
  _HodAnnouncementsPageState createState() => _HodAnnouncementsPageState();
}

class _HodAnnouncementsPageState extends State<HodAnnouncementsPage> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _messageController = TextEditingController();
  String _category = 'general';
  List generalAnnouncements = [];
  List deptAnnouncements = [];
  bool isLoading = true;
  String? jwtToken;
  bool sendEmail = false;
  bool sendToStudents = false;
  bool sendToStaff = false;

  @override
  void initState() {
    super.initState();
    _loadTokenAndFetch();
  }

  Future<void> _loadTokenAndFetch() async {
    setState(() => isLoading = true);
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      setState(() {
        jwtToken = prefs.getString('jwt_token');
      });
      if (jwtToken != null) {
        await _fetchGeneralAnnouncements();
        await _fetchDeptAnnouncements();
      }
    } catch (e) {
      debugPrint('Error loading token: $e');
    } finally {
      setState(() => isLoading = false);
    }
  }

  Future<void> _fetchGeneralAnnouncements() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/announcements'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          generalAnnouncements = json.decode(response.body);
        });
      }
    } catch (e) {
      debugPrint('Error fetching general announcements: $e');
    }
  }

  Future<void> _fetchDeptAnnouncements() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/department_announcements'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          deptAnnouncements = json.decode(response.body);
        });
      }
    } catch (e) {
      debugPrint('Error fetching department announcements: $e');
    }
  }

  Future<void> _createDepartmentAnnouncement() async {
    try {
      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/department_announcements'),
        headers: {
          'Authorization': 'Bearer $jwtToken',
          'Content-Type': 'application/json',
        },
        body: json.encode({
          'title': _titleController.text,
          'message': _messageController.text,
          'category': _category,
          'send_email': sendEmail,
          'email_recipients': {
            'students': sendToStudents,
            'staff': sendToStaff,
          },
        }),
      );
      if (response.statusCode == 201) {
        _titleController.clear();
        _messageController.clear();
        setState(() {
          sendEmail = false;
          sendToStudents = false;
          sendToStaff = false;
        });
        await _fetchDeptAnnouncements();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Department announcement created')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to create: ${response.body}')),
        );
      }
    } catch (e) {
      debugPrint('Error creating announcement: $e');
    }
  }

  Future<void> _updateDepartmentAnnouncement(int announcementId) async {
    try {
      final response = await http.put(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/department_announcements/$announcementId'),
        headers: {
          'Authorization': 'Bearer $jwtToken',
          'Content-Type': 'application/json',
        },
        body: json.encode({
          'title': _titleController.text,
          'message': _messageController.text,
          'category': _category,
        }),
      );
      if (response.statusCode == 200) {
        _titleController.clear();
        _messageController.clear();
        await _fetchDeptAnnouncements();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Department announcement updated')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to update: ${response.body}')),
        );
      }
    } catch (e) {
      debugPrint('Error updating announcement: $e');
    }
  }

  Future<void> _deleteDepartmentAnnouncement(int announcementId) async {
    try {
      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/department_announcements/$announcementId'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        await _fetchDeptAnnouncements();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Department announcement deleted')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to delete: ${response.body}')),
        );
      }
    } catch (e) {
      debugPrint('Error deleting announcement: $e');
    }
  }

  void _showAnnouncementDialog({Map<String, dynamic>? announcement}) {
    if (announcement != null) {
      _titleController.text = announcement['title'];
      _messageController.text = announcement['message'];
      _category = announcement['category'];
    } else {
      _titleController.clear();
      _messageController.clear();
      _category = 'general';
    }
    setState(() {
      sendEmail = false;
      sendToStudents = false;
      sendToStaff = false;
    });

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: Text(
              announcement == null ? 'New Announcement' : 'Edit Announcement'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: _titleController,
                  decoration: const InputDecoration(labelText: 'Title'),
                ),
                TextField(
                  controller: _messageController,
                  decoration: const InputDecoration(labelText: 'Message'),
                  maxLines: 3,
                ),
                DropdownButton<String>(
                  value: _category,
                  onChanged: (value) =>
                      setDialogState(() => _category = value!),
                  items: [
                    'bus',
                    'placement',
                    'class_suspension',
                    'event',
                    'general'
                  ]
                      .map((e) => DropdownMenuItem(value: e, child: Text(e)))
                      .toList(),
                ),
                if (announcement == null) ...[
                  SwitchListTile(
                    title: const Text('Send Email'),
                    value: sendEmail,
                    onChanged: (value) =>
                        setDialogState(() => sendEmail = value),
                  ),
                  if (sendEmail) ...[
                    SwitchListTile(
                      title: const Text('To Students'),
                      value: sendToStudents,
                      onChanged: (value) =>
                          setDialogState(() => sendToStudents = value),
                    ),
                    SwitchListTile(
                      title: const Text('To Staff'),
                      value: sendToStaff,
                      onChanged: (value) =>
                          setDialogState(() => sendToStaff = value),
                    ),
                  ],
                ],
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                if (announcement == null) {
                  _createDepartmentAnnouncement();
                } else {
                  _updateDepartmentAnnouncement(announcement['id']);
                }
                Navigator.pop(context);
              },
              child: const Text('Save'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    if (jwtToken == null) {
      return const Scaffold(body: Center(child: Text('Please log in')));
    }

    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ElevatedButton(
              onPressed: () => _showAnnouncementDialog(),
              child: const Text('Create Announcement'),
            ),
            const SizedBox(height: 16),
            const Text('General Announcements',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            Expanded(
              child: generalAnnouncements.isEmpty && deptAnnouncements.isEmpty
                  ? const Center(child: Text('No announcements available'))
                  : ListView(
                      children: [
                        ...generalAnnouncements
                            .map((a) => _buildAnnouncementTile(a, false))
                            .toList(),
                        if (deptAnnouncements.isNotEmpty) ...[
                          const SizedBox(height: 16),
                          const Text('Department Announcements',
                              style: TextStyle(
                                  fontSize: 18, fontWeight: FontWeight.bold)),
                          ...deptAnnouncements
                              .map((a) => _buildAnnouncementTile(a, true))
                              .toList(),
                        ],
                      ],
                    ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnnouncementTile(
      Map<String, dynamic> announcement, bool isEditable) {
    return Card(
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: _getColor(announcement['category']),
          child: Icon(_getIcon(announcement['category']), color: Colors.white),
        ),
        title: Text(announcement['title']),
        subtitle: Text(announcement['message']),
        trailing: isEditable
            ? Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  IconButton(
                    icon: const Icon(Icons.edit),
                    onPressed: () =>
                        _showAnnouncementDialog(announcement: announcement),
                  ),
                  IconButton(
                    icon: const Icon(Icons.delete),
                    onPressed: () =>
                        _deleteDepartmentAnnouncement(announcement['id']),
                  ),
                ],
              )
            : null,
        onTap: () {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: Text(announcement['title']),
              content: Text(
                  '${announcement['message']}\n\nCategory: ${announcement['category']}\nCreated: ${announcement['created_at']}'),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Close'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Color _getColor(String category) {
    switch (category) {
      case 'bus':
        return Colors.orange;
      case 'placement':
        return Colors.purple;
      case 'class_suspension':
        return Colors.red;
      case 'event':
        return Colors.green;
      case 'general':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  IconData _getIcon(String category) {
    switch (category) {
      case 'bus':
        return Icons.directions_bus;
      case 'placement':
        return Icons.work;
      case 'class_suspension':
        return Icons.warning;
      case 'event':
        return Icons.event;
      case 'general':
        return Icons.info;
      default:
        return Icons.help;
    }
  }
}

============================

frontend/lib/hod_screens/hod_dashboard.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'hod_home.dart';
import 'academics_page.dart';
import 'announcements_page.dart';
import '../shared/department_users_page.dart';
import 'settings_page.dart';

class HodDashboard extends StatefulWidget {
  const HodDashboard({super.key});

  @override
  _HodDashboardState createState() => _HodDashboardState();
}

class _HodDashboardState extends State<HodDashboard> {
  int _selectedIndex = 0; // Default to "Home" tab
  String? username; // Store username for display

  // Define pages for each tab (non-const to allow dynamic username)
  late List<Widget> _pages;

  // Define titles for each tab
  static const List<String> _titles = <String>[
    'Home', // Tab 0
    'Academics', // Tab 1
    'Announcements', // Tab 2
    'Students', // Tab 3
    'Settings', // Tab 4
  ];

  @override
  void initState() {
    super.initState();
    _loadUsername(); // Load username on initialization
  }

  Future<void> _loadUsername() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      username = prefs.getString('username') ?? 'HOD';
    });
  }

  Future<void> _logout(BuildContext context) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('jwt_token');
    await prefs.remove('user_role');
    await prefs.remove('departmentcode');
    Navigator.pushReplacementNamed(context, '/login');
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    // Initialize pages with username dynamically
    _pages = [
      HodHome(username: username ?? 'HOD'), // Pass username to HodHome
      const AcademicsPage(),
      const HodAnnouncementsPage(),
      const DepartmentUsersPage(isStaffView: false),
      const HodSettingsPage(),
    ];

    return Scaffold(
      appBar: AppBar(
        title: Text(_titles[_selectedIndex]), // Dynamic title based on tab
        backgroundColor: Colors.blueAccent,
        elevation: 4,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => _logout(context),
            tooltip: 'Logout',
          ),
        ],
      ),
      body: _pages[_selectedIndex], // Display the selected page
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.book),
            label: 'Academics',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.announcement),
            label: 'Announcements',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.school),
            label: 'Students',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.blueAccent,
        unselectedItemColor: Colors.grey,
        backgroundColor: Colors.white,
        type: BottomNavigationBarType.fixed,
        onTap: _onItemTapped,
      ),
    );
  }
}

============================

frontend/lib/hod_screens/hod_home.dart:

contents:
import 'package:flutter/material.dart';
import '../shared/department_staff_page.dart';
import '../shared/department_users_page.dart';
import 'request_page.dart'; // Import the new RequestsPage

class HodHome extends StatelessWidget {
  final String username; // Required username parameter

  const HodHome({super.key, required this.username});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Text(
            "Welcome, $username!",
            style: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.blueAccent),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 20),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const DepartmentStaffPage(),
                ),
              );
            },
            icon: const Icon(Icons.person),
            label: const Text("Manage Department Staff"),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 12),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) =>
                      const DepartmentUsersPage(isStaffView: false),
                ),
              );
            },
            icon: const Icon(Icons.school),
            label: const Text("Manage Department Students"),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 12),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const RequestsPage(),
                ),
              );
            },
            icon: const Icon(Icons.check_circle),
            label: const Text("Requests"),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 12),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
        ],
      ),
    );
  }
}

============================

frontend/lib/hod_screens/request_page.dart:

contents:
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'package:permission_handler/permission_handler.dart';
import '../utils/network_config.dart';

class RequestsPage extends StatefulWidget {
  const RequestsPage({super.key});

  @override
  RequestsPageState createState() => RequestsPageState();
}

class RequestsPageState extends State<RequestsPage> {
  List<Map<String, dynamic>> _pendingRequests = [];
  List<Map<String, dynamic>> _approvedRequests = [];
  bool _isLoading = true;
  String? _token;

  @override
  void initState() {
    super.initState();
    _loadTokenAndFetchRequests();
  }

  Future<void> _loadTokenAndFetchRequests() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _token = prefs.getString('jwt_token');
    });
    print('Token loaded: $_token');
    if (_token != null) {
      await _fetchRequests();
    } else {
      print('No token found, redirecting to login');
      Navigator.pushReplacementNamed(context, '/login');
    }
  }

  Future<void> _fetchRequests() async {
    setState(() {
      _isLoading = true;
    });
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/requests'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print(
          'Fetch Requests Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _pendingRequests = List<Map<String, dynamic>>.from(data['pending']);
          _approvedRequests = List<Map<String, dynamic>>.from(data['approved']);
          _isLoading = false;
        });
        if (_pendingRequests.isEmpty && _approvedRequests.isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('No requests found')),
          );
        }
      } else {
        setState(() => _isLoading = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load requests: ${response.body}')),
        );
      }
    } catch (e) {
      setState(() => _isLoading = false);
      print('Error fetching requests: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching requests: $e')),
      );
    }
  }

  Future<void> _updateRequestStatus(int applicationId, String status) async {
    print('Starting update for request $applicationId to status: $status');
    try {
      final updateResponse = await http.put(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/hod/requests/$applicationId/update'),
        headers: {
          'Authorization': 'Bearer $_token',
          'Content-Type': 'application/json',
        },
        body: json.encode({'status': status}),
      );
      print(
          'Update Request Response: ${updateResponse.statusCode} - ${updateResponse.body}');

      if (updateResponse.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Request $status successfully!')),
        );
        await _fetchRequests();
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content:
                  Text('Failed to update request: ${updateResponse.body}')),
        );
      }
    } catch (e) {
      print('Error updating request: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating request: $e')),
      );
    }
  }

  Future<void> _requestStoragePermission() async {
    if (await Permission.storage.isGranted) {
      print('Storage permission already granted');
    } else if (await Permission.storage.request().isGranted) {
      print('Storage permission granted');
    } else {
      print('Storage permission denied');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Storage permission denied')),
      );
    }
  }

  Future<void> _downloadAndOpenRequest(String filename) async {
    await _requestStoragePermission();
    print('Attempting to download file: $filename');
    try {
      final response = await http.get(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/hod/download/requests/$filename'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Download Response: ${response.statusCode}');
      if (response.statusCode == 200) {
        final directory = await getApplicationDocumentsDirectory();
        final filePath = '${directory.path}/$filename';
        final file = File(filePath);
        await file.writeAsBytes(response.bodyBytes);
        print('File downloaded to: $filePath');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Request downloaded to $filePath')),
        );
        final result = await OpenFile.open(filePath);
        print('Open file result: ${result.message}');
        if (result.type != ResultType.done) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to open file: ${result.message}')),
          );
        }
      } else {
        print('Download failed: ${response.body}');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to download request: ${response.body}')),
        );
      }
    } catch (e) {
      print('Error downloading request: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error downloading request: $e')),
      );
    }
  }

  Widget _buildRequestList(
      List<Map<String, dynamic>> requests, bool isPending) {
    if (requests.isEmpty) {
      return const Padding(
        padding: EdgeInsets.all(8.0),
        child: Text('No requests in this category',
            style: TextStyle(fontSize: 16)),
      );
    }
    return ListView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemCount: requests.length,
      itemBuilder: (context, index) {
        final request = requests[index];
        return Card(
          elevation: 4,
          margin: const EdgeInsets.symmetric(vertical: 8.0),
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: ListTile(
            leading: const Icon(Icons.request_page, color: Colors.grey),
            title: Text(
              request['category'].replaceAll('_', ' ').toUpperCase(),
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Student: ${request['admission_number']}'),
                Text('Status: ${request['status']}'),
                Text('Submitted: ${request['created_at'].substring(0, 10)}'),
              ],
            ),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton(
                  icon: const Icon(Icons.download, color: Colors.blue),
                  onPressed: () => _downloadAndOpenRequest(request['filename']),
                ),
                if (isPending) ...[
                  IconButton(
                    icon: const Icon(Icons.check, color: Colors.green),
                    onPressed: () => _updateRequestStatus(
                        request['application_id'] ?? 0, 'approved'),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close, color: Colors.red),
                    onPressed: () => _updateRequestStatus(
                        request['application_id'] ?? 0, 'rejected'),
                  ),
                ],
              ],
            ),
            onTap: () {
              // Optionally show more details if needed
            },
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Requests'),
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _fetchRequests,
            tooltip: 'Refresh Requests',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Pending Requests',
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  _buildRequestList(_pendingRequests, true),
                  const SizedBox(height: 20),
                  const Text(
                    'Approved/Rejected Requests',
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  _buildRequestList(_approvedRequests, false),
                ],
              ),
            ),
    );
  }
}

============================

frontend/lib/hod_screens/settings_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../utils/network_config.dart';

class HodSettingsPage extends StatefulWidget {
  const HodSettingsPage({super.key});

  @override
  State<HodSettingsPage> createState() => _HodSettingsPageState();
}

class _HodSettingsPageState extends State<HodSettingsPage> {
  String admissionNumber = "N/A";
  String role = "N/A";
  String email = "N/A";
  String phone = "N/A";
  String username = "User";
  String department = "Unknown";
  String profileImagePath = "";

  final TextEditingController usernameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController otpController = TextEditingController();
  final TextEditingController newPasswordController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('jwt_token');

    if (token == null) {
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }

    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/profile'),
        headers: {'Authorization': 'Bearer $token'},
      );
      print('HOD Profile Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final profile = json.decode(response.body);
        setState(() {
          admissionNumber = profile['admission_number'] ?? "N/A";
          role = profile['role'] ?? "N/A";
          email = profile['email'] ?? "N/A";
          phone = profile['phone_number'] ?? "N/A";
          username = profile['username'] ?? "User";
          department = profile['departmentcode'] ?? "Unknown";
          profileImagePath = prefs.getString('profile_image') ?? "";
        });

        usernameController.text = username;
        emailController.text = email;
        phoneController.text = phone;
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load profile: ${response.body}')),
        );
        Navigator.pushReplacementNamed(context, '/login');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading profile: $e')),
      );
    }
  }

  Future<void> _updateUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('jwt_token');

    if (token == null) {
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }

    try {
      final response = await http.put(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/update_profile'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'admission_number': admissionNumber,
          'username': usernameController.text,
          'phone_number': phoneController.text,
        }),
      );

      if (response.statusCode == 200) {
        setState(() {
          username = usernameController.text;
          phone = phoneController.text;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Profile updated successfully')),
        );
        Navigator.pop(context);
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to update profile: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating profile: $e')),
      );
    }
  }

  Future<void> _requestOtp() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        Navigator.pushReplacementNamed(context, '/login');
        return;
      }

      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/request_otp'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({'admission_number': admissionNumber}),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('OTP sent to your email')),
        );
        _showResetPasswordDialog();
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to send OTP: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _resetPassword() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        Navigator.pushReplacementNamed(context, '/login');
        return;
      }

      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/reset_password'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'admission_number': admissionNumber,
          'otp': otpController.text,
          'new_password': newPasswordController.text,
        }),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Password reset successful')),
        );
        Navigator.pop(context);
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to reset password: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    Navigator.pushReplacementNamed(context, '/login');
  }

  Future<void> _pickProfileImage() async {
    final ImagePicker picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);

    if (image != null) {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.setString('profile_image', image.path);

      setState(() {
        profileImagePath = image.path;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          children: [
            _buildProfileHeader(),
            const SizedBox(height: 20),
            _buildInfoCard(),
            const SizedBox(height: 20),
            _buildActionButtons(),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16.0),
      decoration: BoxDecoration(
        color: Theme.of(context).primaryColor,
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(30),
          bottomRight: Radius.circular(30),
        ),
      ),
      child: Column(
        children: [
          GestureDetector(
            onTap: _pickProfileImage,
            child: Stack(
              alignment: Alignment.bottomRight,
              children: [
                CircleAvatar(
                  radius: 60,
                  backgroundColor: Colors.white,
                  backgroundImage: profileImagePath.isNotEmpty
                      ? FileImage(File(profileImagePath))
                      : const AssetImage('assets/default_profile.png')
                          as ImageProvider,
                ),
                CircleAvatar(
                  radius: 18,
                  backgroundColor: Colors.white,
                  child: Icon(
                    Icons.camera_alt,
                    color: Theme.of(context).primaryColor,
                    size: 24,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 12),
          Text(
            username,
            style: const TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            '$department - ${role.toUpperCase()}',
            style: const TextStyle(
              fontSize: 16,
              color: Colors.white70,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoCard() {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16.0),
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Personal Information',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            _buildInfoRow(Icons.email, 'Email', email),
            const Divider(),
            _buildInfoRow(Icons.phone, 'Phone', phone),
            const Divider(),
            _buildInfoRow(Icons.school, 'Admission No', admissionNumber),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Icon(icon, color: Theme.of(context).primaryColor, size: 24),
          const SizedBox(width: 12),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: const TextStyle(fontSize: 12, color: Colors.grey),
              ),
              Text(
                value,
                style: const TextStyle(fontSize: 16),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        children: [
          ElevatedButton.icon(
            onPressed: _showEditProfileDialog,
            icon: const Icon(Icons.edit),
            label: const Text('Edit Profile'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Theme.of(context).primaryColor,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 12),
          ElevatedButton.icon(
            onPressed: _requestOtp,
            icon: const Icon(Icons.lock),
            label: const Text('Change Password'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 12),
          ElevatedButton.icon(
            onPressed: _logout,
            icon: const Icon(Icons.logout),
            label: const Text('Logout'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
        ],
      ),
    );
  }

  void _showEditProfileDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Edit Profile',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: usernameController,
                  decoration: InputDecoration(
                    labelText: 'Username',
                    prefixIcon: const Icon(Icons.person),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: phoneController,
                  decoration: InputDecoration(
                    labelText: 'Phone Number',
                    prefixIcon: const Icon(Icons.phone),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  keyboardType: TextInputType.phone,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Cancel',
                          style: TextStyle(color: Colors.grey)),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _updateUserData,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text('Save'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void _showResetPasswordDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Reset Password',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: otpController,
                  decoration: InputDecoration(
                    labelText: 'Enter OTP',
                    prefixIcon: const Icon(Icons.mail),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  keyboardType: TextInputType.number,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: newPasswordController,
                  decoration: InputDecoration(
                    labelText: 'New Password',
                    prefixIcon: const Icon(Icons.lock),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  obscureText: true,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Cancel',
                          style: TextStyle(color: Colors.grey)),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _resetPassword,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text('Reset'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

============================

frontend/lib/login.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'utils/network_config.dart';
import 'student_screens/home.dart';
import 'admin_screens/admin_dashboard.dart';
import 'staff_screens/staff_dashboard.dart';
import 'hod_screens/hod_dashboard.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  LoginScreenState createState() => LoginScreenState();
}

class LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController admissionNumberController =
      TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  bool isLoading = false;
  bool isCheckingRole = true;

  @override
  void initState() {
    super.initState();
    _checkUserRole();
  }

  Future<void> _checkUserRole() async {
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString('jwt_token');
      String? role = prefs.getString('role');

      debugPrint('Checking stored credentials:');
      debugPrint('  Token: $token');
      debugPrint('  Role: $role');
      debugPrint('  All keys: ${prefs.getKeys()}');

      if (token != null && role != null) {
        _navigateBasedOnRole(role, prefs);
      }
    } catch (e) {
      debugPrint('Error checking user role: $e');
    } finally {
      setState(() => isCheckingRole = false);
    }
  }

  Future<void> _login() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => isLoading = true);

    String admissionNumber = admissionNumberController.text.trim();
    String password = passwordController.text.trim();

    try {
      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/login'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'admission_number': admissionNumber,
          'password': password,
        }),
      );

      debugPrint('Login Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        await _saveUserData(data);
        _navigateBasedOnRole(
            data['user']['role'], await SharedPreferences.getInstance());
      } else {
        final errorData = jsonDecode(response.body);
        String errorMsg = errorData['error'] ?? 'Login failed';
        if (response.statusCode == 400) {
          errorMsg = 'Please provide admission number and password';
        } else if (response.statusCode == 401) {
          errorMsg = 'Invalid admission number or password';
        }
        _showMessage(errorMsg, Colors.red);
      }
    } catch (e) {
      debugPrint('Login error: $e');
      _showMessage('Network error: Check your connection', Colors.red);
    } finally {
      setState(() => isLoading = false);
    }
  }

  Future<void> _saveUserData(Map<String, dynamic> data) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('jwt_token', data['token']);
    await prefs.setString('role', data['user']['role']);
    await prefs.setString('username', data['user']['username']);
    await prefs.setString('email', data['user']['email']);
    await prefs.setString('admission_number', data['user']['admission_number']);
    await prefs.setString(
        'departmentcode', data['user']['departmentcode'] ?? 'Unknown');
    await prefs.setString('semester', data['user']['semester'] ?? 'N/A');

    debugPrint('Saved user data:');
    debugPrint('  Token: ${data['token'].substring(0, 10)}...');
    debugPrint('  Role: ${data['user']['role']}');
    debugPrint('  Username: ${data['user']['username']}');
    debugPrint('  Departmentcode: ${data['user']['departmentcode']}');
    debugPrint('  Semester: ${data['user']['semester']}');
  }

  void _navigateBasedOnRole(String role, SharedPreferences prefs) {
    debugPrint('Navigating based on role: $role');
    switch (role) {
      case 'admin':
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const AdminDashboard()),
        );
        break;
      case 'staff':
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const StaffDashboard()),
        );
        break;
      case 'hod':
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const HodDashboard()),
        );
        break;
      case 'student':
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => HomeScreen(userData: {
              'name': prefs.getString('username') ?? 'User',
              'email': prefs.getString('email') ?? 'N/A',
              'phone': prefs.getString('phone_number') ?? 'N/A',
              'admission_number': prefs.getString('admission_number') ?? '',
            }),
          ),
        );
        break;
      default:
        _showMessage('Unknown role: $role', Colors.red);
    }
  }

  void _showMessage(String message, Color color) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: color,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: isCheckingRole
          ? const Center(child: CircularProgressIndicator())
          : SafeArea(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Text(
                        'Campus Connect',
                        style: TextStyle(
                          fontSize: 32,
                          fontWeight: FontWeight.bold,
                          color: Theme.of(context).primaryColor,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 40),
                      TextFormField(
                        controller: admissionNumberController,
                        decoration: const InputDecoration(
                          labelText: 'Admission Number',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.person),
                        ),
                        validator: (value) =>
                            value == null || value.trim().isEmpty
                                ? 'Please enter your admission number'
                                : null,
                      ),
                      const SizedBox(height: 20),
                      TextFormField(
                        controller: passwordController,
                        decoration: const InputDecoration(
                          labelText: 'Password',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.lock),
                        ),
                        obscureText: true,
                        validator: (value) =>
                            value == null || value.trim().isEmpty
                                ? 'Please enter your password'
                                : null,
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: isLoading ? null : _login,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Theme.of(context).primaryColor,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: isLoading
                            ? const CircularProgressIndicator(
                                color: Colors.white)
                            : const Text(
                                'Login',
                                style: TextStyle(
                                    fontSize: 18, color: Colors.white),
                              ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
    );
  }

  @override
  void dispose() {
    admissionNumberController.dispose();
    passwordController.dispose();
    super.dispose();
  }
}

============================

frontend/lib/main.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'splash.dart';
import 'login.dart';
import 'student_screens/home.dart';
import 'student_screens/chatbot.dart';
import 'admin_screens/admin_dashboard.dart';
import 'staff_screens/staff_dashboard.dart';
import 'hod_screens/hod_dashboard.dart';
import 'admin_screens/departments_page.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  MyAppState createState() => MyAppState();
}

class MyAppState extends State<MyApp> {
  bool isLoading = true;
  String? jwtToken;
  Map<String, String> userData = {};

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();

      debugPrint(
          'Starting _loadUserData - All SharedPreferences keys: ${prefs.getKeys()}');
      debugPrint(
          'Raw user_role from SharedPreferences: ${prefs.getString('user_role')}');
      debugPrint(
          'Raw jwt_token from SharedPreferences: ${prefs.getString('jwt_token')}');

      // Ensure splash screen is visible for at least 2 seconds
      await Future.delayed(const Duration(seconds: 2));

      setState(() {
        jwtToken = prefs.getString('jwt_token');
        String? rawRole = prefs.getString('user_role');
        userData = {
          "name": prefs.getString('username') ?? "Guest",
          "email": prefs.getString('email') ?? "N/A",
          "phone": prefs.getString('phone') ?? "N/A",
          "admission_number": prefs.getString('admission_number') ?? "N/A",
          "role": rawRole ?? "N/A",
        };
        debugPrint('After setState - userData[role]: ${userData['role']}');
        isLoading = false;
      });

      debugPrint("✅ Loaded User Data: $userData");
    } catch (e) {
      debugPrint('Error loading user data: $e');
      setState(() {
        isLoading = false; // Proceed to login screen on error
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    debugPrint('Building MyApp - isLoading: $isLoading, jwtToken: $jwtToken');
    if (isLoading) {
      return MaterialApp(
        title: 'Campus Connect',
        theme: ThemeData(
          primaryColor: const Color(0xFF0C6170),
          hintColor: const Color(0xFF37BEB0),
          scaffoldBackgroundColor: const Color(0xFFDBF5F0),
        ),
        debugShowCheckedModeBanner: false,
        home: const SplashScreen(),
      );
    }

    Widget homeScreen =
        jwtToken == null ? LoginScreen() : _getHomeScreenBasedOnRole();

    return MaterialApp(
      title: 'Campus Connect',
      theme: ThemeData(
        primaryColor: const Color(0xFF0C6170),
        hintColor: const Color(0xFF37BEB0),
        scaffoldBackgroundColor: const Color(0xFFDBF5F0),
      ),
      debugShowCheckedModeBanner: false,
      home: homeScreen,
      routes: {
        '/login': (context) => LoginScreen(),
        '/home': (context) => HomeScreen(
              userData: (ModalRoute.of(context)?.settings.arguments
                      as Map<String, String>?) ??
                  {"name": "Guest"},
            ),
        '/chatbot': (context) => ChatbotPage(),
        '/departments': (context) => const DepartmentPage(),
      },
    );
  }

  Widget _getHomeScreenBasedOnRole() {
    debugPrint("Navigating based on role: ${userData['role']}");
    switch (userData['role']) {
      case 'admin':
        return AdminDashboard();
      case 'staff':
        return const StaffDashboard();
      case 'hod':
        return const HodDashboard();
      case 'student':
        return HomeScreen(userData: userData);
      default:
        return LoginScreen();
    }
  }
}

============================

frontend/lib/shared/department_staff_page.dart:

contents:
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/network_config.dart';
import '../hod_screens/hod_dashboard.dart';

class DepartmentStaffPage extends StatefulWidget {
  const DepartmentStaffPage({super.key});

  @override
  _DepartmentStaffPageState createState() => _DepartmentStaffPageState();
}

class _DepartmentStaffPageState extends State<DepartmentStaffPage> {
  List<Map<String, dynamic>> _staff = [];
  String? _departmentCode; // HOD's department from JWT
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    fetchStaff();
    fetchUserDepartment(); // Get HOD's department
  }

  Future<void> fetchStaff() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/staff/list'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        setState(() {
          _staff = List<Map<String, dynamic>>.from(jsonDecode(response.body));
          _errorMessage = null;
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load staff: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching staff: $e';
      });
    }
  }

  Future<void> fetchUserDepartment() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      // Decode JWT to get departmentcode (assuming it's in the token)
      final parts = token.split('.');
      final payload = jsonDecode(
          utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));
      setState(() {
        _departmentCode = payload['departmentcode'];
      });
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching department: $e';
      });
    }
  }

  Future<void> updateStaff(
      String admissionNumber, Map<String, dynamic> staffData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.put(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/update_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(staffData),
      );

      if (response.statusCode == 200) {
        await fetchStaff();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Staff updated successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to update staff: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error updating staff: $e';
      });
    }
  }

  Future<void> deleteStaff(String admissionNumber) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/delete_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        await fetchStaff();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Staff deleted successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to delete staff: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error deleting staff: $e';
      });
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  void showEditDialog(Map<String, dynamic> staff) {
    TextEditingController usernameController =
        TextEditingController(text: staff['username']);
    TextEditingController emailController =
        TextEditingController(text: staff['email']);
    TextEditingController phoneController =
        TextEditingController(text: staff['phone_number'] ?? '');
    String role = 'staff';

    showDialog(
      context: context,
      builder: (dialogContext) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Container(
            padding: const EdgeInsets.all(20),
            width: MediaQuery.of(context).size.width * 0.9,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text("Edit Staff",
                        style: TextStyle(
                            fontSize: 20, fontWeight: FontWeight.bold)),
                    IconButton(
                      icon: const Icon(Icons.close, color: Colors.grey),
                      onPressed: () => Navigator.pop(dialogContext),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: usernameController,
                  decoration: InputDecoration(
                    labelText: "Username",
                    prefixIcon: const Icon(Icons.person_outline),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: emailController,
                  decoration: InputDecoration(
                    labelText: "Email",
                    prefixIcon: const Icon(Icons.email_outlined),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: phoneController,
                  decoration: InputDecoration(
                    labelText: "Phone Number (Optional)",
                    prefixIcon: const Icon(Icons.phone_outlined),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(dialogContext),
                      style: TextButton.styleFrom(
                        foregroundColor: Colors.grey,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                      ),
                      child: const Text("Cancel"),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: () async {
                        if (usernameController.text.isEmpty ||
                            emailController.text.isEmpty) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                                content:
                                    Text("Please fill all required fields")),
                          );
                          return;
                        }
                        await updateStaff(staff['admission_number'], {
                          'username': usernameController.text,
                          'email': emailController.text,
                          'phone_number': phoneController.text.isEmpty
                              ? null
                              : phoneController.text,
                          'role': role,
                          'departmentcode':
                              _departmentCode, // Use HOD's department
                        });
                        Navigator.pop(dialogContext);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text("Save",
                          style: TextStyle(color: Colors.white)),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Color _getRoleColor(String role) => Colors.green;
  IconData _getRoleIcon(String role) => Icons.person;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Manage Department Staff"),
        backgroundColor: Colors.blueAccent,
        elevation: 4,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => const HodDashboard()),
            );
          },
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                    content:
                        Text("Add staff functionality not implemented yet")),
              );
            },
          ),
        ],
      ),
      body: _errorMessage != null
          ? Center(
              child: Text(_errorMessage!,
                  style: const TextStyle(color: Colors.red)))
          : _staff.isEmpty
              ? const Center(child: Text("No staff found in this department"))
              : Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ListView.builder(
                    itemCount: _staff.length,
                    itemBuilder: (context, index) {
                      final staff = _staff[index];
                      return Card(
                        elevation: 2,
                        margin: const EdgeInsets.symmetric(vertical: 6.0),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Row(
                            children: [
                              CircleAvatar(
                                backgroundColor: _getRoleColor(staff['role']),
                                child: Icon(_getRoleIcon(staff['role']),
                                    color: Colors.white),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      staff['username'] ?? 'Unknown',
                                      style: const TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      "Email: ${staff['email'] ?? 'N/A'}",
                                      style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.grey[700]),
                                    ),
                                    Text(
                                      "Role: STAFF",
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: _getRoleColor(staff['role']),
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
    );
  }
}

============================

frontend/lib/shared/department_users_page.dart:

contents:
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/network_config.dart';
import '../staff_screens/staff_dashboard.dart';
import '../hod_screens/hod_dashboard.dart';

class DepartmentUsersPage extends StatefulWidget {
  final bool isStaffView;

  const DepartmentUsersPage({
    super.key,
    required this.isStaffView,
  });

  @override
  _DepartmentUsersPageState createState() => _DepartmentUsersPageState();
}

class _DepartmentUsersPageState extends State<DepartmentUsersPage> {
  List<Map<String, dynamic>> _users = [];
  String? _departmentCode; // HOD's department from JWT
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    fetchUsers();
    if (!widget.isStaffView) fetchUserDepartment(); // Only for HOD
  }

  Future<void> fetchUsers() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final String role = widget.isStaffView ? 'staff' : 'hod';
      final String endpoint = '/api/$role/department/users';
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}$endpoint'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        setState(() {
          _users = List<Map<String, dynamic>>.from(jsonDecode(response.body));
          _errorMessage = null;
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load students: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching students: $e';
      });
    }
  }

  Future<void> fetchUserDepartment() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      // Decode JWT to get departmentcode
      final parts = token!.split('.');
      final payload = jsonDecode(
          utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))));
      setState(() {
        _departmentCode = payload['departmentcode'];
      });
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching department: $e';
      });
    }
  }

  Future<void> updateUser(
      String admissionNumber, Map<String, dynamic> userData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.put(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/update_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(userData),
      );

      if (response.statusCode == 200) {
        await fetchUsers();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Student updated successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to update student: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error updating student: $e';
      });
    }
  }

  Future<void> deleteUser(String admissionNumber) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/delete_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        await fetchUsers();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Student deleted successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to delete student: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error deleting student: $e';
      });
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  void showEditDialog(Map<String, dynamic> user) {
    TextEditingController usernameController =
        TextEditingController(text: user['username']);
    TextEditingController emailController =
        TextEditingController(text: user['email']);
    TextEditingController phoneController =
        TextEditingController(text: user['phone_number'] ?? '');
    TextEditingController batchController =
        TextEditingController(text: user['batch'] ?? '');
    String role = 'student';

    showDialog(
      context: context,
      builder: (dialogContext) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Container(
            padding: const EdgeInsets.all(20),
            width: MediaQuery.of(context).size.width * 0.9,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text("Edit Student",
                        style: TextStyle(
                            fontSize: 20, fontWeight: FontWeight.bold)),
                    IconButton(
                      icon: const Icon(Icons.close, color: Colors.grey),
                      onPressed: () => Navigator.pop(dialogContext),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: usernameController,
                  decoration: InputDecoration(
                    labelText: "Username",
                    prefixIcon: const Icon(Icons.person_outline),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: emailController,
                  decoration: InputDecoration(
                    labelText: "Email",
                    prefixIcon: const Icon(Icons.email_outlined),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: phoneController,
                  decoration: InputDecoration(
                    labelText: "Phone Number (Optional)",
                    prefixIcon: const Icon(Icons.phone_outlined),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: batchController,
                  decoration: InputDecoration(
                    labelText: "Batch (e.g., 2021-2025)",
                    prefixIcon: const Icon(Icons.calendar_today),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(dialogContext),
                      style: TextButton.styleFrom(
                        foregroundColor: Colors.grey,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                      ),
                      child: const Text("Cancel"),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: () async {
                        if (usernameController.text.isEmpty ||
                            emailController.text.isEmpty) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                                content:
                                    Text("Please fill all required fields")),
                          );
                          return;
                        }
                        await updateUser(user['admission_number'], {
                          'username': usernameController.text,
                          'email': emailController.text,
                          'phone_number': phoneController.text.isEmpty
                              ? null
                              : phoneController.text,
                          'role': role,
                          'batch': batchController.text,
                          'departmentcode': _departmentCode,
                        });
                        Navigator.pop(dialogContext);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text("Save",
                          style: TextStyle(color: Colors.white)),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Color _getRoleColor(String role) => Colors.orange;
  IconData _getRoleIcon(String role) => Icons.school;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.isStaffView
            ? "Department Students"
            : "Manage Department Students"),
        backgroundColor: widget.isStaffView ? Colors.green : Colors.blueAccent,
        elevation: 4,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => widget.isStaffView
                    ? const StaffDashboard()
                    : const HodDashboard(),
              ),
            );
          },
        ),
      ),
      body: _errorMessage != null
          ? Center(
              child: Text(_errorMessage!,
                  style: const TextStyle(color: Colors.red)))
          : _users.isEmpty
              ? const Center(
                  child: Text("No students found in this department"))
              : Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ListView.builder(
                    itemCount: _users.length,
                    itemBuilder: (context, index) {
                      final user = _users[index];
                      return Card(
                        elevation: 2,
                        margin: const EdgeInsets.symmetric(vertical: 6.0),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Row(
                            children: [
                              CircleAvatar(
                                backgroundColor: _getRoleColor(user['role']),
                                child: Icon(_getRoleIcon(user['role']),
                                    color: Colors.white),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      user['username'] ?? 'Unknown',
                                      style: const TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      "Email: ${user['email'] ?? 'N/A'}",
                                      style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.grey[700]),
                                    ),
                                    Text(
                                      "Role: STUDENT",
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: _getRoleColor(user['role']),
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    if (user['batch'] != null)
                                      Text(
                                        "Batch: ${user['batch']}",
                                        style: TextStyle(
                                            fontSize: 14,
                                            color: Colors.grey[700]),
                                      ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
    );
  }
}

============================

frontend/lib/splash.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'admin_screens/admin_dashboard.dart'; // ✅ Import Admin Dashboard

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  SplashScreenState createState() => SplashScreenState();
}

class SplashScreenState extends State<SplashScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(_controller);
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.5), end: Offset.zero).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeOutCubic),
    );

    _controller.forward();

    _navigateToNextScreen();
  }

  Future<void> _navigateToNextScreen() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? role = prefs.getString('role');

    // ✅ Debugging: Print role to check stored value
    print("User Role from SharedPreferences: $role");

    await Future.delayed(const Duration(seconds: 3)); // Ensure animation plays

    if (mounted) {
      if (role == 'admin') {
        print("✅ Redirecting to Admin Dashboard");
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => AdminDashboard()),
        );
      } else {
        print("✅ Redirecting to Login Page");
        Navigator.of(context).pushReplacementNamed('/login');
      }
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).primaryColor,
      body: Center(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: const Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.school,
                  size: 100,
                  color: Colors.white,
                ),
                SizedBox(height: 20),
                Text(
                  'Campus Connect',
                  style: TextStyle(
                    fontSize: 40,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

============================

frontend/lib/staff_screens/staff_academics_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:file_picker/file_picker.dart';
import 'package:http/http.dart' show MultipartRequest;
import '../utils/network_config.dart';

class StaffAcademicsPage extends StatefulWidget {
  const StaffAcademicsPage({super.key});

  @override
  _StaffAcademicsPageState createState() => _StaffAcademicsPageState();
}

class _StaffAcademicsPageState extends State<StaffAcademicsPage> {
  final _notesFormKey = GlobalKey<FormState>();
  List<Map<String, dynamic>> _subjects = [];
  List<Map<String, dynamic>> _timetableEntries = [];
  List<Map<String, dynamic>> _notes = [];
  String? _token;
  String? _departmentCode;
  String? _notesSemester;
  String? _notesSubjectName;
  String? _notesModuleNumber;
  PlatformFile? _notesFile;
  final List<String> _semesters = [
    'S1',
    'S2',
    'S3',
    'S4',
    'S5',
    'S6',
    'S7',
    'S8'
  ];

  @override
  void initState() {
    super.initState();
    _loadAuthData();
  }

  Future<void> _loadAuthData() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _token = prefs.getString('jwt_token');
      _departmentCode = prefs.getString('departmentcode');
      print('Token: $_token, Department Code: $_departmentCode');
    });
    if (_token != null && _departmentCode != null) {
      _fetchSubjects();
      _fetchTimetable();
      _fetchNotes();
    }
  }

  Future<void> _fetchSubjects() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/staff/subjects'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Subjects Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        setState(() {
          _subjects =
              List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load subjects: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching subjects: $e')),
      );
    }
  }

  Future<void> _fetchTimetable() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/staff/timetable'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Timetable Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        setState(() {
          _timetableEntries =
              List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load timetable: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching timetable: $e')),
      );
    }
  }

  Future<void> _fetchNotes() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/staff/notes'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Notes Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        setState(() {
          _notes = List<Map<String, dynamic>>.from(json.decode(response.body));
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load notes: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching notes: $e')),
      );
    }
  }

  Future<void> _addNotesFile() async {
    if (_notesFormKey.currentState!.validate() && _notesFile != null) {
      _notesFormKey.currentState!.save();
      try {
        var request = MultipartRequest(
          'POST',
          Uri.parse('${NetworkConfig.getBaseUrl()}/api/staff/notes/upload'),
        );
        request.headers['Authorization'] = 'Bearer $_token';
        request.fields['semester'] = _notesSemester!;
        request.fields['subject_name'] = _notesSubjectName!;
        request.fields['module_number'] = _notesModuleNumber!;
        request.files.add(
          await http.MultipartFile.fromPath('file', _notesFile!.path!),
        );
        final response = await request.send();
        final responseBody = await response.stream.bytesToString();
        print('Upload Notes Response: ${response.statusCode} - $responseBody');
        if (response.statusCode == 201) {
          _fetchNotes();
          Navigator.of(context).pop();
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Notes uploaded successfully!')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to upload notes: $responseBody')),
          );
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error uploading notes: $e')),
        );
      }
    } else if (_notesFile == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a PDF file')),
      );
    }
  }

  Future<void> _deleteNote(int noteId) async {
    try {
      final response = await http.delete(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/staff/notes/$noteId'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Delete Note Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        _fetchNotes();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Note deleted successfully!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to delete note: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting note: $e')),
      );
    }
  }

  void _showAddNotesDialog() {
    _notesSemester = null;
    _notesSubjectName = null;
    _notesModuleNumber = null;
    _notesFile = null;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: const Text('Upload Notes'),
          content: Form(
            key: _notesFormKey,
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  DropdownButtonFormField<String>(
                    decoration: InputDecoration(
                      labelText: 'Semester',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    value: _notesSemester,
                    items: _semesters
                        .map((sem) =>
                            DropdownMenuItem(value: sem, child: Text(sem)))
                        .toList(),
                    onChanged: (value) => setDialogState(() {
                      _notesSemester = value;
                      _notesSubjectName = null;
                    }),
                    validator: (value) =>
                        value == null ? 'Please select a semester' : null,
                  ),
                  const SizedBox(height: 10),
                  DropdownButtonFormField<String>(
                    decoration: InputDecoration(
                      labelText: 'Subject',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    value: _notesSubjectName,
                    items: _notesSemester == null
                        ? []
                        : _subjects
                            .where((subject) =>
                                subject['semester'] == _notesSemester)
                            .map<DropdownMenuItem<String>>((subject) =>
                                DropdownMenuItem<String>(
                                  value: subject['subject_name'] as String,
                                  child:
                                      Text(subject['subject_name'] as String),
                                ))
                            .toList(),
                    onChanged: (value) =>
                        setDialogState(() => _notesSubjectName = value),
                    validator: (value) =>
                        value == null ? 'Please select a subject' : null,
                  ),
                  const SizedBox(height: 10),
                  TextFormField(
                    decoration: InputDecoration(
                      labelText: 'Module Number',
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    keyboardType: TextInputType.number,
                    validator: (value) => value!.isEmpty ||
                            int.tryParse(value) == null ||
                            int.parse(value) <= 0
                        ? 'Please enter a valid module number'
                        : null,
                    onSaved: (value) => _notesModuleNumber = value,
                  ),
                  const SizedBox(height: 10),
                  ElevatedButton(
                    onPressed: () async {
                      FilePickerResult? result =
                          await FilePicker.platform.pickFiles(
                        type: FileType.custom,
                        allowedExtensions: ['pdf'],
                      );
                      if (result != null) {
                        setDialogState(() => _notesFile = result.files.first);
                      }
                    },
                    style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.grey[300]),
                    child: Text(_notesFile == null
                        ? 'Select PDF File'
                        : 'File: ${_notesFile!.name}'),
                  ),
                ],
              ),
            ),
          ),
          actions: [
            TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Cancel')),
            ElevatedButton(
              onPressed: _addNotesFile,
              style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10))),
              child: const Text('Upload'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSemesterSubjects(String semester) {
    final filteredSubjects =
        _subjects.where((subject) => subject['semester'] == semester).toList();
    return filteredSubjects.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No subjects available',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredSubjects.length,
            itemBuilder: (context, index) {
              final subject = filteredSubjects[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    '${subject['subject_code']} - ${subject['subject_name']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text('Credits: ${subject['credits']}'),
                ),
              );
            },
          );
  }

  Widget _buildSemesterTimetable(String semester) {
    final filteredEntries = _timetableEntries
        .where((entry) => entry['semester'] == semester)
        .toList();
    return filteredEntries.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No timetable available',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredEntries.length,
            itemBuilder: (context, index) {
              final entry = filteredEntries[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    'Timetable: ${entry['filename']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(
                      'Uploaded: ${entry['uploaded_at'].substring(0, 10)}'),
                ),
              );
            },
          );
  }

  Widget _buildSemesterNotes(String semester) {
    final filteredNotes =
        _notes.where((note) => note['semester'] == semester).toList();
    return filteredNotes.isEmpty
        ? const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('No notes uploaded yet',
                style: TextStyle(color: Colors.grey)),
          )
        : ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: filteredNotes.length,
            itemBuilder: (context, index) {
              final note = filteredNotes[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: ListTile(
                  title: Text(
                    'Notes: ${note['filename']}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle:
                      Text('Uploaded: ${note['uploaded_at'].substring(0, 10)}'),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: const Text('Delete Note'),
                        content: Text(
                            'Are you sure you want to delete ${note['filename']}?'),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.of(context).pop(),
                            child: const Text('Cancel'),
                          ),
                          ElevatedButton(
                            onPressed: () {
                              _deleteNote(note['id']);
                              Navigator.of(context).pop();
                            },
                            style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.red),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Academics',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.blueAccent,
              ),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: ListView(
                children: [
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Syllabus',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading: const Icon(Icons.book, color: Colors.blueAccent),
                      children: [
                        ExpansionTile(
                          title: const Text('1st Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 1 (S1)'),
                                children: [_buildSemesterSubjects('S1')]),
                            ExpansionTile(
                                title: const Text('Semester 2 (S2)'),
                                children: [_buildSemesterSubjects('S2')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('2nd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 3 (S3)'),
                                children: [_buildSemesterSubjects('S3')]),
                            ExpansionTile(
                                title: const Text('Semester 4 (S4)'),
                                children: [_buildSemesterSubjects('S4')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('3rd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 5 (S5)'),
                                children: [_buildSemesterSubjects('S5')]),
                            ExpansionTile(
                                title: const Text('Semester 6 (S6)'),
                                children: [_buildSemesterSubjects('S6')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('4th Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 7 (S7)'),
                                children: [_buildSemesterSubjects('S7')]),
                            ExpansionTile(
                                title: const Text('Semester 8 (S8)'),
                                children: [_buildSemesterSubjects('S8')]),
                          ],
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Timetable',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading:
                          const Icon(Icons.schedule, color: Colors.blueAccent),
                      children: [
                        ExpansionTile(
                          title: const Text('1st Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 1 (S1)'),
                                children: [_buildSemesterTimetable('S1')]),
                            ExpansionTile(
                                title: const Text('Semester 2 (S2)'),
                                children: [_buildSemesterTimetable('S2')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('2nd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 3 (S3)'),
                                children: [_buildSemesterTimetable('S3')]),
                            ExpansionTile(
                                title: const Text('Semester 4 (S4)'),
                                children: [_buildSemesterTimetable('S4')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('3rd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 5 (S5)'),
                                children: [_buildSemesterTimetable('S5')]),
                            ExpansionTile(
                                title: const Text('Semester 6 (S6)'),
                                children: [_buildSemesterTimetable('S6')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('4th Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 7 (S7)'),
                                children: [_buildSemesterTimetable('S7')]),
                            ExpansionTile(
                                title: const Text('Semester 8 (S8)'),
                                children: [_buildSemesterTimetable('S8')]),
                          ],
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Card(
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15)),
                    child: ExpansionTile(
                      title: const Text('Notes',
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold)),
                      leading: const Icon(Icons.note, color: Colors.blueAccent),
                      children: [
                        ListTile(
                          title: const Text('Upload Notes'),
                          leading: const Icon(Icons.upload_file,
                              color: Colors.green),
                          onTap: _showAddNotesDialog,
                        ),
                        ExpansionTile(
                          title: const Text('1st Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 1 (S1)'),
                                children: [_buildSemesterNotes('S1')]),
                            ExpansionTile(
                                title: const Text('Semester 2 (S2)'),
                                children: [_buildSemesterNotes('S2')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('2nd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 3 (S3)'),
                                children: [_buildSemesterNotes('S3')]),
                            ExpansionTile(
                                title: const Text('Semester 4 (S4)'),
                                children: [_buildSemesterNotes('S4')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('3rd Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 5 (S5)'),
                                children: [_buildSemesterNotes('S5')]),
                            ExpansionTile(
                                title: const Text('Semester 6 (S6)'),
                                children: [_buildSemesterNotes('S6')]),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('4th Year'),
                          children: [
                            ExpansionTile(
                                title: const Text('Semester 7 (S7)'),
                                children: [_buildSemesterNotes('S7')]),
                            ExpansionTile(
                                title: const Text('Semester 8 (S8)'),
                                children: [_buildSemesterNotes('S8')]),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

============================

frontend/lib/staff_screens/staff_announcements_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../../utils/network_config.dart';

class StaffAnnouncementsPage extends StatefulWidget {
  const StaffAnnouncementsPage({super.key});

  @override
  _StaffAnnouncementsPageState createState() => _StaffAnnouncementsPageState();
}

class _StaffAnnouncementsPageState extends State<StaffAnnouncementsPage> {
  List generalAnnouncements = [];
  List deptAnnouncements = [];
  bool isLoading = true;
  String? jwtToken;

  @override
  void initState() {
    super.initState();
    _loadTokenAndFetch();
  }

  Future<void> _loadTokenAndFetch() async {
    setState(() => isLoading = true);
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      setState(() {
        jwtToken = prefs.getString('jwt_token');
      });
      if (jwtToken != null) {
        await _fetchGeneralAnnouncements();
        await _fetchDeptAnnouncements();
      }
    } catch (e) {
      debugPrint('Error loading token: $e');
    } finally {
      setState(() => isLoading = false);
    }
  }

  Future<void> _fetchGeneralAnnouncements() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/announcements'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          generalAnnouncements = json.decode(response.body);
        });
      }
    } catch (e) {
      debugPrint('Error fetching general announcements: $e');
    }
  }

  Future<void> _fetchDeptAnnouncements() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/department_announcements'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          deptAnnouncements = json.decode(response.body);
        });
      }
    } catch (e) {
      debugPrint('Error fetching department announcements: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    if (jwtToken == null) {
      return const Scaffold(body: Center(child: Text('Please log in')));
    }

    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('General Announcements',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            Expanded(
              child: generalAnnouncements.isEmpty && deptAnnouncements.isEmpty
                  ? const Center(child: Text('No announcements available'))
                  : ListView(
                      children: [
                        ...generalAnnouncements
                            .map((a) => _buildAnnouncementTile(a))
                            .toList(),
                        if (deptAnnouncements.isNotEmpty) ...[
                          const SizedBox(height: 16),
                          const Text('Department Announcements',
                              style: TextStyle(
                                  fontSize: 18, fontWeight: FontWeight.bold)),
                          ...deptAnnouncements
                              .map((a) => _buildAnnouncementTile(a))
                              .toList(),
                        ],
                      ],
                    ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnnouncementTile(Map<String, dynamic> announcement) {
    return Card(
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: _getColor(announcement['category']),
          child: Icon(_getIcon(announcement['category']), color: Colors.white),
        ),
        title: Text(announcement['title']),
        subtitle: Text(announcement['message']),
        onTap: () {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: Text(announcement['title']),
              content: Text(
                  '${announcement['message']}\n\nCategory: ${announcement['category']}\nCreated: ${announcement['created_at']}'),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Close'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Color _getColor(String category) {
    switch (category) {
      case 'bus':
        return Colors.orange;
      case 'placement':
        return Colors.purple;
      case 'class_suspension':
        return Colors.red;
      case 'event':
        return Colors.green;
      case 'general':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  IconData _getIcon(String category) {
    switch (category) {
      case 'bus':
        return Icons.directions_bus;
      case 'placement':
        return Icons.work;
      case 'class_suspension':
        return Icons.warning;
      case 'event':
        return Icons.event;
      case 'general':
        return Icons.info;
      default:
        return Icons.help;
    }
  }
}

============================

frontend/lib/staff_screens/staff_dashboard.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'staff_home.dart';
import 'staff_academics_page.dart';
import 'staff_announcements_page.dart';
import 'staff_students_page.dart';
import 'staff_settings_page.dart';

class StaffDashboard extends StatefulWidget {
  const StaffDashboard({super.key});

  @override
  _StaffDashboardState createState() => _StaffDashboardState();
}

class _StaffDashboardState extends State<StaffDashboard> {
  int _selectedIndex = 0; // Default to "Home" tab
  String? username; // Store username for display

  // Define pages for each tab (non-const to allow dynamic username)
  late List<Widget> _pages;

  // Define titles for each tab
  static const List<String> _titles = <String>[
    'Home', // Tab 0
    'Academics', // Tab 1
    'Announcements', // Tab 2
    'Students', // Tab 3
    'Settings', // Tab 4
  ];

  @override
  void initState() {
    super.initState();
    _loadUsername(); // Load username on initialization
  }

  Future<void> _loadUsername() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      username = prefs.getString('username') ?? 'Staff';
    });
  }

  Future<void> _logout(BuildContext context) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    Navigator.pushReplacementNamed(context, '/login');
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    // Initialize pages with username dynamically
    _pages = [
      StaffHome(username: username ?? 'Staff'), // Pass username to StaffHome
      const StaffAcademicsPage(),
      const StaffAnnouncementsPage(),
      const StaffStudentsPage(),
      const StaffSettingsPage(),
    ];

    return Scaffold(
      appBar: AppBar(
        title: Text(_titles[_selectedIndex]), // Dynamic title based on tab
        backgroundColor: Colors.green,
        elevation: 4,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => _logout(context),
            tooltip: 'Logout',
          ),
        ],
      ),
      body: _pages[_selectedIndex], // Display the selected page
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.book),
            label: 'Academics',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.announcement),
            label: 'Announcements',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.school),
            label: 'Students',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.green,
        unselectedItemColor: Colors.grey,
        backgroundColor: Colors.white,
        type: BottomNavigationBarType.fixed,
        onTap: _onItemTapped,
      ),
    );
  }
}

============================

frontend/lib/staff_screens/staff_home.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../utils/network_config.dart';
import '../shared/department_users_page.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'dart:io';

class StaffHome extends StatelessWidget {
  final String username;

  const StaffHome({super.key, required this.username});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Text(
            "Welcome, $username!",
            style: const TextStyle(
                fontSize: 24, fontWeight: FontWeight.bold, color: Colors.green),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 20),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) =>
                      const DepartmentUsersPage(isStaffView: true),
                ),
              );
            },
            icon: const Icon(Icons.school),
            label: const Text("View Department Students"),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 12),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton.icon(
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text("Timetable feature coming soon!")),
              );
            },
            icon: const Icon(Icons.schedule),
            label: const Text("View Timetable"),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 12),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) =>
                      StaffAssignmentsPage(username: username),
                ),
              );
            },
            icon: const Icon(Icons.assignment),
            label: const Text("Manage Assignments"),
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 12),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
        ],
      ),
    );
  }
}

class StaffAssignmentsPage extends StatefulWidget {
  final String username;

  const StaffAssignmentsPage({super.key, required this.username});

  @override
  _StaffAssignmentsPageState createState() => _StaffAssignmentsPageState();
}

class _StaffAssignmentsPageState extends State<StaffAssignmentsPage> {
  List<Map<String, dynamic>> _assignments = [];
  bool _isLoading = true;
  String? _token;

  @override
  void initState() {
    super.initState();
    _loadTokenAndFetchAssignments();
  }

  Future<void> _loadTokenAndFetchAssignments() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _token = prefs.getString('jwt_token');
      print('JWT Token: $_token'); // Debug JWT token
    });
    if (_token != null) {
      _fetchAssignments();
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Authentication token not found')),
      );
      setState(() => _isLoading = false);
    }
  }

  Future<void> _fetchAssignments() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/staff/assignments'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Assignments Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _assignments = List<Map<String, dynamic>>.from(data['assignments']);
          _isLoading = false;
        });
      } else {
        setState(() => _isLoading = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to load assignments: ${response.body}')),
        );
      }
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching assignments: $e')),
      );
    }
  }

  Future<void> _downloadAssignment(String filename) async {
    try {
      final response = await http.get(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/staff/assignments/download/$filename'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Download Response: ${response.statusCode}');
      if (response.statusCode == 200) {
        final dir = await getApplicationDocumentsDirectory();
        print('Download Directory: ${dir.path}');
        final filePath = '${dir.path}/$filename';
        final file = File(filePath);
        await file.writeAsBytes(response.bodyBytes);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('File downloaded to $filePath')),
        );
        OpenFile.open(filePath);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to download file: ${response.body}')),
        );
      }
    } catch (e, stackTrace) {
      print('Error downloading file: $e');
      print('Stack trace: $stackTrace');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error downloading file: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Manage Assignments'),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _assignments.isEmpty
              ? const Center(
                  child: Text(
                    'No assignments found for you yet.',
                    style: TextStyle(fontSize: 16),
                  ),
                )
              : ListView.builder(
                  itemCount: _assignments.length,
                  itemBuilder: (context, index) {
                    final assignment = _assignments[index];
                    return ListTile(
                      leading: const Icon(Icons.assignment, color: Colors.grey),
                      title: Text(
                          'Assignment ${assignment['assignment_number']} - ${assignment['subject_code']}'),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text('Staff: ${assignment['staff_name']}'),
                          Text(
                              'Submitted By: ${assignment['submitted_by'] ?? 'Not Submitted'}'),
                          if (assignment['submitted_at'] != null)
                            Text(
                                'Submitted At: ${assignment['submitted_at'].substring(0, 10)}'),
                        ],
                      ),
                      trailing: assignment['submission_filename'] != null
                          ? IconButton(
                              icon: const Icon(Icons.download,
                                  color: Colors.blue),
                              onPressed: () => _downloadAssignment(
                                  assignment['submission_filename']),
                            )
                          : null,
                      onTap: () {
                        showDialog(
                          context: context,
                          builder: (context) => AlertDialog(
                            title: const Text('Assignment Details'),
                            content: SingleChildScrollView(
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text('ID: ${assignment['id']}'),
                                  Text(
                                      'Subject Code: ${assignment['subject_code']}'),
                                  Text(
                                      'Staff Name: ${assignment['staff_name']}'),
                                  Text(
                                      'Assignment Number: ${assignment['assignment_number']}'),
                                  Text(
                                      'Instructor ID: ${assignment['instructor_id']}'),
                                  Text(
                                      'Department Code: ${assignment['departmentcode']}'),
                                  Text(
                                      'Created At: ${assignment['created_at'].substring(0, 10)}'),
                                  Text(
                                      'Submitted: ${assignment['submitted_by'] != null ? 'Yes' : 'No'}'),
                                  if (assignment['submitted_by'] != null) ...[
                                    Text(
                                        'Submitted By: ${assignment['submitted_by']}'),
                                    Text(
                                        'Submitted At: ${assignment['submitted_at'].substring(0, 10)}'),
                                    Text(
                                        'File: ${assignment['submission_filename']}'),
                                  ],
                                ],
                              ),
                            ),
                            actions: [
                              TextButton(
                                onPressed: () => Navigator.pop(context),
                                child: const Text('Close'),
                              ),
                            ],
                          ),
                        );
                      },
                    );
                  },
                ),
    );
  }
}

============================

frontend/lib/staff_screens/staff_settings_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../utils/network_config.dart';

class StaffSettingsPage extends StatefulWidget {
  const StaffSettingsPage({super.key});

  @override
  State<StaffSettingsPage> createState() => _StaffSettingsPageState();
}

class _StaffSettingsPageState extends State<StaffSettingsPage> {
  String admissionNumber = "N/A";
  String role = "N/A";
  String email = "N/A";
  String phone = "N/A";
  String username = "User";
  String department = "Unknown";
  String profileImagePath = "";

  final TextEditingController usernameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController otpController = TextEditingController();
  final TextEditingController newPasswordController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('jwt_token');

    if (token == null) {
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }

    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/staff/profile'),
        headers: {'Authorization': 'Bearer $token'},
      );
      print(
          'Staff Profile Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final profile = json.decode(response.body);
        setState(() {
          admissionNumber = profile['admission_number'] ?? "N/A";
          role = profile['role'] ?? "N/A";
          email = profile['email'] ?? "N/A";
          phone = profile['phone_number'] ?? "N/A";
          username = profile['username'] ?? "User";
          department = profile['departmentcode'] ?? "Unknown";
          profileImagePath = prefs.getString('profile_image') ?? "";
        });

        usernameController.text = username;
        emailController.text = email;
        phoneController.text = phone;
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load profile: ${response.body}')),
        );
        Navigator.pushReplacementNamed(context, '/login');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading profile: $e')),
      );
    }
  }

  Future<void> _updateUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('jwt_token');

    if (token == null) {
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }

    try {
      final response = await http.put(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/staff/update_profile'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'admission_number': admissionNumber,
          'username': usernameController.text,
          'phone_number': phoneController.text,
        }),
      );

      if (response.statusCode == 200) {
        setState(() {
          username = usernameController.text;
          phone = phoneController.text;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Profile updated successfully')),
        );
        Navigator.pop(context);
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to update profile: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating profile: $e')),
      );
    }
  }

  Future<void> _requestOtp() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        Navigator.pushReplacementNamed(context, '/login');
        return;
      }

      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/request_otp'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({'admission_number': admissionNumber}),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('OTP sent to your email')),
        );
        _showResetPasswordDialog();
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to send OTP: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _resetPassword() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        Navigator.pushReplacementNamed(context, '/login');
        return;
      }

      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/reset_password'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'admission_number': admissionNumber,
          'otp': otpController.text,
          'new_password': newPasswordController.text,
        }),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Password reset successful')),
        );
        Navigator.pop(context);
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to reset password: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    Navigator.pushReplacementNamed(context, '/login');
  }

  Future<void> _pickProfileImage() async {
    final ImagePicker picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);

    if (image != null) {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.setString('profile_image', image.path);

      setState(() {
        profileImagePath = image.path;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          children: [
            _buildProfileHeader(),
            const SizedBox(height: 20),
            _buildInfoCard(),
            const SizedBox(height: 20),
            _buildActionButtons(),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16.0),
      decoration: BoxDecoration(
        color: Theme.of(context).primaryColor,
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(30),
          bottomRight: Radius.circular(30),
        ),
      ),
      child: Column(
        children: [
          GestureDetector(
            onTap: _pickProfileImage,
            child: Stack(
              alignment: Alignment.bottomRight,
              children: [
                CircleAvatar(
                  radius: 60,
                  backgroundColor: Colors.white,
                  backgroundImage: profileImagePath.isNotEmpty
                      ? FileImage(File(profileImagePath))
                      : const AssetImage('assets/default_profile.png')
                          as ImageProvider,
                ),
                CircleAvatar(
                  radius: 18,
                  backgroundColor: Colors.white,
                  child: Icon(
                    Icons.camera_alt,
                    color: Theme.of(context).primaryColor,
                    size: 24,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 12),
          Text(
            username,
            style: const TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            '$department - ${role.toUpperCase()}',
            style: const TextStyle(
              fontSize: 16,
              color: Colors.white70,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoCard() {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16.0),
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Personal Information',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            _buildInfoRow(Icons.email, 'Email', email),
            const Divider(),
            _buildInfoRow(Icons.phone, 'Phone', phone),
            const Divider(),
            _buildInfoRow(Icons.school, 'Admission No', admissionNumber),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Icon(icon, color: Theme.of(context).primaryColor, size: 24),
          const SizedBox(width: 12),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: const TextStyle(fontSize: 12, color: Colors.grey),
              ),
              Text(
                value,
                style: const TextStyle(fontSize: 16),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        children: [
          ElevatedButton.icon(
            onPressed: _showEditProfileDialog,
            icon: const Icon(Icons.edit),
            label: const Text('Edit Profile'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Theme.of(context).primaryColor,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 12),
          ElevatedButton.icon(
            onPressed: _requestOtp,
            icon: const Icon(Icons.lock),
            label: const Text('Change Password'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 12),
          ElevatedButton.icon(
            onPressed: _logout,
            icon: const Icon(Icons.logout),
            label: const Text('Logout'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
        ],
      ),
    );
  }

  void _showEditProfileDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Edit Profile',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: usernameController,
                  decoration: InputDecoration(
                    labelText: 'Username',
                    prefixIcon: const Icon(Icons.person),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: phoneController,
                  decoration: InputDecoration(
                    labelText: 'Phone Number',
                    prefixIcon: const Icon(Icons.phone),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  keyboardType: TextInputType.phone,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Cancel',
                          style: TextStyle(color: Colors.grey)),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _updateUserData,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text('Save'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void _showResetPasswordDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Reset Password',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: otpController,
                  decoration: InputDecoration(
                    labelText: 'Enter OTP',
                    prefixIcon: const Icon(Icons.mail),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  keyboardType: TextInputType.number,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: newPasswordController,
                  decoration: InputDecoration(
                    labelText: 'New Password',
                    prefixIcon: const Icon(Icons.lock),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  obscureText: true,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Cancel',
                          style: TextStyle(color: Colors.grey)),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _resetPassword,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text('Reset'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

============================

frontend/lib/staff_screens/staff_students_page.dart:

contents:
import 'package:flutter/material.dart';
import '../../shared/department_users_page.dart';

class StaffStudentsPage extends StatelessWidget {
  const StaffStudentsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const DepartmentUsersPage(isStaffView: true);
  }
}

============================

frontend/lib/student_screens/announcements_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../../utils/network_config.dart';

class AnnouncementsPage extends StatefulWidget {
  const AnnouncementsPage({super.key});

  @override
  _AnnouncementsPageState createState() => _AnnouncementsPageState();
}

class _AnnouncementsPageState extends State<AnnouncementsPage> {
  List generalAnnouncements = [];
  List deptAnnouncements = [];
  bool isLoading = true;
  String? jwtToken;

  @override
  void initState() {
    super.initState();
    _loadTokenAndFetch();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    _loadTokenAndFetch();
  }

  Future<void> _loadTokenAndFetch() async {
    setState(() => isLoading = true);
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      setState(() {
        jwtToken = prefs.getString('jwt_token');
      });
      if (jwtToken != null) {
        await _fetchGeneralAnnouncements();
        await _fetchDeptAnnouncements();
      }
    } catch (e) {
      debugPrint('Error loading token: $e');
    } finally {
      setState(() => isLoading = false);
    }
  }

  Future<void> _fetchGeneralAnnouncements() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/announcements'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          generalAnnouncements = json.decode(response.body);
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text(
                  'Failed to load general announcements: ${response.body}')),
        );
      }
    } catch (e) {
      debugPrint('Error fetching general announcements: $e');
    }
  }

  Future<void> _fetchDeptAnnouncements() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/department_announcements'),
        headers: {'Authorization': 'Bearer $jwtToken'},
      );
      if (response.statusCode == 200) {
        setState(() {
          deptAnnouncements = json.decode(response.body);
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text(
                  'Failed to load department announcements: ${response.body}')),
        );
      }
    } catch (e) {
      debugPrint('Error fetching department announcements: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    if (jwtToken == null) {
      return Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text('Please log in to view announcements'),
              ElevatedButton(
                onPressed: () =>
                    Navigator.pushReplacementNamed(context, '/login'),
                child: const Text('Go to Login'),
              ),
            ],
          ),
        ),
      );
    }

    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('General Announcements',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            Expanded(
              child: generalAnnouncements.isEmpty && deptAnnouncements.isEmpty
                  ? const Center(child: Text('No announcements available'))
                  : ListView(
                      children: [
                        if (generalAnnouncements.isNotEmpty)
                          ...generalAnnouncements
                              .map((announcement) => _buildAnnouncementTile(
                                  announcement, 'General'))
                              .toList(),
                        if (deptAnnouncements.isNotEmpty) ...[
                          const SizedBox(height: 16),
                          const Text('Department Announcements',
                              style: TextStyle(
                                  fontSize: 18, fontWeight: FontWeight.bold)),
                          ...deptAnnouncements
                              .map((announcement) => _buildAnnouncementTile(
                                  announcement, 'Department'))
                              .toList(),
                        ],
                      ],
                    ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnnouncementTile(
      Map<String, dynamic> announcement, String type) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4.0),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: _getColor(announcement['category']),
          child: Icon(_getIcon(announcement['category']), color: Colors.white),
        ),
        title: Text(announcement['title'],
            style: const TextStyle(fontWeight: FontWeight.bold)),
        subtitle: Text('${announcement['message']}\n${type}'),
        onTap: () {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: Text(announcement['title']),
              content: Text(
                  '${announcement['message']}\n\nCategory: ${announcement['category']}\nCreated: ${announcement['created_at']}'),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Close'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Color _getColor(String category) {
    switch (category) {
      case 'bus':
        return Colors.orange;
      case 'placement':
        return Colors.purple;
      case 'class_suspension':
        return Colors.red;
      case 'event':
        return Colors.green;
      case 'general':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  IconData _getIcon(String category) {
    switch (category) {
      case 'bus':
        return Icons.directions_bus;
      case 'placement':
        return Icons.work;
      case 'class_suspension':
        return Icons.warning;
      case 'event':
        return Icons.event;
      case 'general':
        return Icons.info;
      default:
        return Icons.help;
    }
  }
}

============================

frontend/lib/student_screens/chatbot.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:file_picker/file_picker.dart';
import '../utils/network_config.dart'; // Import the config

class ChatbotPage extends StatefulWidget {
  const ChatbotPage({super.key});

  @override
  State<ChatbotPage> createState() => _ChatbotPageState();
}

class _ChatbotPageState extends State<ChatbotPage> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  List<Map<String, dynamic>> _chatSessions = [];
  List<Map<String, String>> _messages = [];
  bool _isLoading = false;
  int _selectedChatIndex = -1;
  String _chatTitle = "New Chat";

  @override
  void initState() {
    super.initState();
    _loadChatHistory();
  }

  Future<void> _loadChatHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final chatData = prefs.getString('chat_sessions');
    if (chatData != null) {
      setState(() {
        _chatSessions = List<Map<String, dynamic>>.from(jsonDecode(chatData));
        for (var session in _chatSessions) {
          if (session['messages'] != null) {
            session['messages'] = List<Map<String, String>>.from(
                (session['messages'] as List)
                    .map((msg) => Map<String, String>.from(msg)));
          }
        }
        if (_chatSessions.isNotEmpty && _selectedChatIndex == -1) {
          _selectedChatIndex = 0;
          _chatTitle = _chatSessions[0]['name'] ?? "Chat 1";
          _messages = List<Map<String, String>>.from(
              _chatSessions[0]['messages'] ?? []);
        }
      });
    }
  }

  Future<void> _saveChatHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final sessionsToSave = _chatSessions.map((session) {
      return {
        'name': session['name'],
        'messages': List<Map<String, String>>.from(session['messages'] ?? [])
      };
    }).toList();
    await prefs.setString('chat_sessions', jsonEncode(sessionsToSave));
  }

  Future<void> _sendMessage({PlatformFile? file}) async {
    final userMessage = _messageController.text.trim();
    if (userMessage.isEmpty && file == null) return;

    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('jwt_token');
    if (token == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please log in first")),
      );
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }

    setState(() {
      if (userMessage.isNotEmpty) {
        _messages.add({"sender": "user", "text": userMessage});
      }
      if (file != null) {
        _messages.add({"sender": "user", "text": "Uploaded: ${file.name}"});
      }
      _isLoading = true;
    });
    _messageController.clear();
    _scrollToBottom();

    final baseUrl = NetworkConfig.getBaseUrl();
    final endpoint = '$baseUrl/api/chatbot/chat';
    print('Request URL: $endpoint');
    try {
      var request = http.MultipartRequest('POST', Uri.parse(endpoint));
      request.headers['Authorization'] = 'Bearer $token';

      if (userMessage.isNotEmpty) {
        request.fields['message'] = userMessage;
        print('Sending message: $userMessage');
      }
      if (file != null) {
        if (file.size > 10 * 1024 * 1024) {
          throw Exception("File size exceeds 10MB limit");
        }
        request.files
            .add(await http.MultipartFile.fromPath('file', file.path!));
        print('Uploading file: ${file.name}');
      }

      final response =
          await request.send().timeout(const Duration(seconds: 60));
      final responseBody = await http.Response.fromStream(response);

      print('Response Status: ${response.statusCode}');
      print('Response Body: ${responseBody.body}');

      if (response.statusCode == 200) {
        final responseData = jsonDecode(responseBody.body);
        setState(() {
          if (responseData.containsKey("summary")) {
            _messages.add({
              "sender": "bot",
              "text": "Summary: ${responseData['summary']}"
            });
            _messages.add({
              "sender": "bot",
              "text": "Description: ${responseData['description']}"
            });
          } else {
            final botResponse =
                responseData["response"] ?? "No response from server";
            _messages.add({"sender": "bot", "text": botResponse});
          }
        });
      } else {
        String errorMessage;
        try {
          final errorData = jsonDecode(responseBody.body);
          errorMessage = errorData['error'] ?? 'Unknown error';
        } catch (_) {
          errorMessage = 'Server error: Status ${response.statusCode}';
        }
        setState(() {
          _messages.add({"sender": "bot", "text": "Error: $errorMessage"});
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Server error: $errorMessage")),
        );
      }
    } catch (e) {
      print('Chatbot Error: $e');
      String errorText = "Error: $e";
      if (e.toString().contains('Timeout')) {
        errorText = "Request timed out. Check your connection and try again.";
      } else if (e.toString().contains('SocketException')) {
        errorText = "Network error. Is the server running at $endpoint?";
      }
      setState(() {
        _messages.add({"sender": "bot", "text": errorText});
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(errorText)),
      );
    } finally {
      setState(() => _isLoading = false);
      _scrollToBottom();
      _updateChatSessions();
    }
  }

  void _scrollToBottom() {
    Future.delayed(const Duration(milliseconds: 300), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  void _renameChat() {
    TextEditingController _renameController =
        TextEditingController(text: _chatTitle);
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Rename Chat"),
          content: TextField(
            controller: _renameController,
            decoration: const InputDecoration(hintText: "Enter new chat name"),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () {
                setState(() {
                  _chatTitle = _renameController.text;
                  if (_selectedChatIndex != -1) {
                    _chatSessions[_selectedChatIndex]["name"] = _chatTitle;
                  } else if (_messages.isNotEmpty) {
                    _chatSessions
                        .add({"name": _chatTitle, "messages": _messages});
                    _selectedChatIndex = _chatSessions.length - 1;
                  }
                });
                _saveChatHistory();
                Navigator.pop(context);
              },
              child: const Text("Save"),
            ),
          ],
        );
      },
    );
  }

  void _updateChatSessions() {
    if (_selectedChatIndex == -1 && _messages.isNotEmpty) {
      _chatSessions.add({
        "name": _chatTitle,
        "messages": List<Map<String, String>>.from(_messages)
      });
      _selectedChatIndex = _chatSessions.length - 1;
    } else if (_selectedChatIndex != -1) {
      _chatSessions[_selectedChatIndex]["messages"] =
          List<Map<String, String>>.from(_messages);
    }
    _saveChatHistory();
  }

  Future<void> _showUploadDialog() async {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Upload PDF"),
          content:
              const Text("Please upload a PDF file (max 10MB) to summarize."),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                _uploadFile();
              },
              child: const Text("Upload"),
            ),
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
          ],
        );
      },
    );
  }

  Future<void> _uploadFile() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      allowedExtensions: ['pdf'],
      type: FileType.custom,
    );

    if (result != null && result.files.isNotEmpty) {
      final file = result.files.single;
      await _sendMessage(file: file);
    }
  }

  void _deleteChat(int index) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Delete Chat"),
          content: const Text("Are you sure you want to delete this chat?"),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () {
                setState(() {
                  _chatSessions.removeAt(index);
                  if (_selectedChatIndex == index) {
                    _messages.clear();
                    _chatTitle = "New Chat";
                    _selectedChatIndex = -1;
                  } else if (_selectedChatIndex > index) {
                    _selectedChatIndex--;
                  }
                });
                _saveChatHistory();
                Navigator.pop(context);
              },
              child: const Text("Delete"),
            ),
          ],
        );
      },
    );
  }

  Widget _buildSidebar() {
    return Drawer(
      child: Column(
        children: [
          ListTile(
            title: const Text("Chat History"),
            trailing: IconButton(
              icon: const Icon(Icons.close),
              onPressed: () => Navigator.pop(context),
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: _chatSessions.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title:
                      Text(_chatSessions[index]["name"] ?? "Chat ${index + 1}"),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => _deleteChat(index),
                  ),
                  onTap: () {
                    setState(() {
                      _selectedChatIndex = index;
                      _messages = List<Map<String, String>>.from(
                          _chatSessions[index]["messages"] ?? []);
                      _chatTitle =
                          _chatSessions[index]["name"] ?? "Chat ${index + 1}";
                    });
                    Navigator.pop(context);
                  },
                );
              },
            ),
          ),
          ListTile(
            leading: const Icon(Icons.add),
            title: const Text("New Chat"),
            onTap: () {
              setState(() {
                _messages.clear();
                _chatTitle = "New Chat";
                _selectedChatIndex = -1;
              });
              Navigator.pop(context);
            },
          ),
        ],
      ),
    );
  }

  Widget _buildChatArea() {
    return ListView.builder(
      controller: _scrollController,
      itemCount: _messages.length,
      itemBuilder: (context, index) {
        final message = _messages[index];
        final isUser = message['sender'] == 'user';
        return Align(
          alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: isUser ? Colors.blueAccent : Colors.grey[300],
              borderRadius: BorderRadius.circular(10),
            ),
            child: Text(
              message['text'] ?? '',
              style: TextStyle(color: isUser ? Colors.white : Colors.black87),
            ),
          ),
        );
      },
    );
  }

  Widget _buildInputField() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 5),
      decoration: const BoxDecoration(
        color: Colors.white,
        boxShadow: [BoxShadow(color: Colors.black26, blurRadius: 2)],
      ),
      child: Row(
        children: [
          IconButton(
            icon: const Icon(Icons.upload_file, color: Colors.blueAccent),
            onPressed: _isLoading ? null : _showUploadDialog,
          ),
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: const InputDecoration(
                hintText: "Type a message...",
                border: InputBorder.none,
              ),
              enabled: !_isLoading,
              onSubmitted: (_) => _sendMessage(),
            ),
          ),
          IconButton(
            icon: const Icon(Icons.send, color: Colors.blueAccent),
            onPressed: _isLoading ? null : () => _sendMessage(),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      drawer: _buildSidebar(),
      appBar: AppBar(
        title: Text(_chatTitle),
        leading: Builder(
          builder: (context) => IconButton(
            icon: const Icon(Icons.menu),
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: _renameChat,
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(child: _buildChatArea()),
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(8.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(width: 10),
                  Text("Processing..."),
                ],
              ),
            ),
          _buildInputField(),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }
}

============================

frontend/lib/student_screens/home.dart:

contents:
import 'dart:io';
import 'package:flutter/material.dart';
import 'student_academics_page.dart';
import 'announcements_page.dart';
import 'profile_page.dart';
import 'chatbot.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:file_picker/file_picker.dart';
import 'package:http/http.dart' show MultipartRequest;
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import '../utils/network_config.dart';

class HomeScreen extends StatefulWidget {
  final Map<String, String> userData;

  const HomeScreen({super.key, required this.userData});

  @override
  HomeScreenState createState() => HomeScreenState();
}

class HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;
  late List<Widget> _widgetOptions;
  late String userName;
  String? _token;

  @override
  void initState() {
    super.initState();
    userName = widget.userData['name'] ?? "User";
    _loadAuthData();
  }

  Future<void> _loadAuthData() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _token = prefs.getString('jwt_token');
    });
    if (_token == null) {
      Navigator.pushReplacementNamed(context, '/login');
    } else {
      await _fetchProfile();
      _initializePages();
    }
  }

  Future<void> _fetchProfile() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/profile'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Profile Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        final profile = json.decode(response.body);
        setState(() {
          userName = profile['username'] ?? userName;
        });
      }
    } catch (e) {
      print('Error fetching profile: $e');
    }
  }

  void _initializePages() {
    _widgetOptions = [
      HomeContent(userName: userName, token: _token),
      const ChatbotPage(),
      const StudentAcademicsPage(),
      const AnnouncementsPage(),
      const ProfilePage(),
    ];
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  String _getTitle() {
    switch (_selectedIndex) {
      case 0:
        return "Welcome, $userName";
      case 1:
        return "Chatbot";
      case 2:
        return "Academics";
      case 3:
        return "Announcements";
      case 4:
        return "Profile";
      default:
        return "Campus Connect";
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          _getTitle(),
          style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text("Notifications clicked!")),
              );
            },
          ),
          const SizedBox(width: 10),
        ],
      ),
      body: _token == null
          ? const Center(child: CircularProgressIndicator())
          : _widgetOptions[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.chat), label: 'Chatbot'),
          BottomNavigationBarItem(icon: Icon(Icons.school), label: 'Academics'),
          BottomNavigationBarItem(
              icon: Icon(Icons.announcement), label: 'Announcements'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Theme.of(context).primaryColor,
        unselectedItemColor: Colors.grey,
        onTap: _onItemTapped,
      ),
    );
  }
}

class HomeContent extends StatefulWidget {
  final String userName;
  final String? token;

  const HomeContent({super.key, required this.userName, required this.token});

  @override
  HomeContentState createState() => HomeContentState();
}

class HomeContentState extends State<HomeContent> {
  List<Map<String, dynamic>> _subjects = [];
  List<Map<String, dynamic>> _teachers = [];
  List<Map<String, dynamic>> _assignments = [];
  List<Map<String, dynamic>> _requests = [];
  Map<String, dynamic>? _selectedItem;
  bool _isLoadingSubjects = true;
  bool _isLoadingTeachers = true;
  bool _isLoadingAssignments = false;
  bool _isLoadingRequests = false;
  bool _showSubjects = false;
  bool _showTeachers = false;
  bool _showExams = false;
  bool _showAssignments = false;
  bool _showRequests = false;
  bool _showDetails = false;
  bool _assignmentsFetched = false;
  bool _requestsFetched = false;

  @override
  void initState() {
    super.initState();
    if (widget.token != null) {
      _fetchSubjects();
      _fetchTeachers();
      _fetchAssignments(); // Fetch assignments on init to display on home screen
    } else {
      setState(() {
        _isLoadingSubjects = false;
        _isLoadingTeachers = false;
      });
    }
  }

  Future<void> _fetchSubjects() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/subjects'),
        headers: {'Authorization': 'Bearer ${widget.token}'},
      );
      print('Subjects Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _subjects = data is List
              ? List<Map<String, dynamic>>.from(data)
              : List<Map<String, dynamic>>.from(data['subjects'] ?? []);
          _isLoadingSubjects = false;
        });
        if (_subjects.isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('No subjects found')),
          );
        }
      } else {
        setState(() => _isLoadingSubjects = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load subjects: ${response.body}')),
        );
      }
    } catch (e) {
      setState(() => _isLoadingSubjects = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching subjects: $e')),
      );
    }
  }

  Future<void> _fetchTeachers() async {
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/teachers'),
        headers: {'Authorization': 'Bearer ${widget.token}'},
      );
      print('Teachers Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _teachers = data is List
              ? List<Map<String, dynamic>>.from(data)
              : List<Map<String, dynamic>>.from(data['teachers'] ?? []);
          _isLoadingTeachers = false;
        });
        if (_teachers.isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('No teachers found')),
          );
        }
      } else {
        setState(() => _isLoadingTeachers = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load teachers: ${response.body}')),
        );
      }
    } catch (e) {
      setState(() => _isLoadingTeachers = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching teachers: $e')),
      );
    }
  }

  Future<void> _fetchAssignments() async {
    setState(() {
      _isLoadingAssignments = true;
    });
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/assignments'),
        headers: {'Authorization': 'Bearer ${widget.token}'},
      );
      print('Assignments Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        List<dynamic> assignmentList;

        // Handle both flat list and wrapped response
        if (data is List) {
          assignmentList = data;
        } else if (data is Map<String, dynamic> &&
            data.containsKey('assignments')) {
          assignmentList = data['assignments'];
          if (assignmentList is! List) {
            throw Exception(
                'Expected "assignments" to be a list, but received: $assignmentList');
          }
        } else {
          throw Exception(
              'Expected a list of assignments or an "assignments" key, but received: $data');
        }

        setState(() {
          _assignments = assignmentList
              .map((item) => item as Map<String, dynamic>)
              .toList();
          _isLoadingAssignments = false;
          _assignmentsFetched = true;
        });

        if (_assignments.isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('No submitted assignments found')),
          );
        }
      } else if (response.statusCode == 401) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text('Session expired. Please log in again.')),
        );
        final prefs = await SharedPreferences.getInstance();
        await prefs.remove('jwt_token');
        Navigator.pushReplacementNamed(context, '/login');
      } else {
        setState(() => _isLoadingAssignments = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to load assignments: ${response.body}'),
          ),
        );
      }
    } catch (e) {
      setState(() => _isLoadingAssignments = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching assignments: $e')),
      );
    }
  }

  Future<void> _fetchRequests() async {
    setState(() {
      _isLoadingRequests = true;
    });
    try {
      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/requests'),
        headers: {'Authorization': 'Bearer ${widget.token}'},
      );
      print('Requests Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _requests = List<Map<String, dynamic>>.from(data);
          _isLoadingRequests = false;
          _requestsFetched = true;
        });
        if (_requests.isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('No requests found')),
          );
        }
      } else {
        setState(() => _isLoadingRequests = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load requests: ${response.body}')),
        );
      }
    } catch (e) {
      setState(() => _isLoadingRequests = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching requests: $e')),
      );
    }
  }

  Future<void> _submitAssignment({
    required String subjectCode,
    required String staffName,
    required int assignmentNumber,
  }) async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['pdf'],
      );
      if (result != null) {
        PlatformFile file = result.files.first;
        var request = MultipartRequest(
          'POST',
          Uri.parse(
              '${NetworkConfig.getBaseUrl()}/api/students/assignments/create-and-submit'),
        );
        request.headers['Authorization'] = 'Bearer ${widget.token}';
        request.fields['subject_code'] = subjectCode;
        request.fields['staff_name'] = staffName;
        request.fields['assignment_number'] = assignmentNumber.toString();
        request.files
            .add(await http.MultipartFile.fromPath('file', file.path!));
        final response = await request.send();
        final responseBody = await response.stream.bytesToString();

        if (response.statusCode == 200) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Assignment submitted successfully!')),
          );
          _fetchAssignments();
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text('Failed to submit assignment: $responseBody')),
          );
        }
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error submitting assignment: $e')),
      );
    }
  }

  Future<void> _submitRequest() async {
    String? category;
    PlatformFile? requestFile;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: const Text('Submit Request'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                DropdownButtonFormField<String>(
                  decoration: InputDecoration(
                    labelText: 'Application Category',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10)),
                  ),
                  value: category,
                  items: ['Medical Leave', 'Duty Leave']
                      .map((cat) =>
                          DropdownMenuItem(value: cat, child: Text(cat)))
                      .toList(),
                  onChanged: (value) => setDialogState(() => category = value),
                  validator: (value) =>
                      value == null ? 'Please select a category' : null,
                ),
                const SizedBox(height: 10),
                ElevatedButton(
                  onPressed: () async {
                    FilePickerResult? result =
                        await FilePicker.platform.pickFiles(
                      type: FileType.custom,
                      allowedExtensions: ['pdf'],
                    );
                    if (result != null) {
                      setDialogState(() => requestFile = result.files.first);
                    }
                  },
                  style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey[300]),
                  child: Text(requestFile == null
                      ? 'Upload PDF'
                      : 'File: ${requestFile!.name}'),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () async {
                if (category != null && requestFile != null) {
                  try {
                    var request = MultipartRequest(
                      'POST',
                      Uri.parse(
                          '${NetworkConfig.getBaseUrl()}/api/students/requests/upload'),
                    );
                    request.headers['Authorization'] = 'Bearer ${widget.token}';
                    request.fields['category'] =
                        category!.toLowerCase().replaceAll(' ', '_');
                    request.files.add(await http.MultipartFile.fromPath(
                        'file', requestFile!.path!));
                    final response = await request.send();
                    final responseBody = await response.stream.bytesToString();
                    print(
                        'Upload Request Response: ${response.statusCode} - $responseBody');

                    if (response.statusCode == 201) {
                      Navigator.of(context).pop();
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                            content: Text('Request submitted successfully!')),
                      );
                      _fetchRequests();
                    } else {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                            content: Text(
                                'Failed to submit request: $responseBody')),
                      );
                    }
                  } catch (e) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Error submitting request: $e')),
                    );
                  }
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                        content: Text('Please select category and file')),
                  );
                }
              },
              style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10))),
              child: const Text('Submit'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _editRequest(Map<String, dynamic> request) async {
    String? category = request['category'].replaceAll('_', ' ').toUpperCase();
    PlatformFile? requestFile;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: const Text('Edit Request'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                DropdownButtonFormField<String>(
                  decoration: InputDecoration(
                    labelText: 'Application Category',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10)),
                  ),
                  value: category,
                  items: ['Medical Leave', 'Duty Leave']
                      .map((cat) =>
                          DropdownMenuItem(value: cat, child: Text(cat)))
                      .toList(),
                  onChanged: (value) => setDialogState(() => category = value),
                  validator: (value) =>
                      value == null ? 'Please select a category' : null,
                ),
                const SizedBox(height: 10),
                ElevatedButton(
                  onPressed: () async {
                    FilePickerResult? result =
                        await FilePicker.platform.pickFiles(
                      type: FileType.custom,
                      allowedExtensions: ['pdf'],
                    );
                    if (result != null) {
                      setDialogState(() => requestFile = result.files.first);
                    }
                  },
                  style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey[300]),
                  child: Text(requestFile == null
                      ? 'Replace PDF (Optional)'
                      : 'File: ${requestFile!.name}'),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () async {
                if (category != null) {
                  try {
                    var requestToSend = MultipartRequest(
                      'PUT',
                      Uri.parse(
                          '${NetworkConfig.getBaseUrl()}/api/students/requests/${request['id']}'),
                    );
                    requestToSend.headers['Authorization'] =
                        'Bearer ${widget.token}';
                    requestToSend.fields['category'] =
                        category!.toLowerCase().replaceAll(' ', '_');
                    if (requestFile != null) {
                      requestToSend.files.add(await http.MultipartFile.fromPath(
                          'file', requestFile!.path!));
                    }
                    final response = await requestToSend.send();
                    final responseBody = await response.stream.bytesToString();
                    print(
                        'Edit Request Response: ${response.statusCode} - $responseBody');

                    if (response.statusCode == 200) {
                      Navigator.of(context).pop();
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                            content: Text('Request updated successfully!')),
                      );
                      _fetchRequests();
                    } else {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                            content: Text(
                                'Failed to update request: $responseBody')),
                      );
                    }
                  } catch (e) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Error updating request: $e')),
                    );
                  }
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Please select a category')),
                  );
                }
              },
              style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10))),
              child: const Text('Update'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _removeRequest(int requestId) async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: const Text('Are you sure you want to delete this request?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              try {
                final response = await http.delete(
                  Uri.parse(
                      '${NetworkConfig.getBaseUrl()}/api/students/requests/$requestId'),
                  headers: {'Authorization': 'Bearer ${widget.token}'},
                );
                print(
                    'Delete Request Response: ${response.statusCode} - ${response.body}');
                if (response.statusCode == 200) {
                  Navigator.of(context).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                        content: Text('Request deleted successfully!')),
                  );
                  _fetchRequests();
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content:
                            Text('Failed to delete request: ${response.body}')),
                  );
                }
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Error deleting request: $e')),
                );
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }

  Future<void> _downloadRequest(String filename) async {
    try {
      final response = await http.get(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/students/download/requests/$filename'),
        headers: {'Authorization': 'Bearer ${widget.token}'},
      );
      if (response.statusCode == 200) {
        final directory = await getExternalStorageDirectory();
        final filePath = '${directory!.path}/$filename';
        final file = File(filePath);
        await file.writeAsBytes(response.bodyBytes);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Request downloaded to $filePath')),
        );
        OpenFile.open(filePath);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to download request: ${response.body}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error downloading request: $e')),
      );
    }
  }

  void _toggleSubjects() {
    setState(() {
      _showSubjects = !_showSubjects;
      _showTeachers = false;
      _showExams = false;
      _showAssignments = false;
      _showRequests = false;
      _showDetails = false;
      _selectedItem = null;
    });
  }

  void _toggleTeachers() {
    setState(() {
      _showTeachers = !_showTeachers;
      _showSubjects = false;
      _showExams = false;
      _showAssignments = false;
      _showRequests = false;
      _showDetails = false;
      _selectedItem = null;
    });
  }

  void _toggleExams() {
    setState(() {
      _showExams = !_showExams;
      _showSubjects = false;
      _showTeachers = false;
      _showAssignments = false;
      _showRequests = false;
      _showDetails = false;
      _selectedItem = null;
    });
  }

  void _toggleAssignments() {
    setState(() {
      _showAssignments = !_showAssignments;
      _showSubjects = false;
      _showTeachers = false;
      _showExams = false;
      _showRequests = false;
      _showDetails = false;
      _selectedItem = null;
      if (_showAssignments && !_assignmentsFetched) {
        _fetchAssignments();
      }
    });
  }

  void _toggleRequests() {
    setState(() {
      _showRequests = !_showRequests;
      _showSubjects = false;
      _showTeachers = false;
      _showExams = false;
      _showAssignments = false;
      _showDetails = false;
      _selectedItem = null;
      if (_showRequests && !_requestsFetched) {
        _fetchRequests();
      }
    });
  }

  void _showItemDetails(Map<String, dynamic> item) {
    setState(() {
      _selectedItem = item;
      _showDetails = true;
    });
  }

  void _hideDetails() {
    setState(() {
      _showDetails = false;
      _selectedItem = null;
    });
  }

  List<String> _getDetails() {
    if (_selectedItem == null) return [];
    if (_selectedItem!.containsKey('subject_code') &&
        !_selectedItem!.containsKey('assignment_number') &&
        !_selectedItem!.containsKey('category')) {
      return [
        'Name: ${_selectedItem!['subject_name']}',
        'Code: ${_selectedItem!['subject_code']}',
        'Semester: ${_selectedItem!['semester']}',
        'Credits: ${_selectedItem!['credits']}',
        'Department: ${_selectedItem!['departmentcode']}',
        'Instructor: ${_selectedItem!['instructor_name']}',
      ];
    } else if (_selectedItem!.containsKey('username')) {
      return [
        'Name: ${_selectedItem!['username']}',
        'Email: ${_selectedItem!['email']}',
        'Phone: ${_selectedItem!['phone_number'] ?? 'N/A'}',
        'Department: ${_selectedItem!['departmentcode']}',
      ];
    } else if (_selectedItem!.containsKey('assignment_number')) {
      return [
        'Subject Code: ${_selectedItem!['subject_code']}',
        'Staff Name: ${_selectedItem!['staff_name']}',
        'Assignment Number: ${_selectedItem!['assignment_number']}',
        'Created At: ${_selectedItem!['created_at'].substring(0, 10)}',
        'Submitted At: ${_selectedItem!['submitted_at']?.substring(0, 10) ?? 'N/A'}',
        'File: ${_selectedItem!['submission_filename']}',
      ];
    } else if (_selectedItem!.containsKey('category')) {
      return [
        'Category: ${_selectedItem!['category'].replaceAll('_', ' ').toUpperCase()}',
        'File: ${_selectedItem!['filename']}',
        'Status: ${_selectedItem!['status']}',
        'Submitted At: ${_selectedItem!['created_at'].substring(0, 10)}',
      ];
    }
    return [];
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Welcome, ${widget.userName}!',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Theme.of(context).primaryColor,
              ),
            ),
            const SizedBox(height: 20),
            // Subjects Title Bar
            GestureDetector(
              onTap: _toggleSubjects,
              child: Container(
                height: 50,
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Theme.of(context).primaryColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Theme.of(context).primaryColor),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Padding(
                      padding: EdgeInsets.only(left: 16.0),
                      child: Text(
                        'Subjects',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.only(right: 16.0),
                      child: Icon(
                        _showSubjects
                            ? Icons.arrow_drop_up
                            : Icons.arrow_drop_down,
                        color: Theme.of(context).primaryColor,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            if (_showSubjects) ...[
              const SizedBox(height: 10),
              _isLoadingSubjects
                  ? const Center(child: CircularProgressIndicator())
                  : _subjects.isEmpty
                      ? const Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('No subjects available',
                              style: TextStyle(fontSize: 16)),
                        )
                      : Column(
                          children: _subjects.map((subject) {
                            return ListTile(
                              leading:
                                  const Icon(Icons.book, color: Colors.grey),
                              title: Text(subject['subject_name'],
                                  style: const TextStyle(fontSize: 16)),
                              subtitle: Text(
                                  'Instructor: ${subject['instructor_name']}'),
                              onTap: () => _showItemDetails(subject),
                            );
                          }).toList(),
                        ),
            ],
            const SizedBox(height: 20),
            // Teachers Title Bar
            GestureDetector(
              onTap: _toggleTeachers,
              child: Container(
                height: 50,
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Theme.of(context).primaryColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Theme.of(context).primaryColor),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Padding(
                      padding: EdgeInsets.only(left: 16.0),
                      child: Text(
                        'Teachers',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.only(right: 16.0),
                      child: Icon(
                        _showTeachers
                            ? Icons.arrow_drop_up
                            : Icons.arrow_drop_down,
                        color: Theme.of(context).primaryColor,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            if (_showTeachers) ...[
              const SizedBox(height: 10),
              _isLoadingTeachers
                  ? const Center(child: CircularProgressIndicator())
                  : _teachers.isEmpty
                      ? const Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('No teachers available',
                              style: TextStyle(fontSize: 16)),
                        )
                      : Column(
                          children: _teachers.map((teacher) {
                            return ListTile(
                              leading:
                                  const Icon(Icons.person, color: Colors.grey),
                              title: Text(teacher['username'],
                                  style: const TextStyle(fontSize: 16)),
                              onTap: () => _showItemDetails(teacher),
                            );
                          }).toList(),
                        ),
            ],
            const SizedBox(height: 20),
            // Assignments Title Bar (for reference, but not primary display)
            GestureDetector(
              onTap: _toggleAssignments,
              child: Container(
                height: 50,
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Theme.of(context).primaryColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Theme.of(context).primaryColor),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Padding(
                      padding: EdgeInsets.only(left: 16.0),
                      child: Text(
                        'Assignments ',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.only(right: 16.0),
                      child: Icon(
                        _showAssignments
                            ? Icons.arrow_drop_up
                            : Icons.arrow_drop_down,
                        color: Theme.of(context).primaryColor,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            if (_showAssignments) ...[
              const SizedBox(height: 10),
              _isLoadingAssignments
                  ? const Center(child: CircularProgressIndicator())
                  : _assignments.isEmpty && _assignmentsFetched
                      ? const Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('No submitted assignments available',
                              style: TextStyle(fontSize: 16)),
                        )
                      : _assignments.isEmpty && !_assignmentsFetched
                          ? const Padding(
                              padding: EdgeInsets.all(8.0),
                              child: Text('Assignments not loaded yet',
                                  style: TextStyle(fontSize: 16)),
                            )
                          : Column(
                              children: _assignments.map((assignment) {
                                return ListTile(
                                  leading: const Icon(Icons.assignment,
                                      color: Colors.grey),
                                  title: Text(
                                      'Assignment ${assignment['assignment_number']} - ${assignment['subject_code']}',
                                      style: const TextStyle(fontSize: 16)),
                                  subtitle: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                          'Staff: ${assignment['staff_name']}'),
                                      Text(
                                          'Submitted At: ${assignment['submitted_at']?.substring(0, 10) ?? 'N/A'}'),
                                    ],
                                  ),
                                  onTap: () => _showItemDetails(assignment),
                                );
                              }).toList(),
                            ),
            ],
            const SizedBox(height: 20),
            // Requests Title Bar
            GestureDetector(
              onTap: _toggleRequests,
              child: Container(
                height: 50,
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Theme.of(context).primaryColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Theme.of(context).primaryColor),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Padding(
                      padding: EdgeInsets.only(left: 16.0),
                      child: Text(
                        'Requests',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.only(right: 16.0),
                      child: Icon(
                        _showRequests
                            ? Icons.arrow_drop_up
                            : Icons.arrow_drop_down,
                        color: Theme.of(context).primaryColor,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            if (_showRequests) ...[
              const SizedBox(height: 10),
              ListTile(
                title: const Text('Submit New Request'),
                leading: const Icon(Icons.upload_file, color: Colors.green),
                onTap: _submitRequest,
              ),
              _isLoadingRequests
                  ? const Center(child: CircularProgressIndicator())
                  : _requests.isEmpty && _requestsFetched
                      ? const Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('No requests submitted yet',
                              style: TextStyle(fontSize: 16)),
                        )
                      : _requests.isEmpty && !_requestsFetched
                          ? const Padding(
                              padding: EdgeInsets.all(8.0),
                              child: Text('Requests not loaded yet',
                                  style: TextStyle(fontSize: 16)),
                            )
                          : Column(
                              children: _requests.map((request) {
                                return ListTile(
                                  leading: const Icon(Icons.request_page,
                                      color: Colors.grey),
                                  title: Text(
                                      request['category']
                                          .replaceAll('_', ' ')
                                          .toUpperCase(),
                                      style: const TextStyle(fontSize: 16)),
                                  subtitle:
                                      Text('Status: ${request['status']}'),
                                  trailing: Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      IconButton(
                                        icon: const Icon(Icons.download,
                                            color: Colors.blue),
                                        onPressed: () => _downloadRequest(
                                            request['filename']),
                                      ),
                                      IconButton(
                                        icon: const Icon(Icons.edit,
                                            color: Colors.orange),
                                        onPressed: () => _editRequest(request),
                                      ),
                                      IconButton(
                                        icon: const Icon(Icons.delete,
                                            color: Colors.red),
                                        onPressed: () =>
                                            _removeRequest(request['id']),
                                      ),
                                    ],
                                  ),
                                  onTap: () => _showItemDetails(request),
                                );
                              }).toList(),
                            ),
            ],
            const SizedBox(height: 20),
            if (_showDetails && _selectedItem != null) ...[
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    'Details',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: _hideDetails,
                  ),
                ],
              ),
              const SizedBox(height: 10),
              Card(
                elevation: 4,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12)),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: _getDetails()
                        .map((item) => Padding(
                              padding:
                                  const EdgeInsets.symmetric(vertical: 4.0),
                              child: Text(item,
                                  style: const TextStyle(fontSize: 16)),
                            ))
                        .toList(),
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}

============================

frontend/lib/student_screens/profile_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../utils/network_config.dart';

class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  String admissionNumber = "N/A";
  String role = "N/A";
  String email = "N/A";
  String phone = "N/A";
  String username = "User";
  String department = "Unknown";
  String profileImagePath = "";

  final TextEditingController usernameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController otpController = TextEditingController();
  final TextEditingController newPasswordController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('jwt_token');

    // Load from SharedPreferences regardless of token presence
    setState(() {
      admissionNumber = prefs.getString('admission_number') ?? "N/A";
      role = prefs.getString('role') ?? "N/A";
      email = prefs.getString('email') ?? "N/A";
      phone = prefs.getString('phone_number') ?? "N/A";
      username = prefs.getString('username') ?? "User";
      department = prefs.getString('departmentcode') ?? "Unknown";
      profileImagePath = prefs.getString('profile_image') ?? "";
    });

    // Update controllers with fetched data
    usernameController.text = username;
    emailController.text = email;
    phoneController.text = phone;

    // If token exists, fetch updated data from backend
    if (token != null) {
      try {
        final response = await http.get(
          Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/profile'),
          headers: {'Authorization': 'Bearer $token'},
        );
        print('Profile Response: ${response.statusCode} - ${response.body}');

        if (response.statusCode == 200) {
          final profile = json.decode(response.body);
          setState(() {
            admissionNumber = profile['admission_number'] ?? "N/A";
            role = profile['role'] ?? "N/A";
            email = profile['email'] ?? "N/A";
            phone = profile['phone_number'] ?? "N/A";
            username = profile['username'] ?? "User";
            department = profile['departmentcode'] ?? "Unknown";
          });

          // Update SharedPreferences with fresh data
          await prefs.setString('admission_number', admissionNumber);
          await prefs.setString('role', role);
          await prefs.setString('email', email);
          await prefs.setString('phone_number', phone);
          await prefs.setString('username', username);
          await prefs.setString('departmentcode', department);

          // Update controllers
          usernameController.text = username;
          emailController.text = email;
          phoneController.text = phone;
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to load profile: ${response.body}')),
          );
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error loading profile: $e')),
        );
      }
    }
  }

  Future<void> _updateUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('jwt_token');

    if (token == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please log in to edit profile')),
      );
      return;
    }

    // Update backend
    try {
      final response = await http.put(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/users/update_profile'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'admission_number': admissionNumber,
          'username': usernameController.text,
          'phone_number': phoneController.text,
        }),
      );

      if (response.statusCode == 200) {
        setState(() {
          username = usernameController.text;
          phone = phoneController.text;
        });
        // Update SharedPreferences
        await prefs.setString('username', username);
        await prefs.setString('phone_number', phone);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Profile updated successfully')),
        );
        Navigator.pop(context);
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to update profile: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating profile: $e')),
      );
    }
  }

  Future<void> _requestOtp() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      // If no token, still allow OTP request using admission number from SharedPreferences
      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/request_otp'),
        headers: {
          'Content-Type': 'application/json',
          if (token != null) 'Authorization': 'Bearer $token',
        },
        body: jsonEncode({'admission_number': admissionNumber}),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('OTP sent to your email')),
        );
        _showResetPasswordDialog();
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to send OTP: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _resetPassword() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/reset_password'),
        headers: {
          'Content-Type': 'application/json',
          if (token != null) 'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'admission_number': admissionNumber,
          'otp': otpController.text,
          'new_password': newPasswordController.text,
        }),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Password reset successful')),
        );
        Navigator.pop(context);
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to reset password: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    Navigator.pushReplacementNamed(context, '/login');
  }

  Future<void> _pickProfileImage() async {
    final ImagePicker picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);

    if (image != null) {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.setString('profile_image', image.path);

      setState(() {
        profileImagePath = image.path;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          children: [
            _buildProfileHeader(),
            const SizedBox(height: 20),
            _buildInfoCard(),
            const SizedBox(height: 20),
            _buildActionButtons(),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16.0),
      decoration: BoxDecoration(
        color: Theme.of(context).primaryColor,
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(30),
          bottomRight: Radius.circular(30),
        ),
      ),
      child: Column(
        children: [
          GestureDetector(
            onTap: _pickProfileImage,
            child: Stack(
              alignment: Alignment.bottomRight,
              children: [
                CircleAvatar(
                  radius: 60,
                  backgroundColor: Colors.white,
                  backgroundImage: profileImagePath.isNotEmpty
                      ? FileImage(File(profileImagePath))
                      : const AssetImage('assets/default_profile.png')
                          as ImageProvider,
                ),
                CircleAvatar(
                  radius: 18,
                  backgroundColor: Colors.white,
                  child: Icon(
                    Icons.camera_alt,
                    color: Theme.of(context).primaryColor,
                    size: 24,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 12),
          Text(
            username,
            style: const TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            '$department - ${role.toUpperCase()}',
            style: const TextStyle(
              fontSize: 16,
              color: Colors.white70,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoCard() {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16.0),
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Personal Information',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            _buildInfoRow(Icons.email, 'Email', email),
            const Divider(),
            _buildInfoRow(Icons.phone, 'Phone', phone),
            const Divider(),
            _buildInfoRow(Icons.school, 'Admission No', admissionNumber),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Icon(icon, color: Theme.of(context).primaryColor, size: 24),
          const SizedBox(width: 12),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: const TextStyle(fontSize: 12, color: Colors.grey),
              ),
              Text(
                value,
                style: const TextStyle(fontSize: 16),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        children: [
          ElevatedButton.icon(
            onPressed: _showEditProfileDialog,
            icon: const Icon(Icons.edit),
            label: const Text('Edit Profile'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Theme.of(context).primaryColor,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 12),
          ElevatedButton.icon(
            onPressed: _requestOtp,
            icon: const Icon(Icons.lock),
            label: const Text('Change Password'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 12),
          ElevatedButton.icon(
            onPressed: _logout,
            icon: const Icon(Icons.logout),
            label: const Text('Logout'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
              minimumSize: const Size(double.infinity, 50),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
            ),
          ),
        ],
      ),
    );
  }

  void _showEditProfileDialog() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('jwt_token');

    if (token == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please log in to edit profile')),
      );
      return;
    }

    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Edit Profile',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: usernameController,
                  decoration: InputDecoration(
                    labelText: 'Username',
                    prefixIcon: const Icon(Icons.person),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: phoneController,
                  decoration: InputDecoration(
                    labelText: 'Phone Number',
                    prefixIcon: const Icon(Icons.phone),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  keyboardType: TextInputType.phone,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Cancel',
                          style: TextStyle(color: Colors.grey)),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _updateUserData,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text('Save'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void _showResetPasswordDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Reset Password',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: otpController,
                  decoration: InputDecoration(
                    labelText: 'Enter OTP',
                    prefixIcon: const Icon(Icons.mail),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  keyboardType: TextInputType.number,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: newPasswordController,
                  decoration: InputDecoration(
                    labelText: 'New Password',
                    prefixIcon: const Icon(Icons.lock),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                  obscureText: true,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Cancel',
                          style: TextStyle(color: Colors.grey)),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _resetPassword,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: const Text('Reset'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

============================

frontend/lib/student_screens/student_academics_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../utils/network_config.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'package:open_file/open_file.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:file_picker/file_picker.dart';
import 'package:http/http.dart' show MultipartRequest;

class StudentAcademicsPage extends StatefulWidget {
  const StudentAcademicsPage({super.key});

  @override
  _StudentAcademicsPageState createState() => _StudentAcademicsPageState();
}

class _StudentAcademicsPageState extends State<StudentAcademicsPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  String? _token;
  String? _semester;
  String? _departmentCode;
  List<Map<String, dynamic>> _subjects = [];
  List<Map<String, dynamic>> _notes = [];
  List<Map<String, dynamic>> _timetables = [];
  List<Map<String, dynamic>> _assignments = [];
  bool _isLoading = true;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _loadAuthData();
  }

  Future<void> _loadAuthData() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _token = prefs.getString('jwt_token');
      _semester = prefs.getString('semester');
      _departmentCode = prefs.getString('departmentcode');
      print('Token: $_token, Semester: $_semester, Dept: $_departmentCode');
    });
    if (_token != null && _semester != null && _departmentCode != null) {
      _fetchData();
    } else {
      setState(() {
        _isLoading = false;
        _errorMessage = 'Authentication data missing. Please log in again.';
      });
    }
  }

  Future<void> _fetchData() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    // Fetch Subjects
    try {
      final subjectsResponse = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/subjects'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print(
          'Subjects Response: ${subjectsResponse.statusCode} - ${subjectsResponse.body}');
      if (subjectsResponse.statusCode == 200) {
        final subjectsData = jsonDecode(subjectsResponse.body);
        setState(() {
          _subjects = subjectsData is List
              ? List<Map<String, dynamic>>.from(subjectsData)
              : List<Map<String, dynamic>>.from(subjectsData['subjects'] ?? []);
          print('Parsed Subjects: $_subjects');
        });
        if (_subjects.isEmpty) {
          print(
              'No subjects found for semester=$_semester, dept=$_departmentCode');
        }
      } else {
        setState(() {
          _errorMessage = 'Failed to load subjects: ${subjectsResponse.body}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching subjects: $e';
      });
      print('Subjects Fetch Error: $e');
    }

    // Fetch Notes
    try {
      final notesResponse = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/notes'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print(
          'Notes Response: ${notesResponse.statusCode} - ${notesResponse.body}');
      if (notesResponse.statusCode == 200) {
        final notesData = jsonDecode(notesResponse.body);
        setState(() {
          _notes = notesData is List
              ? List<Map<String, dynamic>>.from(notesData)
              : List<Map<String, dynamic>>.from(notesData['notes'] ?? []);
          print('Parsed Notes: $_notes');
        });
        if (_notes.isEmpty) {
          print(
              'No notes found for semester=$_semester, dept=$_departmentCode');
        }
      } else {
        setState(() {
          _errorMessage = _errorMessage != null
              ? '$_errorMessage\nFailed to load notes: ${notesResponse.body}'
              : 'Failed to load notes: ${notesResponse.body}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = _errorMessage != null
            ? '$_errorMessage\nError fetching notes: $e'
            : 'Error fetching notes: $e';
      });
      print('Notes Fetch Error: $e');
    }

    // Fetch Timetables
    try {
      final timetableResponse = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/timetable'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print(
          'Timetable Response: ${timetableResponse.statusCode} - ${timetableResponse.body}');
      if (timetableResponse.statusCode == 200) {
        final timetableData = jsonDecode(timetableResponse.body);
        setState(() {
          _timetables = timetableData is List
              ? List<Map<String, dynamic>>.from(timetableData)
              : List<Map<String, dynamic>>.from(
                  timetableData['timetables'] ?? []);
          print('Parsed Timetables: $_timetables');
        });
        if (_timetables.isEmpty) {
          print(
              'No timetables found for semester=$_semester, dept=$_departmentCode');
        }
      } else {
        setState(() {
          _errorMessage = _errorMessage != null
              ? '$_errorMessage\nFailed to load timetable: ${timetableResponse.body}'
              : 'Failed to load timetable: ${timetableResponse.body}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = _errorMessage != null
            ? '$_errorMessage\nError fetching timetable: $e'
            : 'Error fetching timetable: $e';
      });
      print('Timetable Fetch Error: $e');
    }

    // Fetch Assignments
    try {
      final assignmentsResponse = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/students/assignments'),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print(
          'Assignments Response: ${assignmentsResponse.statusCode} - ${assignmentsResponse.body}');
      if (assignmentsResponse.statusCode == 200) {
        final assignmentsData = jsonDecode(assignmentsResponse.body);
        setState(() {
          _assignments = List<Map<String, dynamic>>.from(
              assignmentsData['assignments'] ?? []);
          print('Parsed Assignments: $_assignments');
        });
        if (_assignments.isEmpty) {
          print('No assignments found for dept=$_departmentCode');
        }
      } else {
        setState(() {
          _errorMessage = _errorMessage != null
              ? '$_errorMessage\nFailed to load assignments: ${assignmentsResponse.body}'
              : 'Failed to load assignments: ${assignmentsResponse.body}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = _errorMessage != null
            ? '$_errorMessage\nError fetching assignments: $e'
            : 'Error fetching assignments: $e';
      });
      print('Assignments Fetch Error: $e');
    }

    setState(() {
      _isLoading = false;
    });
  }

  Future<void> _downloadFile(String filename, String type) async {
    if (Platform.isAndroid) {
      var status = await Permission.storage.request();
      if (!status.isGranted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Storage permission denied')),
        );
        return;
      }
    }

    try {
      final endpoint = type == 'notes'
          ? '/api/students/download/notes/$filename'
          : type == 'timetable'
              ? '/api/students/download/timetable/$filename'
              : '/api/students/download/assignments/$filename';
      final url = '${NetworkConfig.getBaseUrl()}$endpoint';
      print('Downloading from: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: {'Authorization': 'Bearer $_token'},
      );
      print('Response Status: ${response.statusCode}');
      print('Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final directory = await getApplicationDocumentsDirectory();
        final filePath = '${directory.path}/$filename';
        print('Saving to: $filePath');

        final file = File(filePath);
        await file.writeAsBytes(response.bodyBytes);
        print('File written successfully');

        final result = await OpenFile.open(filePath);
        if (result.type == ResultType.done) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Downloaded and opened $filename')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Downloaded $filename to $filePath')),
          );
        }
      } else {
        throw Exception(
            'Failed to download file: Status ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('Download Error: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error downloading file: $e')),
      );
    }
  }

  Future<void> _submitAssignment({
    required String subjectCode,
    required String staffName,
    required int assignmentNumber,
    required String semester,
    required PlatformFile file,
  }) async {
    try {
      var request = MultipartRequest(
        'POST',
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/students/assignments/create-and-submit'),
      );
      request.headers['Authorization'] = 'Bearer $_token';
      request.fields['subject_code'] = subjectCode;
      request.fields['staff_name'] = staffName;
      request.fields['assignment_number'] = assignmentNumber.toString();
      // Removed 'semester' field as backend doesn't expect it
      request.files.add(await http.MultipartFile.fromPath('file', file.path!));
      final response = await request.send();
      final responseBody = await response.stream.bytesToString();

      print('Submission Response: ${response.statusCode} - $responseBody');
      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Assignment submitted successfully!')),
        );
        await _fetchData(); // Refresh assignments
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to submit: $responseBody')),
        );
      }
    } catch (e) {
      print('Submission Error: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error submitting assignment: $e')),
      );
    }
  }

  Widget _buildTabContent(List<Map<String, dynamic>> items, String type) {
    if (type == 'assignments') {
      return Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: ElevatedButton.icon(
              onPressed: () async {
                await showDialog(
                  context: context,
                  builder: (context) {
                    String? selectedSubjectName;
                    String? selectedSubjectCode;
                    String? selectedStaffName;
                    int? selectedAssignmentNumber;
                    PlatformFile? selectedFile;

                    return StatefulBuilder(
                      builder: (context, setState) {
                        return AlertDialog(
                          title: const Text('Submit Assignment'),
                          content: SingleChildScrollView(
                            child: Column(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                DropdownButton<String>(
                                  value: selectedSubjectName,
                                  hint: const Text('Select Subject'),
                                  isExpanded: true,
                                  items: _subjects.map((subject) {
                                    return DropdownMenuItem<String>(
                                      value: subject['subject_name'],
                                      child: Text(subject['subject_name']),
                                    );
                                  }).toList(),
                                  onChanged: (value) {
                                    setState(() {
                                      selectedSubjectName = value;
                                      final subject = _subjects.firstWhere(
                                          (s) => s['subject_name'] == value);
                                      selectedSubjectCode =
                                          subject['subject_code'];
                                      selectedStaffName =
                                          subject['instructor_name'];
                                      print(
                                          'Selected: $selectedSubjectName, Code: $selectedSubjectCode, Staff: $selectedStaffName');
                                    });
                                  },
                                ),
                                const SizedBox(height: 10),
                                TextField(
                                  controller: TextEditingController(
                                      text: selectedSubjectCode),
                                  readOnly: true,
                                  decoration: const InputDecoration(
                                    labelText: 'Subject Code',
                                    border: OutlineInputBorder(),
                                  ),
                                ),
                                const SizedBox(height: 10),
                                TextField(
                                  controller: TextEditingController(
                                      text: selectedStaffName),
                                  readOnly: true,
                                  decoration: const InputDecoration(
                                    labelText: 'Staff Name',
                                    border: OutlineInputBorder(),
                                  ),
                                ),
                                const SizedBox(height: 10),
                                DropdownButton<int>(
                                  value: selectedAssignmentNumber,
                                  hint: const Text('Select Assignment Number'),
                                  isExpanded: true,
                                  items: [1, 2, 3].map((number) {
                                    return DropdownMenuItem<int>(
                                      value: number,
                                      child: Text(number.toString()),
                                    );
                                  }).toList(),
                                  onChanged: (value) {
                                    setState(() {
                                      selectedAssignmentNumber = value;
                                      print('Assignment Number: $value');
                                    });
                                  },
                                ),
                                const SizedBox(height: 10),
                                ElevatedButton(
                                  onPressed: () async {
                                    FilePickerResult? result =
                                        await FilePicker.platform.pickFiles(
                                      type: FileType.custom,
                                      allowedExtensions: ['pdf'],
                                    );
                                    if (result != null) {
                                      setState(() {
                                        selectedFile = result.files.first;
                                        print('File: ${selectedFile!.name}');
                                      });
                                    }
                                  },
                                  child: Text(selectedFile == null
                                      ? 'Select PDF File'
                                      : 'File: ${selectedFile!.name}'),
                                ),
                              ],
                            ),
                          ),
                          actions: [
                            TextButton(
                              onPressed: () => Navigator.pop(context),
                              child: const Text('Cancel'),
                            ),
                            TextButton(
                              onPressed: selectedSubjectCode != null &&
                                      selectedStaffName != null &&
                                      selectedAssignmentNumber != null &&
                                      selectedFile != null
                                  ? () {
                                      print(
                                          'Submitting: Code=$selectedSubjectCode, Staff=$selectedStaffName, Number=$selectedAssignmentNumber, File=$selectedFile');
                                      Navigator.pop(context);
                                      _submitAssignment(
                                        subjectCode: selectedSubjectCode!,
                                        staffName: selectedStaffName!,
                                        assignmentNumber:
                                            selectedAssignmentNumber!,
                                        semester: _semester!,
                                        file: selectedFile!,
                                      );
                                    }
                                  : null,
                              child: const Text('Submit'),
                            ),
                          ],
                        );
                      },
                    );
                  },
                );
              },
              icon: const Icon(Icons.upload_file),
              label: const Text('Submit Assignment'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).primaryColor,
                foregroundColor: Colors.white,
              ),
            ),
          ),
          Expanded(
            child: items.isEmpty
                ? const Center(
                    child: Text(
                      'No assignments submitted yet',
                      style: TextStyle(color: Colors.grey),
                    ),
                  )
                : ListView.builder(
                    itemCount: items.length,
                    itemBuilder: (context, index) {
                      final item = items[index];
                      return Card(
                        elevation: 2,
                        margin: const EdgeInsets.symmetric(
                            vertical: 5, horizontal: 10),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10)),
                        child: ListTile(
                          title: Text(
                            'Assignment ${item['assignment_number']} - ${item['subject_code']}',
                            style: const TextStyle(fontWeight: FontWeight.bold),
                          ),
                          subtitle: Text(
                            'Staff: ${item['staff_name']} | Submitted At: ${item['submitted_at']?.substring(0, 10) ?? 'N/A'}',
                          ),
                          trailing: item['submission_filename'] != null
                              ? IconButton(
                                  icon: const Icon(Icons.download,
                                      color: Colors.blue),
                                  onPressed: () => _downloadFile(
                                      item['submission_filename'], type),
                                )
                              : null,
                        ),
                      );
                    },
                  ),
          ),
        ],
      );
    }
    if (items.isEmpty) {
      return Center(
        child: Text(
          'No ${type == 'subjects' ? 'syllabus' : type} available for Semester $_semester',
          style: const TextStyle(color: Colors.grey),
        ),
      );
    }
    return ListView.builder(
      itemCount: items.length,
      itemBuilder: (context, index) {
        final item = items[index];
        return Card(
          elevation: 2,
          margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          child: ListTile(
            title: Text(
              type == 'subjects'
                  ? '${item['subject_code'] ?? 'Unknown Code'} - ${item['subject_name'] ?? 'Unknown Name'}'
                  : item['filename'] ?? 'Unknown File',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            subtitle: Text(
              type == 'subjects'
                  ? 'Credits: ${item['credits'] ?? 'N/A'} | Instructor: ${item['instructor_name'] ?? 'N/A'}'
                  : 'Uploaded: ${item['uploaded_at']?.substring(0, 10) ?? 'N/A'}',
            ),
            trailing: (type == 'notes' || type == 'timetable')
                ? IconButton(
                    icon: const Icon(Icons.download, color: Colors.blue),
                    onPressed: () =>
                        _downloadFile(item['filename'] ?? '', type),
                  )
                : null,
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TabBar(
          controller: _tabController,
          labelColor: Colors.blueAccent,
          unselectedLabelColor: Colors.grey,
          indicatorColor: Colors.blueAccent,
          tabs: const [
            Tab(text: 'Syllabus'),
            Tab(text: 'Notes'),
            Tab(text: 'Timetable'),
            Tab(text: 'Assignments'),
          ],
        ),
        Expanded(
          child: _isLoading
              ? const Center(child: CircularProgressIndicator())
              : _errorMessage != null
                  ? Center(child: Text(_errorMessage!))
                  : RefreshIndicator(
                      onRefresh: _fetchData,
                      child: TabBarView(
                        controller: _tabController,
                        children: [
                          _buildTabContent(_subjects, 'subjects'),
                          _buildTabContent(_notes, 'notes'),
                          _buildTabContent(_timetables, 'timetable'),
                          _buildTabContent(_assignments, 'assignments'),
                        ],
                      ),
                    ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }
}

============================

frontend/lib/student_screens/students_page.dart:

contents:
import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/network_config.dart';

class StudentsPage extends StatefulWidget {
  @override
  _StudentsPageState createState() => _StudentsPageState();
}

class _StudentsPageState extends State<StudentsPage> {
  List<dynamic> _students = [];
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    fetchUsers();
  }

  Future<void> fetchUsers() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      print('StudentsPage: Token = $token');
      if (token == null) {
        print('StudentsPage: No token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      final url = Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/users');
      print('StudentsPage: Full URL = $url');
      final response = await http.get(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      print(
          'StudentsPage: Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        List<dynamic> users = json.decode(response.body);
        print('StudentsPage: Users fetched: ${users.length}');
        setState(() {
          _students = users.where((user) => user['role'] == 'student').toList();
          _errorMessage = null;
          print('StudentsPage: Students filtered: ${_students.length}');
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load students: ${response.statusCode}';
          print('StudentsPage: Error: $_errorMessage');
        });
        if (response.statusCode == 401 || response.statusCode == 403) {
          _redirectToLogin();
        }
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching students: $e';
        print('StudentsPage: Exception: $e');
      });
    }
  }

  Future<void> deleteUser(String admissionNumber) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/admin/delete_user/$admissionNumber');
      final response = await http.delete(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        setState(() {
          _students.removeWhere(
              (student) => student['admission_number'] == admissionNumber);
          _errorMessage = null;
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to delete student: ${response.statusCode}';
        });
        if (response.statusCode == 401 || response.statusCode == 403) {
          _redirectToLogin();
        }
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error deleting student: $e';
      });
    }
  }

  Future<void> updateUser(String admissionNumber, String username, String email,
      String role) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/admin/update_user/$admissionNumber');
      final response = await http.put(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({"username": username, "email": email, "role": role}),
      );

      if (response.statusCode == 200) {
        await fetchUsers();
      } else {
        setState(() {
          _errorMessage = 'Failed to update student: ${response.statusCode}';
        });
        if (response.statusCode == 401 || response.statusCode == 403) {
          _redirectToLogin();
        }
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error updating student: $e';
      });
    }
  }

  void showEditDialog(Map<String, dynamic> student) {
    TextEditingController usernameController =
        TextEditingController(text: student['username']);
    TextEditingController emailController =
        TextEditingController(text: student['email']);

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Edit Student"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: usernameController,
                decoration: const InputDecoration(labelText: "Username"),
              ),
              TextField(
                controller: emailController,
                decoration: const InputDecoration(labelText: "Email"),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () async {
                await updateUser(
                  student['admission_number'],
                  usernameController.text,
                  emailController.text,
                  'student',
                );
                Navigator.pop(context);
              },
              child: const Text("Save"),
            ),
          ],
        );
      },
    );
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Students")),
      body: _errorMessage != null
          ? Center(child: Text(_errorMessage!))
          : _students.isEmpty
              ? const Center(child: Text("No students found"))
              : ListView.builder(
                  itemCount: _students.length,
                  itemBuilder: (context, index) {
                    final student = _students[index];
                    return ListTile(
                      leading: const Icon(Icons.school),
                      title: Text(student['username'] ?? 'Unknown'),
                      subtitle: Text("Email: ${student['email'] ?? 'N/A'}"),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: const Icon(Icons.edit),
                            onPressed: () => showEditDialog(student),
                          ),
                          IconButton(
                            icon: const Icon(Icons.delete),
                            onPressed: () =>
                                deleteUser(student['admission_number']),
                          ),
                        ],
                      ),
                    );
                  },
                ),
    );
  }
}

============================

frontend/lib/utils/network_config.dart:

contents:
import 'dart:io';

class NetworkConfig {
  static String getBaseUrl() {
    if (Platform.isAndroid) {
      return "http://10.0.2.2:5001"; // ✅ Android Emulator
    } else if (Platform.isIOS) {
      return "http://localhost:5001"; // ✅ iOS Simulator
    } else {
      return "http://192.168.1.7:5001"; // ✅ Change this to your local backend IP
    }
  }
}

