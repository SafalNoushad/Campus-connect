frontend/lib/admin_screens/departments_page.dart:

contents:
import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../../utils/network_config.dart';
import '../screens/admin_dashboard.dart';

class DepartmentsPage extends StatefulWidget {
  const DepartmentsPage({super.key});

  @override
  DepartmentsPageState createState() => DepartmentsPageState();
}

class DepartmentsPageState extends State<DepartmentsPage> {
  List<dynamic> _departments = [];
  String? _errorMessage;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    fetchDepartments();
  }

  Future<void> fetchDepartments() async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        print('No JWT token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/departments/departments');
      print('Fetching departments from: $url with token: $token');
      final response = await http.get(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      print(
          'Fetch Departments Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        setState(() {
          _departments = json.decode(response.body);
          _errorMessage = null;
          print('Departments loaded: $_departments');
        });
      } else if (response.statusCode == 401 || response.statusCode == 403) {
        print('Unauthorized access detected (401/403), redirecting to login');
        _redirectToLogin();
        setState(() {
          _errorMessage = 'Unauthorized access. Please log in as an admin.';
        });
      } else {
        setState(() {
          _errorMessage =
              'Failed to load departments: ${response.statusCode} - ${response.body}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching departments: $e';
      });
      print('Fetch error: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> createDepartment(String code, String name) async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        print('No JWT token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/departments/departments');
      print('Creating department at: $url with code: $code, name: $name');
      final response = await http.post(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'departmentcode': code,
          'departmentname': name,
        }),
      );

      print(
          'Create Department Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 201) {
        await fetchDepartments();
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Department created successfully')),
          );
        }
      } else {
        String errorMsg = response.statusCode == 403
            ? 'Admin access required to create departments.'
            : 'Failed to create department: ${response.statusCode} - ${response.body}';
        setState(() {
          _errorMessage = errorMsg;
        });
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(errorMsg)),
          );
        }
      }
    } catch (e) {
      String errorMsg = 'Error creating department: $e';
      setState(() {
        _errorMessage = errorMsg;
      });
      print('Create error: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMsg)),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> updateDepartment(
      String departmentcode, String code, String name) async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        print('No JWT token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      // Verify departmentcode exists in _departments
      final deptExists =
          _departments.any((dept) => dept['departmentcode'] == departmentcode);
      if (!deptExists) {
        setState(() {
          _errorMessage = 'Department $departmentcode not found in local list.';
        });
        print(
            'Local check: Department $departmentcode not found in _departments');
        await fetchDepartments(); // Refresh to sync with backend
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(_errorMessage ?? 'Department not found')),
          );
        }
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/departments/departments/$departmentcode');
      print(
          'Updating department at: $url with original code: $departmentcode, new code: $code, name: $name');
      final response = await http.put(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'departmentcode': code,
          'departmentname': name,
        }),
      );

      print(
          'Update Department Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        await fetchDepartments();
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Department updated successfully')),
          );
        }
      } else {
        String errorMsg;
        if (response.statusCode == 403) {
          errorMsg = 'Admin access required to update departments.';
        } else if (response.statusCode == 404) {
          errorMsg = 'Department $departmentcode not found on server.';
          await fetchDepartments(); // Refresh list
        } else {
          errorMsg =
              'Failed to update department: ${response.statusCode} - ${response.body}';
        }
        setState(() {
          _errorMessage = errorMsg;
        });
        print('Update error: $errorMsg');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(errorMsg)),
          );
        }
      }
    } catch (e) {
      String errorMsg = 'Error updating department: $e';
      setState(() {
        _errorMessage = errorMsg;
      });
      print('Update exception: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMsg)),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> deleteDepartment(String departmentcode) async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        print('No JWT token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      // Verify departmentcode exists in _departments
      final deptExists =
          _departments.any((dept) => dept['departmentcode'] == departmentcode);
      if (!deptExists) {
        setState(() {
          _errorMessage = 'Department $departmentcode not found in local list.';
        });
        print(
            'Local check: Department $departmentcode not found in _departments');
        await fetchDepartments(); // Refresh to sync with backend
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(_errorMessage ?? 'Department not found')),
          );
        }
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/departments/departments/$departmentcode');
      print('Deleting department at: $url with code: $departmentcode');
      final response = await http.delete(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      print(
          'Delete Department Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        setState(() {
          _departments
              .removeWhere((dept) => dept['departmentcode'] == departmentcode);
          _errorMessage = null;
        });
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Department deleted successfully')),
          );
        }
      } else {
        String errorMsg;
        if (response.statusCode == 403) {
          errorMsg = 'Admin access required to delete departments.';
        } else if (response.statusCode == 404) {
          errorMsg = 'Department $departmentcode not found on server.';
          await fetchDepartments(); // Refresh list
        } else {
          errorMsg =
              'Failed to delete department: ${response.statusCode} - ${response.body}';
        }
        setState(() {
          _errorMessage = errorMsg;
        });
        print('Delete error: $errorMsg');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(errorMsg)),
          );
        }
      }
    } catch (e) {
      String errorMsg = 'Error deleting department: $e';
      setState(() {
        _errorMessage = errorMsg;
      });
      print('Delete exception: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMsg)),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _redirectToLogin() {
    if (mounted) {
      Navigator.pushReplacementNamed(context, '/login');
    }
  }

  void showCreateDialog() {
    TextEditingController codeController = TextEditingController();
    TextEditingController nameController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Container(
            padding: const EdgeInsets.all(20),
            width: MediaQuery.of(context).size.width * 0.9,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      "Add Department",
                      style:
                          TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                    ),
                    IconButton(
                      icon: const Icon(Icons.close, color: Colors.grey),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: codeController,
                  decoration: InputDecoration(
                    labelText: "Department Code",
                    prefixIcon: const Icon(Icons.code),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(
                    labelText: "Department Name",
                    prefixIcon: const Icon(Icons.domain),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      style: TextButton.styleFrom(
                        foregroundColor: Colors.grey,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                      ),
                      child: const Text("Cancel"),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _isLoading
                          ? null
                          : () async {
                              if (codeController.text.isEmpty ||
                                  nameController.text.isEmpty) {
                                if (mounted) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                        content:
                                            Text("Please fill all fields")),
                                  );
                                }
                                return;
                              }
                              await createDepartment(
                                  codeController.text, nameController.text);
                              if (mounted) Navigator.pop(context);
                            },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: _isLoading
                          ? const SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                  color: Colors.white, strokeWidth: 2),
                            )
                          : const Text("Save",
                              style: TextStyle(color: Colors.white)),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void showEditDialog(Map<String, dynamic> department) {
    if (department['departmentcode'] == null ||
        department['departmentname'] == null) {
      print('Invalid department data: $department');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Invalid department data')),
      );
      return;
    }

    TextEditingController codeController =
        TextEditingController(text: department['departmentcode']);
    TextEditingController nameController =
        TextEditingController(text: department['departmentname']);

    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: Container(
            padding: const EdgeInsets.all(20),
            width: MediaQuery.of(context).size.width * 0.9,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      "Edit Department",
                      style:
                          TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                    ),
                    IconButton(
                      icon: const Icon(Icons.close, color: Colors.grey),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: codeController,
                  decoration: InputDecoration(
                    labelText: "Department Code",
                    prefixIcon: const Icon(Icons.code),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(
                    labelText: "Department Name",
                    prefixIcon: const Icon(Icons.domain),
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12)),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      style: TextButton.styleFrom(
                        foregroundColor: Colors.grey,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                      ),
                      child: const Text("Cancel"),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _isLoading
                          ? null
                          : () async {
                              if (codeController.text.isEmpty ||
                                  nameController.text.isEmpty) {
                                if (mounted) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                        content:
                                            Text("Please fill all fields")),
                                  );
                                }
                                return;
                              }
                              await updateDepartment(
                                  department['departmentcode'],
                                  codeController.text,
                                  nameController.text);
                              if (mounted) Navigator.pop(context);
                            },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                      ),
                      child: _isLoading
                          ? const SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                  color: Colors.white, strokeWidth: 2),
                            )
                          : const Text("Save",
                              style: TextStyle(color: Colors.white)),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Departments"),
        backgroundColor: Theme.of(context).primaryColor,
        elevation: 4,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => AdminDashboard()),
            );
          },
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: _isLoading ? null : showCreateDialog,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _errorMessage != null
              ? Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        _errorMessage ?? 'An unknown error occurred',
                        style: const TextStyle(color: Colors.red),
                      ),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: fetchDepartments,
                        child: const Text("Retry"),
                      ),
                    ],
                  ),
                )
              : _departments.isEmpty
                  ? const Center(
                      child: Text("No departments available",
                          style: TextStyle(fontSize: 16)))
                  : Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: ListView.builder(
                        itemCount: _departments.length,
                        itemBuilder: (context, index) {
                          final department = _departments[index];
                          return Card(
                            elevation: 2,
                            margin: const EdgeInsets.symmetric(vertical: 6.0),
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12)),
                            child: ListTile(
                              leading: CircleAvatar(
                                backgroundColor: Theme.of(context).primaryColor,
                                child: const Icon(Icons.domain,
                                    color: Colors.white),
                              ),
                              title: Text(
                                department['departmentname'] ?? 'Unknown',
                                style: const TextStyle(
                                    fontSize: 18, fontWeight: FontWeight.bold),
                              ),
                              subtitle: Text(
                                "Code: ${department['departmentcode'] ?? 'N/A'}",
                                style: TextStyle(
                                    fontSize: 14, color: Colors.grey[700]),
                              ),
                              trailing: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  IconButton(
                                    icon: const Icon(Icons.edit,
                                        color: Colors.blue),
                                    onPressed: _isLoading
                                        ? null
                                        : () => showEditDialog(department),
                                    tooltip: 'Edit Department',
                                  ),
                                  IconButton(
                                    icon: const Icon(Icons.delete,
                                        color: Colors.red),
                                    onPressed: _isLoading
                                        ? null
                                        : () => deleteDepartment(
                                            department['departmentcode']),
                                    tooltip: 'Delete Department',
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      ),
                    ),
    );
  }
}

============================

frontend/lib/admin_screens/users_page.dart:

contents:
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../screens/admin_dashboard.dart'; // Replace with your actual admin dashboard path
import '../utils/network_config.dart'; // Replace with your actual network config path

class UsersPage extends StatefulWidget {
  const UsersPage({super.key});

  @override
  _UsersPageState createState() => _UsersPageState();
}

class _UsersPageState extends State<UsersPage> {
  List<Map<String, dynamic>> _users = [];
  List<Map<String, dynamic>> _departments = [];
  String? _errorMessage;
  bool _isLoadingDepartments = true; // Added to track department loading state

  @override
  void initState() {
    super.initState();
    fetchUsers();
    fetchDepartments().then((_) {
      setState(() {
        _isLoadingDepartments = false; // Update loading state when done
      });
    });
  }

  // Fetch all users from the backend and filter out admins
  Future<void> fetchUsers() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/users'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        setState(() {
          _users = List<Map<String, dynamic>>.from(jsonDecode(response.body))
              .where((user) => user['role'] != 'admin')
              .toList();
          _errorMessage = null;
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load users: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching users: $e';
      });
    }
  }

  // Fetch departments for the dropdown
  // Fetch departments for the dropdown
  Future<void> fetchDepartments() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/departments/departments');
      print('Fetching departments from: $url'); // Log URL
      print('Using token: $token'); // Log token

      final response = await http.get(
        url,
        headers: {'Authorization': 'Bearer $token'},
      );

      print(
          'Departments Response: ${response.statusCode} - ${response.body}'); // Log response

      if (response.statusCode == 200) {
        setState(() {
          _departments =
              List<Map<String, dynamic>>.from(jsonDecode(response.body));
          _errorMessage =
              _departments.isEmpty ? 'No departments available' : null;
        });
      } else {
        setState(() {
          _errorMessage =
              'Failed to load departments: ${response.statusCode} - ${response.body}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching departments: $e';
      });
    }
  }

  // Update a user's details
  Future<void> updateUser(
      String admissionNumber, Map<String, dynamic> userData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.put(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/update_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(userData),
      );

      if (response.statusCode == 200) {
        await fetchUsers();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('User updated successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to update user: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error updating user: $e';
      });
    }
  }

  // Delete a user
  Future<void> deleteUser(String admissionNumber) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/delete_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        await fetchUsers();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('User deleted successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to delete user: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error deleting user: $e';
      });
    }
  }

  // Add a new user
  Future<void> addUser(Map<String, dynamic> userData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/add_user'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(userData),
      );

      if (response.statusCode == 201) {
        await fetchUsers();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('User added successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to add user: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error adding user: $e';
      });
    }
  }

  // Redirect to login if token is missing
  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  // Show dialog to edit user details with enhanced UI
  void showEditDialog(Map<String, dynamic> user) {
    TextEditingController usernameController =
        TextEditingController(text: user['username']);
    TextEditingController emailController =
        TextEditingController(text: user['email']);
    TextEditingController phoneController =
        TextEditingController(text: user['phone_number'] ?? '');
    TextEditingController batchController =
        TextEditingController(text: user['batch'] ?? '');
    String role = user['role'];
    String? departmentcode = user['departmentcode'];

    showDialog(
      context: context,
      builder: (dialogContext) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: StatefulBuilder(
            builder: (dialogContext, setDialogState) {
              return Container(
                padding: const EdgeInsets.all(20),
                width: MediaQuery.of(context).size.width * 0.9,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          "Edit User",
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        IconButton(
                          icon: const Icon(Icons.close, color: Colors.grey),
                          onPressed: () => Navigator.pop(dialogContext),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    TextField(
                      controller: usernameController,
                      decoration: InputDecoration(
                        labelText: "Username",
                        prefixIcon: const Icon(Icons.person_outline),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: emailController,
                      decoration: InputDecoration(
                        labelText: "Email",
                        prefixIcon: const Icon(Icons.email_outlined),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: phoneController,
                      decoration: InputDecoration(
                        labelText: "Phone Number (Optional)",
                        prefixIcon: const Icon(Icons.phone_outlined),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    DropdownButtonFormField<String>(
                      value: role,
                      items: ['hod', 'staff', 'student']
                          .map((r) => DropdownMenuItem(
                                value: r,
                                child: Text(r.toUpperCase()),
                              ))
                          .toList(),
                      onChanged: (value) {
                        setDialogState(() {
                          role = value!;
                        });
                      },
                      decoration: InputDecoration(
                        labelText: "Role",
                        prefixIcon: Icon(_getRoleIcon(role)),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    if (role == 'student') ...[
                      const SizedBox(height: 12),
                      TextField(
                        controller: batchController,
                        decoration: InputDecoration(
                          labelText: "Batch (e.g., 2021-2025)",
                          prefixIcon: const Icon(Icons.calendar_today),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          filled: true,
                          fillColor: Colors.grey[100],
                        ),
                      ),
                    ],
                    const SizedBox(height: 12),
                    _departments.isEmpty
                        ? Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Text(
                                "Failed to load departments",
                                style: TextStyle(color: Colors.red),
                              ),
                              const SizedBox(width: 8),
                              TextButton(
                                onPressed: () {
                                  setDialogState(() {
                                    _isLoadingDepartments = true;
                                  });
                                  fetchDepartments().then((_) {
                                    setDialogState(() {
                                      _isLoadingDepartments = false;
                                    });
                                  });
                                },
                                child: const Text("Retry"),
                              ),
                            ],
                          )
                        : DropdownButtonFormField<String>(
                            value: departmentcode,
                            items: _departments.map((dept) {
                              return DropdownMenuItem<String>(
                                value: dept['departmentcode'],
                                child: Text(dept['departmentname']),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setDialogState(() {
                                departmentcode = value;
                              });
                            },
                            decoration: InputDecoration(
                              labelText: "Department",
                              prefixIcon: const Icon(Icons.domain),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              filled: true,
                              fillColor: Colors.grey[100],
                            ),
                          ),
                    const SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: () => Navigator.pop(dialogContext),
                          style: TextButton.styleFrom(
                            foregroundColor: Colors.grey,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                          ),
                          child: const Text("Cancel"),
                        ),
                        const SizedBox(width: 8),
                        ElevatedButton(
                          onPressed: () async {
                            if (usernameController.text.isEmpty ||
                                emailController.text.isEmpty ||
                                departmentcode == null) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                    content: Text(
                                        "Please fill all required fields")),
                              );
                              return;
                            }
                            await updateUser(user['admission_number'], {
                              'username': usernameController.text,
                              'email': emailController.text,
                              'phone_number': phoneController.text.isEmpty
                                  ? null
                                  : phoneController.text,
                              'role': role,
                              'batch': role == 'student'
                                  ? batchController.text
                                  : null,
                              'departmentcode': departmentcode,
                            });
                            Navigator.pop(dialogContext);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Theme.of(context).primaryColor,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: const Text("Save",
                              style: TextStyle(color: Colors.white)),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            },
          ),
        );
      },
    );
  }

  // Show dialog to add a new user
  void showAddUserDialog() async {
    // Ensure departments are loaded before showing the dialog
    if (_departments.isEmpty && _isLoadingDepartments) {
      await fetchDepartments();
      setState(() {
        _isLoadingDepartments = false;
      });
    }

    TextEditingController admissionNumberController = TextEditingController();
    TextEditingController usernameController = TextEditingController();
    TextEditingController emailController = TextEditingController();
    TextEditingController phoneController = TextEditingController();
    TextEditingController passwordController = TextEditingController();
    TextEditingController batchController = TextEditingController();
    String role = 'student'; // Default role
    String? departmentcode;

    showDialog(
      context: context,
      builder: (dialogContext) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: StatefulBuilder(
            builder: (dialogContext, setDialogState) {
              return Container(
                padding: const EdgeInsets.all(20),
                width: MediaQuery.of(context).size.width * 0.9,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          "Add New User",
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        IconButton(
                          icon: const Icon(Icons.close, color: Colors.grey),
                          onPressed: () => Navigator.pop(dialogContext),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    TextField(
                      controller: admissionNumberController,
                      decoration: InputDecoration(
                        labelText: "Admission Number",
                        prefixIcon: const Icon(Icons.badge),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: usernameController,
                      decoration: InputDecoration(
                        labelText: "Username",
                        prefixIcon: const Icon(Icons.person_outline),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: emailController,
                      decoration: InputDecoration(
                        labelText: "Email",
                        prefixIcon: const Icon(Icons.email_outlined),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: phoneController,
                      decoration: InputDecoration(
                        labelText: "Phone Number (Optional)",
                        prefixIcon: const Icon(Icons.phone_outlined),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: passwordController,
                      decoration: InputDecoration(
                        labelText: "Password",
                        prefixIcon: const Icon(Icons.lock),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                      obscureText: true,
                    ),
                    const SizedBox(height: 12),
                    DropdownButtonFormField<String>(
                      value: role,
                      items: ['hod', 'staff', 'student']
                          .map((r) => DropdownMenuItem(
                                value: r,
                                child: Text(r.toUpperCase()),
                              ))
                          .toList(),
                      onChanged: (value) {
                        setDialogState(() {
                          role = value!;
                        });
                      },
                      decoration: InputDecoration(
                        labelText: "Role",
                        prefixIcon: Icon(_getRoleIcon(role)),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    if (role == 'student') ...[
                      const SizedBox(height: 12),
                      TextField(
                        controller: batchController,
                        decoration: InputDecoration(
                          labelText: "Batch (e.g., 2021-2025)",
                          prefixIcon: const Icon(Icons.calendar_today),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          filled: true,
                          fillColor: Colors.grey[100],
                        ),
                      ),
                    ],
                    const SizedBox(height: 12),
                    _isLoadingDepartments
                        ? const Center(child: CircularProgressIndicator())
                        : _departments.isEmpty
                            ? Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  const Text(
                                    "Failed to load departments",
                                    style: TextStyle(color: Colors.red),
                                  ),
                                  const SizedBox(width: 8),
                                  TextButton(
                                    onPressed: () {
                                      setDialogState(() {
                                        _isLoadingDepartments = true;
                                      });
                                      fetchDepartments().then((_) {
                                        setDialogState(() {
                                          _isLoadingDepartments = false;
                                        });
                                      });
                                    },
                                    child: const Text("Retry"),
                                  ),
                                ],
                              )
                            : DropdownButtonFormField<String>(
                                value: departmentcode,
                                items: _departments.map((dept) {
                                  return DropdownMenuItem<String>(
                                    value: dept['departmentcode'],
                                    child: Text(dept['departmentname']),
                                  );
                                }).toList(),
                                onChanged: (value) {
                                  setDialogState(() {
                                    departmentcode = value;
                                  });
                                },
                                decoration: InputDecoration(
                                  labelText: "Department",
                                  prefixIcon: const Icon(Icons.domain),
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  filled: true,
                                  fillColor: Colors.grey[100],
                                ),
                              ),
                    const SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: () => Navigator.pop(dialogContext),
                          style: TextButton.styleFrom(
                            foregroundColor: Colors.grey,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                          ),
                          child: const Text("Cancel"),
                        ),
                        const SizedBox(width: 8),
                        ElevatedButton(
                          onPressed: _isLoadingDepartments
                              ? null
                              : () async {
                                  if (admissionNumberController.text.isEmpty ||
                                      usernameController.text.isEmpty ||
                                      emailController.text.isEmpty ||
                                      passwordController.text.isEmpty ||
                                      departmentcode == null) {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                          content: Text(
                                              "Please fill all required fields")),
                                    );
                                    return;
                                  }
                                  await addUser({
                                    'admission_number':
                                        admissionNumberController.text,
                                    'username': usernameController.text,
                                    'email': emailController.text,
                                    'phone_number': phoneController.text.isEmpty
                                        ? null
                                        : phoneController.text,
                                    'password': passwordController.text,
                                    'role': role,
                                    'batch': role == 'student'
                                        ? batchController.text
                                        : null,
                                    'departmentcode': departmentcode,
                                  });
                                  Navigator.pop(dialogContext);
                                },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Theme.of(context).primaryColor,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: const Text("Add",
                              style: TextStyle(color: Colors.white)),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            },
          ),
        );
      },
    );
  }

  // Helper method to get role-specific color
  Color _getRoleColor(String role) {
    switch (role) {
      case 'hod':
        return Colors.blueAccent;
      case 'staff':
        return Colors.green;
      case 'student':
        return Colors.orange;
      default:
        return Colors.grey;
    }
  }

  // Helper method to get role-specific icon
  IconData _getRoleIcon(String role) {
    switch (role) {
      case 'hod':
        return Icons.supervisor_account;
      case 'staff':
        return Icons.person;
      case 'student':
        return Icons.school;
      default:
        return Icons.person_outline;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Users"),
        backgroundColor: Theme.of(context).primaryColor,
        elevation: 4,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => const AdminDashboard()),
            );
          },
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => showAddUserDialog(),
          ),
        ],
      ),
      body: _errorMessage != null
          ? Center(
              child: Text(_errorMessage!,
                  style: const TextStyle(color: Colors.red)))
          : _users.isEmpty
              ? const Center(child: CircularProgressIndicator())
              : Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ListView.builder(
                    itemCount: _users.length,
                    itemBuilder: (context, index) {
                      final user = _users[index];
                      return Card(
                        elevation: 2,
                        margin: const EdgeInsets.symmetric(vertical: 6.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Row(
                            children: [
                              CircleAvatar(
                                backgroundColor: _getRoleColor(user['role']),
                                child: Icon(
                                  _getRoleIcon(user['role']),
                                  color: Colors.white,
                                ),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      user['username'] ?? 'Unknown',
                                      style: const TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      "Email: ${user['email'] ?? 'N/A'}",
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: Colors.grey[700],
                                      ),
                                    ),
                                    Text(
                                      "Role: ${user['role'].toUpperCase()}",
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: _getRoleColor(user['role']),
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    if (user['batch'] != null)
                                      Text(
                                        "Batch: ${user['batch']}",
                                        style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.grey[700],
                                        ),
                                      ),
                                  ],
                                ),
                              ),
                              Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  IconButton(
                                    icon: const Icon(Icons.edit,
                                        color: Colors.blue),
                                    onPressed: () => showEditDialog(user),
                                    tooltip: 'Edit User',
                                  ),
                                  IconButton(
                                    icon: const Icon(Icons.delete,
                                        color: Colors.red),
                                    onPressed: () =>
                                        deleteUser(user['admission_number']),
                                    tooltip: 'Delete User',
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
    );
  }
}

============================

frontend/lib/hod_screens/hod_dashboard.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../shared/department_users_page.dart';
import '../shared/department_staff_page.dart';

class HodDashboard extends StatefulWidget {
  const HodDashboard({super.key});

  @override
  _HodDashboardState createState() => _HodDashboardState();
}

class _HodDashboardState extends State<HodDashboard> {
  @override
  void initState() {
    super.initState();
  }

  Future<void> _logout(BuildContext context) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('jwt_token');
    await prefs.remove('user_role');
    await prefs.remove('departmentcode');
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("HOD Dashboard"),
        backgroundColor: Colors.blueAccent,
        elevation: 4,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => _logout(context),
            tooltip: 'Logout',
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              "Welcome, HOD!",
              style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.blueAccent),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            ElevatedButton.icon(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const DepartmentStaffPage(),
                  ),
                );
              },
              icon: const Icon(Icons.person),
              label: const Text("Manage Department Staff"),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12)),
              ),
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) =>
                        const DepartmentUsersPage(isStaffView: false),
                  ),
                );
              },
              icon: const Icon(Icons.school),
              label: const Text("Manage Department Students"),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12)),
              ),
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("HOD feature coming soon!")),
                );
              },
              icon: const Icon(Icons.check_circle),
              label: const Text("Approve Requests"),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

============================

frontend/lib/main.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'screens/splash.dart';
import 'screens/login.dart';
import 'screens/home.dart';
import 'screens/chatbot.dart';
import 'screens/admin_dashboard.dart';
import 'staff_screens/staff_dashboard.dart'; // Add StaffDashboard import
import 'hod_screens/hod_dashboard.dart'; // Add HodDashboard import

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  MyAppState createState() => MyAppState();
}

class MyAppState extends State<MyApp> {
  bool isLoading = true;
  String? jwtToken;
  Map<String, String> userData = {};

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();

    await Future.delayed(const Duration(seconds: 2));

    setState(() {
      jwtToken = prefs.getString('jwt_token');
      userData = {
        "name": prefs.getString('name') ?? "Guest",
        "email": prefs.getString('email') ?? "N/A",
        "phone": prefs.getString('phone') ?? "N/A",
        "admission_number": prefs.getString('admission_number') ?? "N/A",
        "role": prefs.getString('role') ?? "N/A",
      };
      isLoading = false;
    });

    debugPrint("✅ Loaded User Data: $userData");
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Campus Connect',
      theme: ThemeData(
        primaryColor: const Color(0xFF0C6170),
        hintColor: const Color(0xFF37BEB0),
        scaffoldBackgroundColor: const Color(0xFFDBF5F0),
      ),
      debugShowCheckedModeBanner: false,
      home: isLoading
          ? const SplashScreen()
          : jwtToken == null
              ? LoginScreen()
              : _getHomeScreenBasedOnRole(), // Updated to handle all roles
      routes: {
        '/login': (context) => LoginScreen(),
        '/home': (context) => HomeScreen(
              userData: (ModalRoute.of(context)?.settings.arguments
                      as Map<String, String>?) ??
                  {"name": "Guest"},
            ),
        '/chatbot': (context) => ChatbotPage(),
      },
    );
  }

  // New method to determine the home screen based on role
  Widget _getHomeScreenBasedOnRole() {
    switch (userData['role']) {
      case 'admin':
        return AdminDashboard();
      case 'staff':
        return const StaffDashboard();
      case 'hod':
        return const HodDashboard();
      case 'student': // Explicitly handle student role
        return HomeScreen(userData: userData);
      default:
        return LoginScreen(); // Fallback to login for unknown roles
    }
  }
}

============================

frontend/lib/screens/academics_page.dart:

contents:
import 'package:flutter/material.dart';

class AcademicsPage extends StatelessWidget {
  const AcademicsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return ListView(
      children: [
        _buildSection(context, 'Courses', Icons.book, [
          'Mathematics',
          'Physics',
          'Computer Science',
          'Literature',
        ]),
        _buildSection(context, 'Assignments', Icons.assignment, [
          'Math Homework - Due 05/15',
          'Physics Lab Report - Due 05/18',
          'CS Project - Due 05/20',
          'Literature Essay - Due 05/22',
        ]),
        _buildSection(context, 'Exams', Icons.event, [
          'Midterm Exams - 06/01 to 06/05',
          'Final Exams - 07/15 to 07/20',
        ]),
        _buildSection(context, 'Resources', Icons.folder, [
          'Online Library',
          'Study Groups',
          'Tutoring Services',
          'Academic Calendar',
        ]),
      ],
    );
  }

  Widget _buildSection(
      BuildContext context, String title, IconData icon, List<String> items) {
    return Card(
      margin: const EdgeInsets.all(8.0),
      child: ExpansionTile(
        leading: Icon(icon, color: Theme.of(context).primaryColor),
        title: Text(title, style: const TextStyle(fontWeight: FontWeight.bold)),
        children: items
            .map((item) => ListTile(
                  title: Text(item),
                  onTap: () {
                    // Handle item tap
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('You tapped: $item')),
                    );
                  },
                ))
            .toList(),
      ),
    );
  }
}

============================

frontend/lib/screens/admin_dashboard.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../utils/network_config.dart';
import '../admin_screens/departments_page.dart';
import '../admin_screens/users_page.dart';

class AdminDashboard extends StatefulWidget {
  const AdminDashboard({super.key});

  @override
  _AdminDashboardState createState() => _AdminDashboardState();
}

class _AdminDashboardState extends State<AdminDashboard> {
  int _selectedIndex = 0; // Index for bottom navbar

  // Pages for bottom navigation bar
  static const List<Widget> _bottomNavPages = <Widget>[
    AdminHomePage(), // Index 0: Home (Landing Page)
    AcademicsPage(), // Index 1: Academics
    AnnouncementsPage(), // Index 2: Announcements
    StudentsPage(), // Index 3: Students
  ];

  void _onBottomNavItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  Future<void> _logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Admin Dashboard"),
        backgroundColor: Theme.of(context).primaryColor,
      ),
      drawer: _buildDrawer(), // Sidebar (Drawer)
      body: _bottomNavPages[_selectedIndex], // Display selected bottom nav page
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.school),
            label: 'Academics',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.announcement),
            label: 'Announcements',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.people),
            label: 'Students',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Theme.of(context).primaryColor,
        unselectedItemColor: Colors.grey,
        onTap: _onBottomNavItemTapped,
      ),
    );
  }

  Widget _buildDrawer() {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          DrawerHeader(
            decoration: BoxDecoration(
              color: Theme.of(context).primaryColor,
            ),
            child: const Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                CircleAvatar(
                  radius: 40,
                  backgroundColor: Colors.white,
                  child: Icon(Icons.admin_panel_settings,
                      size: 50, color: Color(0xFF0C6170)),
                ),
                SizedBox(height: 10),
                Text(
                  'Admin Panel',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
          ListTile(
            leading: const Icon(Icons.person_add),
            title: const Text('Manage Users'),
            onTap: () {
              Navigator.pop(context); // Close drawer
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const UsersPage()),
              );
            },
          ),
          ListTile(
            leading: const Icon(Icons.domain),
            title: const Text('Manage Departments'),
            onTap: () {
              Navigator.pop(context); // Close drawer
              Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => const DepartmentsPage()),
              );
            },
          ),
          const Divider(),
          ListTile(
            leading: const Icon(Icons.logout),
            title: const Text('Logout'),
            onTap: _logout,
          ),
        ],
      ),
    );
  }
}

// Landing Page (Home Page) for Admin
class AdminHomePage extends StatelessWidget {
  const AdminHomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Welcome, Admin!",
            style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Color(0xFF0C6170)),
          ),
          const SizedBox(height: 20),
          const Text(
            "Manage your campus efficiently from here.",
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 30),
          Card(
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  const Icon(Icons.info, size: 40, color: Color(0xFF0C6170)),
                  const SizedBox(height: 10),
                  const Text(
                    "Quick Stats",
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      _buildStatItem("Users", "50"), // Placeholder data
                      _buildStatItem("Departments", "5"), // Placeholder data
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatItem(String title, String value) {
    return Column(
      children: [
        Text(value,
            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
        Text(title, style: const TextStyle(fontSize: 16, color: Colors.grey)),
      ],
    );
  }
}

// Placeholder Pages for Bottom Navigation
class AcademicsPage extends StatelessWidget {
  const AcademicsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text(
        "Academics Section\n(Under Development)",
        textAlign: TextAlign.center,
        style: TextStyle(fontSize: 20),
      ),
    );
  }
}

class AnnouncementsPage extends StatelessWidget {
  const AnnouncementsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text(
        "Announcements Section\n(Under Development)",
        textAlign: TextAlign.center,
        style: TextStyle(fontSize: 20),
      ),
    );
  }
}

// Updated Students Page with Search and Card Display
class StudentsPage extends StatefulWidget {
  const StudentsPage({super.key});

  @override
  _StudentsPageState createState() => _StudentsPageState();
}

class _StudentsPageState extends State<StudentsPage> {
  List<dynamic> _students = [];
  dynamic _searchedStudent; // Single student to display after search
  String _searchQuery = '';
  String? _selectedBatch; // For filtering by batch
  bool _isLoading = true;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _fetchStudents();
  }

  Future<void> _fetchStudents() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');

      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/users'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final allUsers = json.decode(response.body);
        setState(() {
          _students =
              allUsers.where((user) => user['role'] == 'student').toList();
          _isLoading = false;
          _errorMessage = null;
        });
      } else {
        setState(() {
          _isLoading = false;
          _errorMessage = 'Failed to load students: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
        _errorMessage = 'Error fetching students: $e';
      });
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  void _searchStudent() {
    setState(() {
      _searchedStudent = null; // Reset previous result
      if (_searchQuery.isNotEmpty) {
        _searchedStudent = _students.firstWhere(
          (student) =>
              (student['username']
                      .toLowerCase()
                      .contains(_searchQuery.toLowerCase()) ||
                  student['admission_number']
                      .toLowerCase()
                      .contains(_searchQuery.toLowerCase())) &&
              (_selectedBatch == null || student['batch'] == _selectedBatch),
          orElse: () => null,
        );
      }
    });
  }

  List<String> _getBatchOptions() {
    return _students
        .map((student) => student['batch'] as String?)
        .whereType<String>()
        .toSet()
        .toList();
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          // Search Bar
          TextField(
            decoration: const InputDecoration(
              labelText: 'Search by Name or Admission Number',
              prefixIcon: Icon(Icons.search),
              border: OutlineInputBorder(),
            ),
            onChanged: (value) {
              _searchQuery = value;
              _searchStudent();
            },
          ),
          const SizedBox(height: 10),
          // Batch Filter Dropdown
          DropdownButtonFormField<String>(
            value: _selectedBatch,
            hint: const Text('Filter by Batch'),
            items: _getBatchOptions().map((batch) {
              return DropdownMenuItem<String>(
                value: batch,
                child: Text(batch),
              );
            }).toList()
              ..add(const DropdownMenuItem<String>(
                value: null,
                child: Text('All Batches'),
              )),
            onChanged: (value) {
              _selectedBatch = value;
              _searchStudent();
            },
            decoration: const InputDecoration(
              border: OutlineInputBorder(),
            ),
          ),
          const SizedBox(height: 20),
          // Student Details Card
          Expanded(
            child: _isLoading
                ? const Center(child: CircularProgressIndicator())
                : _errorMessage != null
                    ? Center(child: Text(_errorMessage!))
                    : _searchQuery.isEmpty
                        ? const Center(
                            child:
                                Text('Enter a search query to find a student'))
                        : _searchedStudent == null
                            ? const Center(child: Text('No student found'))
                            : Card(
                                elevation: 4,
                                child: Padding(
                                  padding: const EdgeInsets.all(16.0),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Row(
                                        children: [
                                          const Icon(Icons.school,
                                              size: 30,
                                              color: Color(0xFF0C6170)),
                                          const SizedBox(width: 10),
                                          Text(
                                            _searchedStudent['username'] ??
                                                'Unknown',
                                            style: const TextStyle(
                                                fontSize: 20,
                                                fontWeight: FontWeight.bold),
                                          ),
                                        ],
                                      ),
                                      const Divider(),
                                      _buildDetailRow('Admission No:',
                                          _searchedStudent['admission_number']),
                                      _buildDetailRow('Email:',
                                          _searchedStudent['email'] ?? 'N/A'),
                                      _buildDetailRow('Batch:',
                                          _searchedStudent['batch'] ?? 'N/A'),
                                      _buildDetailRow(
                                          'Department:',
                                          _searchedStudent['departmentcode'] ??
                                              'N/A'),
                                      _buildDetailRow(
                                          'Phone:',
                                          _searchedStudent['phone_number'] ??
                                              'N/A'),
                                    ],
                                  ),
                                ),
                              ),
          ),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label,
              style:
                  const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
          Text(value, style: const TextStyle(fontSize: 16)),
        ],
      ),
    );
  }
}

============================

frontend/lib/screens/announcements_page.dart:

contents:
import 'package:flutter/material.dart';

class AnnouncementsPage extends StatelessWidget {
  const AnnouncementsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return ListView(
      children: [
        _buildAnnouncement(
          context,
          'Campus Closure',
          'The campus will be closed on May 25th for maintenance.',
          Icons.warning,
          Colors.red,
        ),
        _buildAnnouncement(
          context,
          'New Course Offerings',
          'Registration for fall semester courses is now open.',
          Icons.school,
          Colors.blue,
        ),
        _buildAnnouncement(
          context,
          'Student Council Elections',
          'Vote for your student representatives on June 1st.',
          Icons.how_to_vote,
          Colors.green,
        ),
        _buildAnnouncement(
          context,
          'Library Hours Extended',
          'The library will now be open until midnight during exam week.',
          Icons.access_time,
          Colors.orange,
        ),
        _buildAnnouncement(
          context,
          'Career Fair',
          'Don\'t miss the annual career fair on July 10th in the main hall.',
          Icons.work,
          Colors.purple,
        ),
      ],
    );
  }

  Widget _buildAnnouncement(BuildContext context, String title,
      String description, IconData icon, Color color) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: color,
          child: Icon(icon, color: Colors.white),
        ),
        title: Text(title, style: const TextStyle(fontWeight: FontWeight.bold)),
        subtitle: Text(description),
        onTap: () {
          // Show full announcement details
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return AlertDialog(
                title: Text(title),
                content: Text(description),
                actions: [
                  TextButton(
                    child: const Text('Close'),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              );
            },
          );
        },
      ),
    );
  }
}

============================

frontend/lib/screens/chatbot.dart:

contents:
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:file_picker/file_picker.dart';

class ChatbotPage extends StatefulWidget {
  const ChatbotPage({super.key});

  @override
  State<ChatbotPage> createState() => _ChatbotPageState();
}

class _ChatbotPageState extends State<ChatbotPage> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  List<Map<String, dynamic>> _chatSessions = [];
  List<Map<String, String>> _messages = [];
  bool _isLoading = false;
  int _selectedChatIndex = -1;
  String _chatTitle = "New Chat";

  @override
  void initState() {
    super.initState();
    _loadChatHistory();
  }

  Future<void> _loadChatHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final chatData = prefs.getString('chat_sessions');
    if (chatData != null) {
      setState(() {
        _chatSessions = List<Map<String, dynamic>>.from(jsonDecode(chatData));
        for (var session in _chatSessions) {
          if (session['messages'] != null) {
            session['messages'] = List<Map<String, String>>.from(
                (session['messages'] as List)
                    .map((msg) => Map<String, String>.from(msg)));
          }
        }
        if (_chatSessions.isNotEmpty && _selectedChatIndex == -1) {
          _selectedChatIndex = 0;
          _chatTitle = _chatSessions[0]['name'] ?? "Chat 1";
          _messages = List<Map<String, String>>.from(
              _chatSessions[0]['messages'] ?? []);
        }
      });
    }
  }

  Future<void> _saveChatHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final sessionsToSave = _chatSessions.map((session) {
      return {
        'name': session['name'],
        'messages': List<Map<String, String>>.from(session['messages'] ?? [])
      };
    }).toList();
    await prefs.setString('chat_sessions', jsonEncode(sessionsToSave));
  }

  Future<void> _sendMessage({PlatformFile? file}) async {
    final userMessage = _messageController.text.trim();
    if (userMessage.isEmpty && file == null) return;

    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('jwt_token');
    if (token == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please log in first")),
      );
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }

    setState(() {
      if (userMessage.isNotEmpty) {
        _messages.add({"sender": "user", "text": userMessage});
      }
      if (file != null) {
        _messages.add({"sender": "user", "text": "Uploaded: ${file.name}"});
      }
      _isLoading = true;
    });
    _messageController.clear();
    _scrollToBottom();

    try {
      var request = http.MultipartRequest(
        'POST',
        Uri.parse("http://localhost:5001/api/chatbot/chat"),
      );
      request.headers['Authorization'] = 'Bearer $token';

      if (userMessage.isNotEmpty) request.fields['message'] = userMessage;
      if (file != null) {
        if (file.size > 10 * 1024 * 1024) {
          // 10MB limit
          throw Exception("File size exceeds 10MB limit");
        }
        request.files
            .add(await http.MultipartFile.fromPath('file', file.path!));
      }

      final response =
          await request.send().timeout(const Duration(seconds: 30));
      final responseBody = await http.Response.fromStream(response);

      if (response.statusCode == 200) {
        final responseData = jsonDecode(responseBody.body);
        setState(() {
          if (responseData.containsKey("summary")) {
            _messages.add({
              "sender": "bot",
              "text": "Summary: ${responseData['summary']}"
            });
            _messages.add({
              "sender": "bot",
              "text": "Description: ${responseData['description']}"
            });
          } else {
            final botResponse =
                responseData["response"] ?? "No response from server";
            _messages.add({"sender": "bot", "text": botResponse});
          }
        });
      } else {
        final errorData = jsonDecode(responseBody.body);
        setState(() {
          _messages.add({
            "sender": "bot",
            "text":
                "Error: ${errorData['error'] ?? 'Status ${response.statusCode}'}"
          });
        });
      }
    } catch (e) {
      setState(() {
        _messages.add({"sender": "bot", "text": "Error: ${e.toString()}"});
      });
    } finally {
      setState(() => _isLoading = false);
      _scrollToBottom();
      _updateChatSessions();
    }
  }

  void _scrollToBottom() {
    Future.delayed(const Duration(milliseconds: 300), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  void _renameChat() {
    TextEditingController _renameController =
        TextEditingController(text: _chatTitle);
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Rename Chat"),
          content: TextField(
            controller: _renameController,
            decoration: const InputDecoration(hintText: "Enter new chat name"),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () {
                setState(() {
                  _chatTitle = _renameController.text;
                  if (_selectedChatIndex != -1) {
                    _chatSessions[_selectedChatIndex]["name"] = _chatTitle;
                  } else if (_messages.isNotEmpty) {
                    _chatSessions
                        .add({"name": _chatTitle, "messages": _messages});
                    _selectedChatIndex = _chatSessions.length - 1;
                  }
                });
                _saveChatHistory();
                Navigator.pop(context);
              },
              child: const Text("Save"),
            ),
          ],
        );
      },
    );
  }

  void _updateChatSessions() {
    if (_selectedChatIndex == -1 && _messages.isNotEmpty) {
      _chatSessions.add({
        "name": _chatTitle,
        "messages": List<Map<String, String>>.from(_messages)
      });
      _selectedChatIndex = _chatSessions.length - 1;
    } else if (_selectedChatIndex != -1) {
      _chatSessions[_selectedChatIndex]["messages"] =
          List<Map<String, String>>.from(_messages);
    }
    _saveChatHistory();
  }

  Future<void> _showUploadDialog() async {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Upload PDF"),
          content:
              const Text("Please upload a PDF file (max 10MB) to summarize."),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                _uploadFile();
              },
              child: const Text("Upload"),
            ),
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
          ],
        );
      },
    );
  }

  Future<void> _uploadFile() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      allowedExtensions: ['pdf'],
      type: FileType.custom,
    );

    if (result != null && result.files.isNotEmpty) {
      final file = result.files.single;
      await _sendMessage(file: file);
    }
  }

  void _deleteChat(int index) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Delete Chat"),
          content: const Text("Are you sure you want to delete this chat?"),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () {
                setState(() {
                  _chatSessions.removeAt(index);
                  if (_selectedChatIndex == index) {
                    _messages.clear();
                    _chatTitle = "New Chat";
                    _selectedChatIndex = -1;
                  } else if (_selectedChatIndex > index) {
                    _selectedChatIndex--;
                  }
                });
                _saveChatHistory();
                Navigator.pop(context);
              },
              child: const Text("Delete"),
            ),
          ],
        );
      },
    );
  }

  Widget _buildSidebar() {
    return Drawer(
      child: Column(
        children: [
          ListTile(
            title: const Text("Chat History"),
            trailing: IconButton(
              icon: const Icon(Icons.close),
              onPressed: () => Navigator.pop(context),
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: _chatSessions.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title:
                      Text(_chatSessions[index]["name"] ?? "Chat ${index + 1}"),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () => _deleteChat(index),
                  ),
                  onTap: () {
                    setState(() {
                      _selectedChatIndex = index;
                      _messages = List<Map<String, String>>.from(
                          _chatSessions[index]["messages"] ?? []);
                      _chatTitle =
                          _chatSessions[index]["name"] ?? "Chat ${index + 1}";
                    });
                    Navigator.pop(context);
                  },
                );
              },
            ),
          ),
          ListTile(
            leading: const Icon(Icons.add),
            title: const Text("New Chat"),
            onTap: () {
              setState(() {
                _messages.clear();
                _chatTitle = "New Chat";
                _selectedChatIndex = -1;
              });
              Navigator.pop(context);
            },
          ),
        ],
      ),
    );
  }

  Widget _buildChatArea() {
    return ListView.builder(
      controller: _scrollController,
      itemCount: _messages.length,
      itemBuilder: (context, index) {
        final message = _messages[index];
        final isUser = message['sender'] == 'user';
        return Align(
          alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: isUser ? Colors.blueAccent : Colors.grey[300],
              borderRadius: BorderRadius.circular(10),
            ),
            child: Text(
              message['text'] ?? '',
              style: TextStyle(color: isUser ? Colors.white : Colors.black87),
            ),
          ),
        );
      },
    );
  }

  Widget _buildInputField() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 5),
      decoration: const BoxDecoration(
        color: Colors.white,
        boxShadow: [BoxShadow(color: Colors.black26, blurRadius: 2)],
      ),
      child: Row(
        children: [
          IconButton(
            icon: const Icon(Icons.upload_file, color: Colors.blueAccent),
            onPressed: _showUploadDialog,
          ),
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: const InputDecoration(
                hintText: "Type a message...",
                border: InputBorder.none,
              ),
              onSubmitted: (value) => _sendMessage(),
            ),
          ),
          IconButton(
            icon: const Icon(Icons.send, color: Colors.blueAccent),
            onPressed: () => _sendMessage(),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      drawer: _buildSidebar(),
      appBar: AppBar(
        title: Text(_chatTitle),
        leading: Builder(
          builder: (context) => IconButton(
            icon: const Icon(Icons.menu),
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: _renameChat,
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(child: _buildChatArea()),
          if (_isLoading) const LinearProgressIndicator(),
          _buildInputField(),
        ],
      ),
    );
  }
}

============================

frontend/lib/screens/hod_dashboard.dart:

contents:
import 'package:flutter/material.dart';

class HODDashboard extends StatelessWidget {
  final VoidCallback logout;
  HODDashboard({required this.logout});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("HOD Dashboard")),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration: BoxDecoration(color: Colors.blue),
              child: Text("HOD Panel",
                  style: TextStyle(color: Colors.white, fontSize: 24)),
            ),
            ListTile(
              title: Text("Manage Results"),
              onTap: () => Navigator.push(context,
                  MaterialPageRoute(builder: (_) => ResultsApprovalPage())),
            ),
            ListTile(
              title: Text("Manage Events"),
              onTap: () => Navigator.push(
                  context, MaterialPageRoute(builder: (_) => EventsPage())),
            ),
            ListTile(title: Text("Logout"), onTap: logout),
          ],
        ),
      ),
      body: Center(child: Text("Welcome to HOD Dashboard")),
    );
  }
}

class ResultsApprovalPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Manage Results")),
      body: Center(child: Text("Results Approval - TBD")),
    );
  }
}

class EventsPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Manage Events")),
      body: Center(child: Text("Events Management - TBD")),
    );
  }
}

============================

frontend/lib/screens/home.dart:

contents:
import 'package:flutter/material.dart';
import 'academics_page.dart';
import 'announcements_page.dart';
import 'profile_page.dart';
import 'chatbot.dart';

class HomeScreen extends StatefulWidget {
  final Map<String, String> userData; // Accept full user data

  const HomeScreen({super.key, required this.userData});

  @override
  HomeScreenState createState() => HomeScreenState();
}

class HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;
  late List<Widget> _widgetOptions;
  late String userName;

  @override
  void initState() {
    super.initState();
    userName = widget.userData['name'] ?? "User"; // Use 'name' from backend
    _initializePages();
  }

  void _initializePages() {
    _widgetOptions = [
      HomeContent(userData: widget.userData),
      const ChatbotPage(),
      const AcademicsPage(),
      const AnnouncementsPage(),
      const ProfilePage(),
    ];
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  // ✅ Function to dynamically update the title based on the selected page
  String _getTitle() {
    switch (_selectedIndex) {
      case 0:
        return "Welcome, $userName"; // ✅ Home Screen
      case 1:
        return "Chatbot"; // ✅ Chatbot Page
      case 2:
        return "Academics"; // ✅ Academics Page
      case 3:
        return "Announcements"; // ✅ Announcements Page
      case 4:
        return "Profile"; // ✅ Profile Page
      default:
        return "Campus Connect";
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          _getTitle(), // ✅ Dynamic title updates
          style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications), // ✅ Notification Icon
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text("Notifications clicked!")),
              );
            },
          ),
          const SizedBox(width: 10),
        ],
      ),
      body: _widgetOptions[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.chat), label: 'Chatbot'),
          BottomNavigationBarItem(icon: Icon(Icons.school), label: 'Academics'),
          BottomNavigationBarItem(
              icon: Icon(Icons.announcement), label: 'Announcements'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Theme.of(context).primaryColor,
        unselectedItemColor: Colors.grey,
        onTap: _onItemTapped,
      ),
    );
  }
}

// ✅ Home Content Section with Welcome Message
class HomeContent extends StatelessWidget {
  final Map<String, String> userData;

  const HomeContent({super.key, required this.userData});

  @override
  Widget build(BuildContext context) {
    String userName = userData['name'] ?? "Guest"; // Use 'name' from backend

    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Welcome, $userName!', // ✅ Dynamic welcome message
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Theme.of(context).primaryColor,
              ),
            ),
            const SizedBox(height: 20),
            Text(
              'What would you like to do today?',
              style: TextStyle(
                fontSize: 18,
                color: Theme.of(context).hintColor,
              ),
            ),
            const SizedBox(height: 20),
            GridView.count(
              crossAxisCount: 2,
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              mainAxisSpacing: 16,
              crossAxisSpacing: 16,
              children: [
                _buildFeatureCard(context, 'Subjects', Icons.book),
                _buildFeatureCard(context, 'Exam Details', Icons.assignment),
                _buildFeatureCard(context, 'Teachers Info', Icons.person),
                _buildFeatureCard(context, 'Assignments', Icons.description),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFeatureCard(BuildContext context, String title, IconData icon) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('You tapped on $title')),
          );
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: Theme.of(context).primaryColor),
              const SizedBox(height: 12),
              Text(
                title,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).primaryColor,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

============================

frontend/lib/screens/login.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../utils/network_config.dart';
import 'home.dart';
import 'admin_dashboard.dart';
import '../staff_screens/staff_dashboard.dart';
import '../hod_screens/hod_dashboard.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  LoginScreenState createState() => LoginScreenState();
}

class LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController admissionNumberController =
      TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  bool isLoading = false;
  bool isCheckingRole = true;

  @override
  void initState() {
    super.initState();
    _checkUserRole();
  }

  Future<void> _checkUserRole() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('jwt_token');
    String? role =
        prefs.getString('user_role'); // Updated to 'user_role' to match backend

    if (token != null) {
      if (role == 'admin') {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const AdminDashboard()),
        );
      } else if (role == 'staff') {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const StaffDashboard()),
        );
      } else if (role == 'hod') {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const HodDashboard()),
        );
      } else if (role == 'student') {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => HomeScreen(userData: {
              'name': prefs.getString('username') ??
                  "User", // Updated to 'username'
              'email': prefs.getString('email') ?? "N/A",
              'phone': prefs.getString('phone_number') ??
                  "N/A", // Updated to 'phone_number'
              'admission_number': prefs.getString('admission_number') ?? "",
            }),
          ),
        );
      }
    }

    setState(() {
      isCheckingRole = false;
    });
  }

  Future<void> _login() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      isLoading = true;
    });

    String admissionNumber = admissionNumberController.text;
    String password = passwordController.text;

    try {
      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/login'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'admission_number': admissionNumber,
          'password': password,
        }),
      );

      print('Login Response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        SharedPreferences prefs = await SharedPreferences.getInstance();
        await prefs.setString('jwt_token', data['token']);
        await prefs.setString(
            'user_role', data['user']['role']); // Updated to 'user_role'
        await prefs.setString(
            'username', data['user']['username']); // Updated to 'username'
        await prefs.setString('email', data['user']['email']);
        await prefs.setString('phone_number',
            data['user']['phone_number'] ?? 'N/A'); // Updated to 'phone_number'
        await prefs.setString(
            'admission_number', data['user']['admission_number']);
        await prefs.setString(
            'departmentcode',
            data['user']['departmentcode'] ??
                ''); // Already present, kept for consistency

        switch (data['user']['role']) {
          case 'admin':
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => const AdminDashboard()),
            );
            break;
          case 'staff':
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => const StaffDashboard()),
            );
            break;
          case 'hod':
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => const HodDashboard()),
            );
            break;
          case 'student':
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => HomeScreen(userData: {
                  'name': data['user']['username'],
                  'email': data['user']['email'],
                  'phone': data['user']['phone_number'] ?? 'N/A',
                  'admission_number': data['user']['admission_number'],
                }),
              ),
            );
            break;
          default:
            _showMessage('Unknown role: ${data['user']['role']}', Colors.red);
        }
      } else {
        final errorData = jsonDecode(response.body);
        _showMessage(errorData['error'] ?? 'Login failed', Colors.red);
      }
    } catch (e) {
      _showMessage('Login failed: $e', Colors.red);
    }

    setState(() {
      isLoading = false;
    });
  }

  void _showMessage(String message, Color color) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: color,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: isCheckingRole
          ? const Center(child: CircularProgressIndicator())
          : SafeArea(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Text(
                        'Campus Connect',
                        style: TextStyle(
                          fontSize: 32,
                          fontWeight: FontWeight.bold,
                          color: Theme.of(context).primaryColor,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 40),
                      TextFormField(
                        controller: admissionNumberController,
                        decoration: const InputDecoration(
                          labelText: 'Admission Number',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.person),
                        ),
                        validator: (value) => value == null || value.isEmpty
                            ? 'Please enter your admission number'
                            : null,
                      ),
                      const SizedBox(height: 20),
                      TextFormField(
                        controller: passwordController,
                        decoration: const InputDecoration(
                          labelText: 'Password',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.lock),
                        ),
                        obscureText: true,
                        validator: (value) => value == null || value.isEmpty
                            ? 'Please enter your password'
                            : null,
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: isLoading ? null : _login,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Theme.of(context).primaryColor,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12)),
                        ),
                        child: isLoading
                            ? const CircularProgressIndicator(
                                color: Colors.white)
                            : const Text('Login',
                                style: TextStyle(
                                    fontSize: 18, color: Colors.white)),
                      ),
                    ],
                  ),
                ),
              ),
            ),
    );
  }
}

============================

frontend/lib/screens/profile_page.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../utils/network_config.dart';

class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  String admissionNumber = "";
  String role = "";
  String email = "";
  String phone = "";
  String name = "User";
  String department = "";
  String profileImagePath = "";

  final TextEditingController nameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController otpController = TextEditingController();
  final TextEditingController newPasswordController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      admissionNumber = prefs.getString('admission_number') ?? "N/A";
      role = prefs.getString('role') ?? "N/A";
      email = prefs.getString('email') ?? "N/A";
      phone = prefs.getString('phone') ?? "N/A";
      name = prefs.getString('name') ?? "User";
      department = prefs.getString('department') ?? "Unknown";
      profileImagePath = prefs.getString('profile_image') ?? "";
    });

    nameController.text = name;
    emailController.text = email;
    phoneController.text = phone;
  }

  Future<void> _updateUserData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('name', nameController.text);
    await prefs.setString('phone', phoneController.text);

    setState(() {
      name = nameController.text;
      phone = phoneController.text;
    });

    Navigator.pop(context);
  }

  Future<void> _requestOtp() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        Navigator.pushReplacementNamed(context, '/login');
        return;
      }

      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/request_otp'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({'admission_number': admissionNumber}),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('OTP sent to your email')),
        );
        _showResetPasswordDialog();
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to send OTP: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _resetPassword() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        Navigator.pushReplacementNamed(context, '/login');
        return;
      }

      final response = await http.post(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/auth/reset_password'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'admission_number': admissionNumber,
          'otp': otpController.text,
          'new_password': newPasswordController.text,
        }),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Password reset successful')),
        );
        Navigator.pop(context);
      } else {
        final errorData = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('Failed to reset password: ${errorData['error']}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    Navigator.of(context).pushReplacementNamed('/login');
  }

  Future<void> _pickProfileImage() async {
    final ImagePicker picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);

    if (image != null) {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.setString('profile_image', image.path);

      setState(() {
        profileImagePath = image.path;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        children: [
          const SizedBox(height: 20),
          GestureDetector(
            onTap: _pickProfileImage,
            child: CircleAvatar(
              radius: 50,
              backgroundImage: profileImagePath.isNotEmpty
                  ? FileImage(File(profileImagePath)) as ImageProvider
                  : const AssetImage('assets/default_profile.png'),
              child: Align(
                alignment: Alignment.bottomRight,
                child: CircleAvatar(
                  backgroundColor: Colors.white,
                  radius: 15,
                  child: Icon(Icons.camera_alt,
                      color: Theme.of(context).primaryColor, size: 20),
                ),
              ),
            ),
          ),
          const SizedBox(height: 10),
          Text(
            name,
            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          Text(
            '$department - ${role.toUpperCase()}',
            style: const TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 20),
          _buildInfoCard(),
          const SizedBox(height: 20),
          _buildActionButtons(),
        ],
      ),
    );
  }

  Widget _buildInfoCard() {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            _buildInfoRow(Icons.email, email),
            const Divider(),
            _buildInfoRow(Icons.phone, phone),
            const Divider(),
            _buildInfoRow(Icons.school, 'Admission No: $admissionNumber'),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String text) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Icon(icon, color: Colors.grey),
          const SizedBox(width: 10),
          Text(text),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Column(
      children: [
        ElevatedButton(
          onPressed: _showEditProfileDialog,
          style: ElevatedButton.styleFrom(
            backgroundColor: Theme.of(context).primaryColor,
            foregroundColor: Colors.white,
            minimumSize: const Size(200, 40),
          ),
          child: const Text('Edit Profile'),
        ),
        const SizedBox(height: 10),
        ElevatedButton(
          onPressed: _requestOtp,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.orange,
            foregroundColor: Colors.white,
            minimumSize: const Size(200, 40),
          ),
          child: const Text('Change Password'),
        ),
        const SizedBox(height: 10),
        ElevatedButton(
          onPressed: _logout,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.red,
            foregroundColor: Colors.white,
            minimumSize: const Size(200, 40),
          ),
          child: const Text('Logout'),
        ),
      ],
    );
  }

  void _showEditProfileDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Edit Profile"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: nameController,
                decoration: const InputDecoration(labelText: "Name"),
              ),
              const SizedBox(height: 10),
              TextFormField(
                controller: phoneController,
                decoration: const InputDecoration(labelText: "Phone"),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            ElevatedButton(
              onPressed: _updateUserData,
              child: const Text("Save"),
            ),
          ],
        );
      },
    );
  }

  void _showResetPasswordDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Reset Password"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: otpController,
                decoration: const InputDecoration(labelText: "Enter OTP"),
              ),
              const SizedBox(height: 10),
              TextFormField(
                controller: newPasswordController,
                decoration: const InputDecoration(labelText: "New Password"),
                obscureText: true,
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            ElevatedButton(
              onPressed: _resetPassword,
              child: const Text("Reset"),
            ),
          ],
        );
      },
    );
  }
}

============================

frontend/lib/screens/splash.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'admin_dashboard.dart'; // ✅ Import Admin Dashboard

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  SplashScreenState createState() => SplashScreenState();
}

class SplashScreenState extends State<SplashScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(_controller);
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.5), end: Offset.zero).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeOutCubic),
    );

    _controller.forward();

    _navigateToNextScreen();
  }

  Future<void> _navigateToNextScreen() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? role = prefs.getString('role');

    // ✅ Debugging: Print role to check stored value
    print("User Role from SharedPreferences: $role");

    await Future.delayed(const Duration(seconds: 3)); // Ensure animation plays

    if (mounted) {
      if (role == 'admin') {
        print("✅ Redirecting to Admin Dashboard");
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => AdminDashboard()),
        );
      } else {
        print("✅ Redirecting to Login Page");
        Navigator.of(context).pushReplacementNamed('/login');
      }
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).primaryColor,
      body: Center(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: const Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.school,
                  size: 100,
                  color: Colors.white,
                ),
                SizedBox(height: 20),
                Text(
                  'Campus Connect',
                  style: TextStyle(
                    fontSize: 40,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

============================

frontend/lib/screens/students_page.dart:

contents:
import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/network_config.dart';

class StudentsPage extends StatefulWidget {
  @override
  _StudentsPageState createState() => _StudentsPageState();
}

class _StudentsPageState extends State<StudentsPage> {
  List<dynamic> _students = [];
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    fetchUsers();
  }

  Future<void> fetchUsers() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      print('StudentsPage: Token = $token');
      if (token == null) {
        print('StudentsPage: No token found, redirecting to login');
        _redirectToLogin();
        return;
      }

      final url = Uri.parse('${NetworkConfig.getBaseUrl()}/api/admin/users');
      print('StudentsPage: Full URL = $url');
      final response = await http.get(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      print(
          'StudentsPage: Response: ${response.statusCode} - ${response.body}');
      if (response.statusCode == 200) {
        List<dynamic> users = json.decode(response.body);
        print('StudentsPage: Users fetched: ${users.length}');
        setState(() {
          _students = users.where((user) => user['role'] == 'student').toList();
          _errorMessage = null;
          print('StudentsPage: Students filtered: ${_students.length}');
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load students: ${response.statusCode}';
          print('StudentsPage: Error: $_errorMessage');
        });
        if (response.statusCode == 401 || response.statusCode == 403) {
          _redirectToLogin();
        }
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching students: $e';
        print('StudentsPage: Exception: $e');
      });
    }
  }

  Future<void> deleteUser(String admissionNumber) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/admin/delete_user/$admissionNumber');
      final response = await http.delete(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        setState(() {
          _students.removeWhere(
              (student) => student['admission_number'] == admissionNumber);
          _errorMessage = null;
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to delete student: ${response.statusCode}';
        });
        if (response.statusCode == 401 || response.statusCode == 403) {
          _redirectToLogin();
        }
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error deleting student: $e';
      });
    }
  }

  Future<void> updateUser(String admissionNumber, String username, String email,
      String role) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final url = Uri.parse(
          '${NetworkConfig.getBaseUrl()}/api/admin/update_user/$admissionNumber');
      final response = await http.put(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({"username": username, "email": email, "role": role}),
      );

      if (response.statusCode == 200) {
        await fetchUsers();
      } else {
        setState(() {
          _errorMessage = 'Failed to update student: ${response.statusCode}';
        });
        if (response.statusCode == 401 || response.statusCode == 403) {
          _redirectToLogin();
        }
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error updating student: $e';
      });
    }
  }

  void showEditDialog(Map<String, dynamic> student) {
    TextEditingController usernameController =
        TextEditingController(text: student['username']);
    TextEditingController emailController =
        TextEditingController(text: student['email']);

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Edit Student"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: usernameController,
                decoration: const InputDecoration(labelText: "Username"),
              ),
              TextField(
                controller: emailController,
                decoration: const InputDecoration(labelText: "Email"),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () async {
                await updateUser(
                  student['admission_number'],
                  usernameController.text,
                  emailController.text,
                  'student',
                );
                Navigator.pop(context);
              },
              child: const Text("Save"),
            ),
          ],
        );
      },
    );
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Students")),
      body: _errorMessage != null
          ? Center(child: Text(_errorMessage!))
          : _students.isEmpty
              ? const Center(child: Text("No students found"))
              : ListView.builder(
                  itemCount: _students.length,
                  itemBuilder: (context, index) {
                    final student = _students[index];
                    return ListTile(
                      leading: const Icon(Icons.school),
                      title: Text(student['username'] ?? 'Unknown'),
                      subtitle: Text("Email: ${student['email'] ?? 'N/A'}"),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: const Icon(Icons.edit),
                            onPressed: () => showEditDialog(student),
                          ),
                          IconButton(
                            icon: const Icon(Icons.delete),
                            onPressed: () =>
                                deleteUser(student['admission_number']),
                          ),
                        ],
                      ),
                    );
                  },
                ),
    );
  }
}

============================

frontend/lib/shared/department_staff_page.dart:

contents:
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/network_config.dart';
import '/hod_screens/hod_dashboard.dart';

class DepartmentStaffPage extends StatefulWidget {
  const DepartmentStaffPage({super.key});

  @override
  _DepartmentStaffPageState createState() => _DepartmentStaffPageState();
}

class _DepartmentStaffPageState extends State<DepartmentStaffPage> {
  List<Map<String, dynamic>> _staff = [];
  List<Map<String, dynamic>> _departments = [];
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    fetchStaff();
    fetchDepartments();
  }

  Future<void> fetchStaff() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/hod/department/staff'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        setState(() {
          _staff = List<Map<String, dynamic>>.from(jsonDecode(response.body));
          _errorMessage = null;
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load staff: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching staff: $e';
      });
    }
  }

  Future<void> fetchDepartments() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/departments/departments'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        setState(() {
          _departments =
              List<Map<String, dynamic>>.from(jsonDecode(response.body));
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load departments: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching departments: $e';
      });
    }
  }

  Future<void> updateStaff(
      String admissionNumber, Map<String, dynamic> staffData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.put(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/update_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(staffData),
      );

      if (response.statusCode == 200) {
        await fetchStaff();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Staff updated successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to update staff: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error updating staff: $e';
      });
    }
  }

  Future<void> deleteStaff(String admissionNumber) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/delete_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        await fetchStaff();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Staff deleted successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to delete staff: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error deleting staff: $e';
      });
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  void showEditDialog(Map<String, dynamic> staff) {
    TextEditingController usernameController =
        TextEditingController(text: staff['username']);
    TextEditingController emailController =
        TextEditingController(text: staff['email']);
    TextEditingController phoneController =
        TextEditingController(text: staff['phone_number'] ?? '');
    String role = 'staff'; // Fixed to staff since this page is for staff only
    String? departmentcode = staff['departmentcode'];

    showDialog(
      context: context,
      builder: (dialogContext) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: StatefulBuilder(
            builder: (dialogContext, setDialogState) {
              return Container(
                padding: const EdgeInsets.all(20),
                width: MediaQuery.of(context).size.width * 0.9,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text("Edit Staff",
                            style: TextStyle(
                                fontSize: 20, fontWeight: FontWeight.bold)),
                        IconButton(
                          icon: const Icon(Icons.close, color: Colors.grey),
                          onPressed: () => Navigator.pop(dialogContext),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    TextField(
                      controller: usernameController,
                      decoration: InputDecoration(
                        labelText: "Username",
                        prefixIcon: const Icon(Icons.person_outline),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12)),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: emailController,
                      decoration: InputDecoration(
                        labelText: "Email",
                        prefixIcon: const Icon(Icons.email_outlined),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12)),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: phoneController,
                      decoration: InputDecoration(
                        labelText: "Phone Number (Optional)",
                        prefixIcon: const Icon(Icons.phone_outlined),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12)),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    _departments.isEmpty
                        ? const Text("Loading departments...",
                            style: TextStyle(color: Colors.grey))
                        : DropdownButtonFormField<String>(
                            value: departmentcode,
                            items: _departments.map((dept) {
                              return DropdownMenuItem<String>(
                                value: dept['departmentcode'],
                                child: Text(dept['departmentname']),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setDialogState(() {
                                departmentcode = value;
                              });
                            },
                            decoration: InputDecoration(
                              labelText: "Department",
                              prefixIcon: const Icon(Icons.domain),
                              border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12)),
                              filled: true,
                              fillColor: Colors.grey[100],
                            ),
                          ),
                    const SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: () => Navigator.pop(dialogContext),
                          style: TextButton.styleFrom(
                            foregroundColor: Colors.grey,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                          ),
                          child: const Text("Cancel"),
                        ),
                        const SizedBox(width: 8),
                        ElevatedButton(
                          onPressed: () async {
                            if (usernameController.text.isEmpty ||
                                emailController.text.isEmpty ||
                                departmentcode == null) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                    content: Text(
                                        "Please fill all required fields")),
                              );
                              return;
                            }
                            await updateStaff(staff['admission_number'], {
                              'username': usernameController.text,
                              'email': emailController.text,
                              'phone_number': phoneController.text.isEmpty
                                  ? null
                                  : phoneController.text,
                              'role': role,
                              'batch': null, // No batch for staff
                              'departmentcode': departmentcode,
                            });
                            Navigator.pop(dialogContext);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Theme.of(context).primaryColor,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12)),
                          ),
                          child: const Text("Save",
                              style: TextStyle(color: Colors.white)),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            },
          ),
        );
      },
    );
  }

  Color _getRoleColor(String role) {
    return Colors.green; // Fixed to green for staff
  }

  IconData _getRoleIcon(String role) {
    return Icons.person; // Fixed to person icon for staff
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Manage Department Staff"),
        backgroundColor: Colors.blueAccent,
        elevation: 4,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => const HodDashboard()),
            );
          },
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                    content:
                        Text("Add staff functionality not implemented yet")),
              );
            },
          ),
        ],
      ),
      body: _errorMessage != null
          ? Center(
              child: Text(_errorMessage!,
                  style: const TextStyle(color: Colors.red)))
          : _staff.isEmpty
              ? const Center(child: Text("No staff found in this department"))
              : Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ListView.builder(
                    itemCount: _staff.length,
                    itemBuilder: (context, index) {
                      final staff = _staff[index];
                      return Card(
                        elevation: 2,
                        margin: const EdgeInsets.symmetric(vertical: 6.0),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Row(
                            children: [
                              CircleAvatar(
                                backgroundColor: _getRoleColor(staff['role']),
                                child: Icon(_getRoleIcon(staff['role']),
                                    color: Colors.white),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      staff['username'] ?? 'Unknown',
                                      style: const TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      "Email: ${staff['email'] ?? 'N/A'}",
                                      style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.grey[700]),
                                    ),
                                    Text(
                                      "Role: STAFF",
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: _getRoleColor(staff['role']),
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  IconButton(
                                    icon: const Icon(Icons.edit,
                                        color: Colors.blue),
                                    onPressed: () => showEditDialog(staff),
                                    tooltip: 'Edit Staff',
                                  ),
                                  IconButton(
                                    icon: const Icon(Icons.delete,
                                        color: Colors.red),
                                    onPressed: () =>
                                        deleteStaff(staff['admission_number']),
                                    tooltip: 'Delete Staff',
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
    );
  }
}

============================

frontend/lib/shared/department_users_page.dart:

contents:
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/network_config.dart';
import '../staff_screens/staff_dashboard.dart';
import '../hod_screens/hod_dashboard.dart';

class DepartmentUsersPage extends StatefulWidget {
  final bool isStaffView; // Controls edit/delete visibility

  const DepartmentUsersPage({
    super.key,
    required this.isStaffView,
  });

  @override
  _DepartmentUsersPageState createState() => _DepartmentUsersPageState();
}

class _DepartmentUsersPageState extends State<DepartmentUsersPage> {
  List<Map<String, dynamic>> _users = [];
  List<Map<String, dynamic>> _departments = [];
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    fetchUsers();
    if (!widget.isStaffView)
      fetchDepartments(); // Only fetch departments for HOD
  }

  Future<void> fetchUsers() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final String endpoint = widget.isStaffView
          ? '/api/staff/department/users'
          : '/api/hod/department/users';

      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}$endpoint'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        setState(() {
          _users = List<Map<String, dynamic>>.from(jsonDecode(response.body));
          _errorMessage = null;
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load students: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching students: $e';
      });
    }
  }

  Future<void> fetchDepartments() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse('${NetworkConfig.getBaseUrl()}/api/departments/departments'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        setState(() {
          _departments =
              List<Map<String, dynamic>>.from(jsonDecode(response.body));
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load departments: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching departments: $e';
      });
    }
  }

  Future<void> updateUser(
      String admissionNumber, Map<String, dynamic> userData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.put(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/update_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(userData),
      );

      if (response.statusCode == 200) {
        await fetchUsers();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Student updated successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to update student: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error updating student: $e';
      });
    }
  }

  Future<void> deleteUser(String admissionNumber) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('jwt_token');
      if (token == null) {
        _redirectToLogin();
        return;
      }

      final response = await http.delete(
        Uri.parse(
            '${NetworkConfig.getBaseUrl()}/api/admin/delete_user/$admissionNumber'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        await fetchUsers();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Student deleted successfully')),
        );
      } else {
        setState(() {
          _errorMessage = 'Failed to delete student: ${response.statusCode}';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error deleting student: $e';
      });
    }
  }

  void _redirectToLogin() {
    Navigator.pushReplacementNamed(context, '/login');
  }

  void showEditDialog(Map<String, dynamic> user) {
    TextEditingController usernameController =
        TextEditingController(text: user['username']);
    TextEditingController emailController =
        TextEditingController(text: user['email']);
    TextEditingController phoneController =
        TextEditingController(text: user['phone_number'] ?? '');
    TextEditingController batchController =
        TextEditingController(text: user['batch'] ?? '');
    String role =
        'student'; // Fixed to student since this page is for students only
    String? departmentcode = user['departmentcode'];

    showDialog(
      context: context,
      builder: (dialogContext) {
        return Dialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 4,
          child: StatefulBuilder(
            builder: (dialogContext, setDialogState) {
              return Container(
                padding: const EdgeInsets.all(20),
                width: MediaQuery.of(context).size.width * 0.9,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text("Edit Student",
                            style: TextStyle(
                                fontSize: 20, fontWeight: FontWeight.bold)),
                        IconButton(
                          icon: const Icon(Icons.close, color: Colors.grey),
                          onPressed: () => Navigator.pop(dialogContext),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    TextField(
                      controller: usernameController,
                      decoration: InputDecoration(
                        labelText: "Username",
                        prefixIcon: const Icon(Icons.person_outline),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12)),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: emailController,
                      decoration: InputDecoration(
                        labelText: "Email",
                        prefixIcon: const Icon(Icons.email_outlined),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12)),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: phoneController,
                      decoration: InputDecoration(
                        labelText: "Phone Number (Optional)",
                        prefixIcon: const Icon(Icons.phone_outlined),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12)),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: batchController,
                      decoration: InputDecoration(
                        labelText: "Batch (e.g., 2021-2025)",
                        prefixIcon: const Icon(Icons.calendar_today),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12)),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                    const SizedBox(height: 12),
                    _departments.isEmpty
                        ? const Text("Loading departments...",
                            style: TextStyle(color: Colors.grey))
                        : DropdownButtonFormField<String>(
                            value: departmentcode,
                            items: _departments.map((dept) {
                              return DropdownMenuItem<String>(
                                value: dept['departmentcode'],
                                child: Text(dept['departmentname']),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setDialogState(() {
                                departmentcode = value;
                              });
                            },
                            decoration: InputDecoration(
                              labelText: "Department",
                              prefixIcon: const Icon(Icons.domain),
                              border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12)),
                              filled: true,
                              fillColor: Colors.grey[100],
                            ),
                          ),
                    const SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: () => Navigator.pop(dialogContext),
                          style: TextButton.styleFrom(
                            foregroundColor: Colors.grey,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                          ),
                          child: const Text("Cancel"),
                        ),
                        const SizedBox(width: 8),
                        ElevatedButton(
                          onPressed: () async {
                            if (usernameController.text.isEmpty ||
                                emailController.text.isEmpty ||
                                departmentcode == null) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                    content: Text(
                                        "Please fill all required fields")),
                              );
                              return;
                            }
                            await updateUser(user['admission_number'], {
                              'username': usernameController.text,
                              'email': emailController.text,
                              'phone_number': phoneController.text.isEmpty
                                  ? null
                                  : phoneController.text,
                              'role': role,
                              'batch': batchController.text,
                              'departmentcode': departmentcode,
                            });
                            Navigator.pop(dialogContext);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Theme.of(context).primaryColor,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 8),
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12)),
                          ),
                          child: const Text("Save",
                              style: TextStyle(color: Colors.white)),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            },
          ),
        );
      },
    );
  }

  Color _getRoleColor(String role) {
    return Colors.orange; // Fixed to orange for students
  }

  IconData _getRoleIcon(String role) {
    return Icons.school; // Fixed to school icon for students
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.isStaffView
            ? "Department Students"
            : "Manage Department Students"),
        backgroundColor: widget.isStaffView ? Colors.green : Colors.blueAccent,
        elevation: 4,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => widget.isStaffView
                    ? const StaffDashboard()
                    : const HodDashboard(),
              ),
            );
          },
        ),
        actions: widget.isStaffView
            ? null
            : [
                IconButton(
                  icon: const Icon(Icons.add),
                  onPressed: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                          content: Text(
                              "Add student functionality not implemented yet")),
                    );
                  },
                ),
              ],
      ),
      body: _errorMessage != null
          ? Center(
              child: Text(_errorMessage!,
                  style: const TextStyle(color: Colors.red)))
          : _users.isEmpty
              ? const Center(
                  child: Text("No students found in this department"))
              : Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ListView.builder(
                    itemCount: _users.length,
                    itemBuilder: (context, index) {
                      final user = _users[index];
                      return Card(
                        elevation: 2,
                        margin: const EdgeInsets.symmetric(vertical: 6.0),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Row(
                            children: [
                              CircleAvatar(
                                backgroundColor: _getRoleColor(user['role']),
                                child: Icon(_getRoleIcon(user['role']),
                                    color: Colors.white),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      user['username'] ?? 'Unknown',
                                      style: const TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      "Email: ${user['email'] ?? 'N/A'}",
                                      style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.grey[700]),
                                    ),
                                    Text(
                                      "Role: STUDENT",
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: _getRoleColor(user['role']),
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    if (user['batch'] != null)
                                      Text(
                                        "Batch: ${user['batch']}",
                                        style: TextStyle(
                                            fontSize: 14,
                                            color: Colors.grey[700]),
                                      ),
                                  ],
                                ),
                              ),
                              widget.isStaffView
                                  ? const SizedBox.shrink()
                                  : Row(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        IconButton(
                                          icon: const Icon(Icons.edit,
                                              color: Colors.blue),
                                          onPressed: () => showEditDialog(user),
                                          tooltip: 'Edit Student',
                                        ),
                                        IconButton(
                                          icon: const Icon(Icons.delete,
                                              color: Colors.red),
                                          onPressed: () => deleteUser(
                                              user['admission_number']),
                                          tooltip: 'Delete Student',
                                        ),
                                      ],
                                    ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
    );
  }
}

============================

frontend/lib/staff_screens/staff_dashboard.dart:

contents:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../shared/department_users_page.dart';

class StaffDashboard extends StatefulWidget {
  const StaffDashboard({super.key});

  @override
  _StaffDashboardState createState() => _StaffDashboardState();
}

class _StaffDashboardState extends State<StaffDashboard> {
  String? username; // Add variable to store username

  @override
  void initState() {
    super.initState();
    _loadUsername(); // Load username on initialization
  }

  Future<void> _loadUsername() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      username = prefs.getString('username') ??
          'Staff'; // Default to 'Staff' if username not found
    });
  }

  Future<void> _logout(BuildContext context) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear(); // Clear all preferences
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Staff Dashboard"),
        backgroundColor: Colors.green,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => _logout(context),
            tooltip: 'Logout',
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              'Welcome, $username!', // Updated to display username
              style: Theme.of(context)
                  .textTheme
                  .headlineSmall
                  ?.copyWith(color: Colors.green),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            ElevatedButton.icon(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) =>
                        const DepartmentUsersPage(isStaffView: true),
                  ),
                );
              },
              icon: const Icon(Icons.school),
              label: const Text("View Department Students"),
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("Staff feature coming soon!")),
                );
              },
              icon: const Icon(Icons.description),
              label: const Text("View Reports"),
            ),
          ],
        ),
      ),
    );
  }
}

============================

frontend/lib/utils/network_config.dart:

contents:
import 'dart:io';

class NetworkConfig {
  static String getBaseUrl() {
    if (Platform.isAndroid) {
      return "http://10.0.2.2:5001"; // ✅ Android Emulator
    } else if (Platform.isIOS) {
      return "http://localhost:5001"; // ✅ iOS Simulator
    } else {
      return "http://192.168.1.7:5001"; // ✅ Change this to your local backend IP
    }
  }
}

